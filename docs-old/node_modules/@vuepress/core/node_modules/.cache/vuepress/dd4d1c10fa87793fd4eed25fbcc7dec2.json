{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-012-custom-indexing.md?vue&type=template&id=79b648c9&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-012-custom-indexing.md","mtime":1673295761289},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmZjLTAxMi1ldmVudC1pbmRleGluZy1yZXZpc2l0ZWQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JmYy0wMTItZXZlbnQtaW5kZXhpbmctcmV2aXNpdGVkIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJGQyAwMTI6IEV2ZW50IEluZGV4aW5nIFJldmlzaXRlZCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjExLUZlYi0yMDIyOiBBZGQgdGVybWlub2xvZ2ljYWwgbm90ZXMuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIxMC1GZWItMjAyMjogVXBkYXRlZCBmcm9tIHJldmlldyBmZWVkYmFjay4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjA3LUZlYi0yMDIyOiBJbml0aWFsIGRyYWZ0IChAY3JlYWNoYWRhaXIpIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWJzdHJhY3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Fic3RyYWN0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBYnN0cmFjdCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdBIFRlbmRlcm1pbnQgbm9kZSBhbGxvd3MgQUJDSSBldmVudHMgYXNzb2NpYXRlZCB3aXRoIGJsb2NrIGFuZCB0cmFuc2FjdGlvblxucHJvY2Vzc2luZyB0byBiZSAiaW5kZXhlZCIgaW50byBwZXJzaXN0ZW50IHN0b3JhZ2UuICBUaGUgb3JpZ2luYWwgVGVuZGVybWludFxuaW1wbGVtZW50YXRpb24gcHJvdmlkZWQgYSBmaXhlZCwgYnVpbHQtaW4gJwogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL3N0YXRlL2luZGV4ZXIvYmxvY2sva3YiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigicHJvcHJpZXRhcnkgaW5kZXhlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgZm9yXG5zdWNoIGV2ZW50cy4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkluIHJlc3BvbnNlIHRvIHVzZXIgcmVxdWVzdHMgdG8gY3VzdG9taXplIGluZGV4aW5nLCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA2NS1jdXN0b20tZXZlbnQtaW5kZXhpbmcubWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQURSIDA2NSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1xuaW50cm9kdWNlZCBhbiAiZXZlbnQgc2luayIgaW50ZXJmYWNlIHRoYXQgYWxsb3dzIGRldmVsb3BlcnMgKGF0IGxlYXN0IGluXG50aGVvcnkpIHRvIHBsdWcgaW4gYWx0ZXJuYXRpdmUgaW5kZXggc3RvcmFnZS4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWx0aG91Z2ggQURSLTA2NSB3YXMgYSBnb29kIGZpcnN0IHN0ZXAgdG93YXJkIGN1c3RvbWl6YXRpb24sIGl0cyBpbXBsZW1lbnRhdGlvblxubW9kZWwgZG9lcyBub3Qgc2F0aXNmeSBhbGwgdGhlIHVzZXIgcmVxdWlyZW1lbnRzLiAgTW9yZW92ZXIsIHRoaXMgYXBwcm9hY2hcbmxlYXZlcyBzb21lIGV4aXN0aW5nIHRlY2huaWNhbCBpc3N1ZXMgd2l0aCBpbmRleGluZyB1bnNvbHZlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBSRkMgZG9jdW1lbnRzIHRoZXNlIGNvbmNlcm5zLCBhbmQgZGlzY3Vzc2VzIHNvbWUgcG90ZW50aWFsIGFwcHJvYWNoZXMgdG9cbnNvbHZpbmcgdGhlbS4gIFRoaXMgUkZDIGRvZXMgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibm90IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHByb3Bvc2UgYSBzcGVjaWZpYyB0ZWNobmljYWwgZGVjaXNpb24uIEl0IGlzXG5tZWFudCB0byB1bmlmeSBhbmQgZm9jdXMgc29tZSBvZiB0aGUgZGlzcGFyYXRlIGRpc2N1c3Npb25zIG9mIHRoZSB0b3BpYy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYmFja2dyb3VuZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYmFja2dyb3VuZCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmFja2dyb3VuZCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdXZSBiZWdpbiB3aXRoIHNvbWUgaW1wb3J0YW50IHRlcm1pbm9sb2dpY2FsIGNvbnRleHQuICBUaGUgdGVybSAiZXZlbnQiIGluXG5UZW5kZXJtaW50IGNhbiBiZSBjb25mdXNpbmcsIGFzIHRoZSBzYW1lIHdvcmQgaXMgdXNlZCBmb3IgbXVsdGlwbGUgcmVsYXRlZCBidXRcbmRpc3RpbmN0IGNvbmNlcHRzOicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFCQ0kgRXZlbnRzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgcmVmZXIgdG8gdGhlIGtleS12YWx1ZSBtZXRhZGF0YSBhdHRhY2hlZCB0byBibG9ja3MgYW5kXG50cmFuc2FjdGlvbnMgYnkgdGhlIGFwcGxpY2F0aW9uLiBUaGVzZSB2YWx1ZXMgYXJlIHJlcHJlc2VudGVkIGJ5IHRoZSBBQkNJXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRXZlbnQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBwcm90b2J1ZiBtZXNzYWdlIHR5cGUuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbnNlbnN1cyBFdmVudHMiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiByZWZlciB0byB0aGUgZGF0YSBwdWJsaXNoZWQgYnkgdGhlIFRlbmRlcm1pbnQgbm9kZSB0b1xuaXRzIHB1YnN1YiBidXMgaW4gcmVzcG9uc2UgdG8gdmFyaW91cyBjb25zZW5zdXMgc3RhdGUgdHJhbnNpdGlvbnMgYW5kIG90aGVyXG5pbXBvcnRhbnQgYWN0aXZpdGllcywgc3VjaCBhcyByb3VuZCB1cGRhdGVzLCB2b3RlcywgdHJhbnNhY3Rpb24gZGVsaXZlcnksXG5hbmQgYmxvY2sgY29tcGxldGlvbi4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnVGhpcyBjb25mdXNpb24gaXMgY29tcG91bmRlZCBiZWNhdXNlIHNvbWUgImNvbnNlbnN1cyBldmVudCIgdmFsdWVzIGFsc28gaGF2ZVxuIkFCQ0kgZXZlbnQiIG1ldGFkYXRhIGF0dGFjaGVkIHRvIHRoZW0uIE5vdGFibHksIGJsb2NrIGFuZCB0cmFuc2FjdGlvbiBpdGVtc1xudHlwaWNhbGx5IGhhdmUgQUJDSSBtZXRhZGF0YSBhc3NpZ25lZCBieSB0aGUgYXBwbGljYXRpb24uJwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluZGV4ZXJzIGFuZCBSUEMgY2xpZW50cyBzdWJzY3JpYmVkIHRvIHRoZSBwdWJzdWIgYnVzIHJlY2VpdmUgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImNvbnNlbnN1c1xuZXZlbnRzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBidXQgdGhleSBpZGVudGlmeSB3aGljaCBvbmVzIHRvIGNhcmUgYWJvdXQgdXNpbmcgcXVlcnkgZXhwcmVzc2lvbnNcbnRoYXQgbWF0Y2ggYWdhaW5zdCB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFCQ0kgZXZlbnRzIildKSwKICAgICAgICBfdm0uX3YoIiBhc3NvY2lhdGVkIHdpdGggdGhlbS4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkluIHRoZSBkaXNjdXNzaW9uIHRoYXQgZm9sbG93cywgd2Ugd2lsbCB1c2UgdGhlIHRlcm0gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImV2ZW50IGl0ZW0iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gcmVmZXIgdG9cbmEgZGF0dW0gcHVibGlzaGVkIHRvIG9yIHJlY2VpdmVkIGZyb20gdGhlIHB1YnN1YiBidXMsIGFuZCAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQUJDSSBldmVudCIpXSksCiAgICAgICAgX3ZtLl92KCIgb3JcbiIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJldmVudCBtZXRhZGF0YSIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gcmVmZXIgdG8gdGhlIGtleS92YWx1ZSBhbm5vdGF0aW9ucy4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW5kZXhpbmciKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaW4gdGhpcyBjb250ZXh0IG1lYW5zIHJlY29yZGluZyB0aGUgYXNzb2NpYXRpb24gYmV0d2VlbiBjZXJ0YWluXG5BQkNJIG1ldGFkYXRhIGFuZCB0aGUgYmxvY2tzIG9yIHRyYW5zYWN0aW9ucyB0aGV5J3JlIGF0dGFjaGVkIHRvLiBUaGUgQUJDSVxubWV0YWRhdGEgdHlwaWNhbGx5IGNhcnJ5IGFwcGxpY2F0aW9uLXNwZWNpZmljIGRldGFpbHMgbGlrZSBzZW5kZXIgYW5kIHJlY2lwaWVudFxuYWRkcmVzc2VzLCBjYXRnb3J5IHRhZ3MsIGFuZCBzbyBmb3J0aCwgdGhhdCBhcmUgbm90IHBhcnQgb2YgY29uc2Vuc3VzIGJ1dCBhcmVcbnVzZWQgYnkgVUkgdG9vbHMgdG8gZmluZCBhbmQgZGlzcGxheSB0cmFuc2FjdGlvbnMgb2YgaW50ZXJlc3QuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBjb25zZW5zdXMgbm9kZSByZWNvcmRzIHRoZSBibG9ja3MgYW5kIHRyYW5zYWN0aW9ucyBhcyBwYXJ0IG9mIGl0cyBibG9ja1xuc3RvcmUsIGJ1dCBkb2VzIG5vdCBwZXJzaXN0IHRoZSBhcHBsaWNhdGlvbiBtZXRhZGF0YS4gTWV0YWRhdGEgcGVyc2lzdGVuY2UgaXNcbnRoZSB0YXNrIG9mIHRoZSBpbmRleGVyLCB3aGljaCBjYW4gYmUgKG9wdGlvbmFsbHkpIGVuYWJsZWQgYnkgdGhlIG5vZGVcbm9wZXJhdG9yLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJoaXN0b3J5IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNoaXN0b3J5IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEhpc3RvcnkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vc3RhdGUvaW5kZXhlci9ibG9jay9rdiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJvcmlnaW5hbCBpbmRleGVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBidWlsdCBpbiB0byBUZW5kZXJtaW50IHN0b3JlZCBpbmRleCBkYXRhIGluIGFuXG5lbWJlZGRlZCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9wa2cuZ28uZGV2L2dpdGh1Yi5jb20vdGVuZGVybWludC90bS1kYiNEQiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG0tZGIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBkYXRhYmFzZSIpLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgd2l0aCBhIHByb3ByaWV0YXJ5IGtleSBsYXlvdXQuXG5JbiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA2NS1jdXN0b20tZXZlbnQtaW5kZXhpbmcubWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQURSIDA2NSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgd2Ugbm90ZWQgdGhhdCB0aGlzIGltcGxlbWVudGF0aW9uIGhhcyBib3RoIHBlcmZvcm1hbmNlXG5hbmQgc2NhbGluZyBwcm9ibGVtcyB1bmRlciBsb2FkLiAgTW9yZW92ZXIsIHRoZSBvbmx5IHByYWN0aWNhbCB3YXkgdG8gcXVlcnkgdGhlXG5pbmRleCBkYXRhIGlzIHZpYSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vcGtnLmdvLmRldi9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pbnRlcm5hbC9wdWJzdWIvcXVlcnkvc3ludGF4IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInF1ZXJ5IGZpbHRlciBsYW5ndWFnZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgdXNlZCBmb3IgZXZlbnRcbnN1YnNjcmlwdGlvbi4gICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy8xMTYxIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIklzc3VlICMxMTYxIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBhcHBlYXJzIHRvIGJlIGEgbW90aXZhdGlvbmFsIGNvbnRleHQgZm9yIHRoYXQgQURSLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVG8gbWl0aWdhdGUgYm90aCBvZiB0aGVzZSBjb25jZXJucywgd2UgaW50cm9kdWNlZCB0aGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vcGtnLmdvLmRldi9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pbnRlcm5hbC9zdGF0ZS9pbmRleGVyI0V2ZW50U2luayIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImNvZGUiLCBbX3ZtLl92KCJFdmVudFNpbmsiKV0pLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuaW50ZXJmYWNlLCBjb21iaW5pbmcgdGhlIG9yaWdpbmFsIHRyYW5zYWN0aW9uIGFuZCBibG9jayBpbmRleGVyIGludGVyZmFjZXNcbmFsb25nIHdpdGggc29tZSBzZXJ2aWNlIHBsdW1iaW5nLiAgVXNpbmcgdGhpcyBpbnRlcmZhY2UsIGEgZGV2ZWxvcGVyIGNhbiBwbHVnXG5pbiBhbiBpbmRleGVyIHRoYXQgdXNlcyBhIG1vcmUgZWZmaWNpZW50IHN0b3JhZ2UgZW5naW5lLCBhbmQgcHJvdmlkZXMgYSBtb3JlXG5leHByZXNzaXZlIHF1ZXJ5IGxhbmd1YWdlLiAgQXMgYSBwcm9vZi1vZi1jb25jZXB0LCB3ZSBidWlsdCBhICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L3RyZWUvbWFpbi9zdGF0ZS9pbmRleGVyL3NpbmsvcHNxbCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb3N0Z3JlU1FMIGV2ZW50XG5zaW5rIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB0aGF0IGV4cG9ydHMgZGF0YSB0byBhICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3Bvc3RncmVzcWwub3JnLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQb3N0Z3JlU1FMIGRhdGFiYXNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWx0aG91Z2ggdGhpcyBhcHByb2FjaCBhZGRyZXNzZWQgc29tZSBvZiB0aGUgaW1tZWRpYXRlIGNvbmNlcm5zLCB0aGVyZSBhcmVcbnNldmVyYWwgaXNzdWVzIGZvciBjdXN0b20gaW5kZXhpbmcgdGhhdCBoYXZlIG5vdCBiZWVuIGZ1bGx5IGFkZHJlc3NlZC4gSGVyZSB3ZVxud2lsbCBkaXNjdXNzIHRoZW0gaW4gbW9yZSBkZXRhaWwuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBmdXJ0aGVyIGNvbnRleHQsIGluY2x1ZGluZyBsaW5rcyB0byB1c2VyIHJlcG9ydHMgYW5kIHJlbGF0ZWQgd29yaywgc2VlIGFsc29cbnRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvNzEzNSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiUGx1Z2dhYmxlIGN1c3RvbSBldmVudCBpbmRleGluZyB0cmFja2luZyBpc3N1ZSIpLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgaXNzdWUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImlzc3VlLTEtdGlnaHQtY291cGxpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2lzc3VlLTEtdGlnaHQtY291cGxpbmciIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSXNzdWUgMTogVGlnaHQgQ291cGxpbmciKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkV2ZW50U2luayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbnRlcmZhY2Ugc3VwcG9ydHMgbXVsdGlwbGUgaW1wbGVtZW50YXRpb25zLCBidXQgcGx1Z2dpbmcgaW5cbmltcGxlbWVudGF0aW9ucyBzdGlsbCByZXF1aXJlcyB0aWdodCBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBub2RlLiBJbiBwYXJ0aWN1bGFyOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBbnkgY3VzdG9tIGluZGV4ZXIgbXVzdCBlaXRoZXIgYmUgd3JpdHRlbiBpbiBHbyBhbmQgY29tcGlsZWQgaW4gdG8gdGhlXG5UZW5kZXJtaW50IGJpbmFyeSwgb3IgdGhlIGRldmVsb3BlciBtdXN0IHdyaXRlIGEgR28gc2hpbSB0byBjb21tdW5pY2F0ZSB3aXRoXG50aGUgaW1wbGVtZW50YXRpb24gYW5kIGJ1aWxkIHRoYXQgaW50byB0aGUgVGVuZGVybWludCBiaW5hcnkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhpcyBtZWFucyB0byBzdXBwb3J0IGEgY3VzdG9tIGluZGV4ZXIsIGl0IGVpdGhlciBoYXMgdG8gYmUgaW50ZWdyYXRlZCBpbnRvXG50aGUgVGVuZGVybWludCBjb3JlIHJlcG9zaXRvcnksIG9yIGV2ZXJ5IGluc3RhbGxhdGlvbiB0aGF0IHVzZXMgdGhhdCBpbmRleGVyXG5tdXN0IGZldGNoIG9yIGJ1aWxkIGEgcGF0Y2hlZCB2ZXJzaW9uIG9mIFRlbmRlcm1pbnQuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwcm9ibGVtIHdpdGggaW50ZWdyYXRpbmcgaW5kZXhlcnMgaW50byBUZW5kZXJtaW50IENvcmUgaXMgdGhhdCBldmVyeSB1c2VyXG5vZiBUZW5kZXJtaW50IENvcmUgdGFrZXMgYSBkZXBlbmRlbmN5IG9uIGFsbCBzdXBwb3J0ZWQgaW5kZXhlcnMsIGluY2x1ZGluZ1xudGhvc2UgdGhleSBuZXZlciB1c2UuIEV2ZW4gaWYgdGhlIHVudXNlZCBjb2RlIGlzIGRpc2FibGVkIHdpdGggYnVpbGQgdGFncyxcbnVzZXJzIGhhdmUgdG8gcmVtZW1iZXIgdG8gZG8gdGhpcyBvciBwb3RlbnRpYWxseSBiZSBleHBvc2VkIHRvIHNlY3VyaXR5IGlzc3Vlc1xudGhhdCBtYXkgYXJpc2UgaW4gYW55IG9mIHRoZSBjdXN0b20gaW5kZXhlcnMuIFRoaXMgaXMgYSByaXNrIGZvciBUZW5kZXJtaW50LFxud2hpY2ggaXMgYSB0cnVzdC1jcml0aWNhbCBjb21wb25lbnQgb2YgYWxsIGFwcGxpY2F0aW9ucyBidWlsdCBvbiBpdC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBwcm9ibGVtIHdpdGggIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibm90IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGludGVncmF0aW5nIGluZGV4ZXJzIGludG8gVGVuZGVybWludCBDb3JlIGlzIHRoYXQgYW55XG5kZXZlbG9wZXIgd2hvIHdhbnRzIHRvIHVzZSBhIHBhcnRpY3VsYXIgaW5kZXhlciBtdXN0IG5vdyBmZXRjaCBvciBidWlsZCBhXG5wYXRjaGVkIHZlcnNpb24gb2YgdGhlIGNvcmUgY29kZSB0aGF0IGluY2x1ZGVzIHRoZSBjdXN0b20gaW5kZXhlci4gQmVzaWRlc1xuYmVpbmcgaW5jb252ZW5pZW50LCB0aGlzIG1ha2VzIGl0IGhhcmRlciBmb3IgdXNlcnMgdG8gdXBncmFkZSB0aGVpciBub2RlLCBzaW5jZVxudGhleSBuZWVkIHRvIGVpdGhlciByZS1hcHBseSB0aGVpciBwYXRjaGVzIGRpcmVjdGx5IG9yIHdhaXQgZm9yIGFuIGludGVybWVkaWFyeVxudG8gZG8gaXQgZm9yIHRoZW0uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkV2ZW4gZm9yIGRldmVsb3BlcnMgd2hvIGhhdmUgd3JpdHRlbiB0aGVpciBhcHBsaWNhdGlvbnMgaW4gR28gYW5kIGxpbmsgd2l0aCB0aGVcbmNvbnNlbnN1cyBub2RlIGRpcmVjdGx5IChlLmcuLCB1c2luZyB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkayIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDb3Ntb3MgU0RLIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiKSwgdGhlc2UgaXNzdWVzIGFkZCBhXG5wb3RlbnRpYWxseSBzaWduaWZpY2FudCBjb21wbGljYXRpb24gdG8gdGhlIGJ1aWxkIHByb2Nlc3MuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImlzc3VlLTItbGVnYWN5LWNvbXBhdGliaWxpdHkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2lzc3VlLTItbGVnYWN5LWNvbXBhdGliaWxpdHkiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSXNzdWUgMjogTGVnYWN5IENvbXBhdGliaWxpdHkiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkV2ZW50U2luayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbnRlcmZhY2UgcmV0YWlucyBzZXZlcmFsIGxpbWl0YXRpb25zIG9mIHRoZSBvcmlnaW5hbFxucHJvcHJpZXRhcnkgaW5kZXhlci4gVGhlc2UgaW5jbHVkZToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIGluZGV4ZXIgaGFzIG5vIGNvbnRyb2wgb3ZlciB3aGljaCBldmVudCBpdGVtcyBhcmUgcmVwb3J0ZWQuIE9ubHkgdGhlXG5leGFjdCBibG9jayBhbmQgdHJhbnNhY3Rpb24gZXZlbnRzIHRoYXQgd2VyZSByZXBvcnRlZCB0byB0aGUgb3JpZ2luYWwgaW5kZXhlclxuYXJlIHJlcG9ydGVkIHRvIGEgY3VzdG9tIGluZGV4ZXIuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIGludGVyZmFjZSByZXF1aXJlcyB0aGUgaW1wbGVtZW50YXRpb24gdG8gZGVmaW5lIG1ldGhvZHMgZm9yIHRoZSBsZWdhY3lcbnNlYXJjaCBhbmQgcXVlcnkgQVBJLiBUaGlzIHJlcXVpcmVtZW50IGNvbWVzIGZyb20gdGhlIGludGVnYXRpb24gd2l0aCB0aGVcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3MudGVuZGVybWludC5jb20vdjAuMzQvcnBjLyMvV2Vic29ja2V0L3N1YnNjcmliZSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImV2ZW50IHN1YnNjcmlwdGlvbiBSUEMgQVBJIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIiwgYnV0IGFjdHVhbGx5IHN1cHBvcnRpbmcgdGhlc2Vcbm1ldGhvZHMgaXMgbm90IHRyaXZpYWwuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXQgcHJlc2VudCwgb25seSB0aGUgb3JpZ2luYWwgS1YgaW5kZXhlciBpbXBsZW1lbnRzIHRoZSBxdWVyeSBtZXRob2RzLiBFdmVuIHRoZVxucHJvb2Ytb2YtY29uY2VwdCBQb3N0Z3JlU1FMIGltcGxlbWVudGF0aW9uIHNpbXBseSByZXBvcnRzIGVycm9ycyBmb3IgYWxsIGNhbGxzXG50byB0aGVzZSBtZXRob2RzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdFdmVuIGZvciBhIHBsdWdpbiB3cml0dGVuIGluIEdvLCBpbXBsZW1lbnRpbmcgdGhlc2UgbWV0aG9kcyAiY29ycmVjdGx5IiB3b3VsZFxucmVxdWlyZSBwYXJzaW5nIGFuZCB0cmFuc2xhdGluZyB0aGUgY3VzdG9tIHF1ZXJ5IGxhbmd1YWdlIG92ZXIgd2hhdGV2ZXIgc3RvcmFnZVxucGxhdGZvcm0gdGhlIGluZGV4ZXIgdXNlcy4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkZvciBhIHBsdWdpbiAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJub3QiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd3JpdHRlbiBpbiBHbywgZXZlbiBiZXlvbmQgdGhlIGNvc3Qgb2YgaW50ZWdyYXRpb24gdGhlXG5kZXZlbG9wZXIgd291bGQgaGF2ZSB0byByZS1pbXBsZW1lbnQgdGhlIGVudGlyZSBxdWVyeSBsYW5ndWFnZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaXNzdWUtMy1pbmRleGluZy1kZWxheXMtY29uc2Vuc3VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpc3N1ZS0zLWluZGV4aW5nLWRlbGF5cy1jb25zZW5zdXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSXNzdWUgMzogSW5kZXhpbmcgRGVsYXlzIENvbnNlbnN1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaXRoaW4gdGhlIG5vZGUsIGluZGV4aW5nIGhvb2tzIGluIHRvIHRoZSBzYW1lIGludGVybmFsIHB1YnN1YiBkaXNwYXRjaGVyIHRoYXRcbmlzIHVzZWQgdG8gZXhwb3J0IGV2ZW50IGl0ZW1zIHRvIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2NzLnRlbmRlcm1pbnQuY29tL3YwLjM0L3JwYy8jL1dlYnNvY2tldC9zdWJzY3JpYmUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiZXZlbnQgc3Vic2NyaXB0aW9uIFJQQyBBUEkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcuXG5JbiBjb250cmFzdCB3aXRoIFJQQyBzdWJzY3JpYmVycywgaG93ZXZlciwgaW5kZXhpbmcgaXMgYSAicHJpdmlsZWdlZCJcbnN1YnNjcmliZXI6IElmIGFuIFJQQyBzdWJzY3JpYmVyIGlzICJ0b28gc2xvdyIsIHRoZSBub2RlIG1heSB0ZXJtaW5hdGUgdGhlXG5zdWJzY3JpcHRpb24gYW5kIGRpc2Nvbm5lY3QgdGhlIGNsaWVudC4gVGhhdCBtZWFucyB0aGF0IFJQQyBzdWJzY3JpYmVycyBtYXlcbmxvc2UgKG1pc3MpIGV2ZW50IGl0ZW1zLiAgVGhlIGluZGV4ZXIsIGhvd2V2ZXIsIGlzICJ1bmJ1ZmZlcmVkIiwgYW5kIHRoZVxucHVibGlzaGVyIHdpbGwgbmV2ZXIgZHJvcCBvciBkaXNjb25uZWN0IGZyb20gaXQuIElmIHRoZSBpbmRleGVyIGlzIHNsb3csIHRoZVxucHVibGlzaGVyIHdpbGwgYmxvY2sgdW50aWwgaXQgcmV0dXJucywgdG8gZW5zdXJlIHRoYXQgbm8gZXZlbnQgaXRlbXMgYXJlIGxvc3QuJwogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHByYWN0aWNlLCB0aGlzIG1lYW5zIHRoYXQgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBpbmRleGVyIGhhcyBhIGRpcmVjdCBlZmZlY3Rcbm9uIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY29uc2Vuc3VzIG5vZGU6IElmIHRoZSBpbmRleGVyIGlzIHNsb3cgb3Igc3RhbGxzLCBpdFxud2lsbCBzbG93IG9yIGhhbHQgdGhlIHByb2dyZXNzIG9mIGNvbnNlbnN1cy4gVXNlcnMgaGF2ZSBhbHJlYWR5IHJlcG9ydGVkIHRoaXNcbnByb2JsZW0gZXZlbiB3aXRoIHRoZSBidWlsdC1pbiBpbmRleGVyIChzZWUsIGZvciBleGFtcGxlLCAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvNzI0NyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjNzI0NyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikuXG5FeHRlbmRpbmcgdGhpcyBjb25jZXJuIHRvIGFyYml0cmFyeSB1c2VyLWRlZmluZWQgY3VzdG9tIGluZGV4ZXJzIGdpdmVzIHRoYXRcbnJpc2sgYSBtdWNoIGxhcmdlciBzdXJmYWNlIGFyZWEuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2N1c3Npb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Rpc2N1c3Npb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpc2N1c3Npb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgbm90IHBvc3NpYmxlIHRvIHNpbXVsdGFuZW91c2x5IGd1YXJhbnRlZSB0aGF0IHB1Ymxpc2hpbmcgZXZlbnQgaXRlbXMgd2lsbFxubm90IGRlbGF5IGNvbnNlbnN1cywgYW5kIGFsc28gdGhhdCBhbGwgZXZlbnQgaXRlbXMgb2YgaW50ZXJlc3QgYXJlIGFsd2F5c1xuY29tcGxldGVseSBpbmRleGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZWZvcmUsIG91ciBjaG9pY2UgaXMgYmV0d2VlbiBlbGltaW5hdGluZyBkZWxheSAoYW5kIG1pbmltaXppbmcgbG9zcykgb3JcbmVsaW1pbmF0aW5nIGxvc3MgKGFuZCBtaW5pbWl6aW5nIGRlbGF5KS4gIEN1cnJlbnRseSwgd2UgdGFrZSB0aGUgc2Vjb25kXG5hcHByb2FjaCwgd2hpY2ggaGFzIGxlZCB0byB1c2VyIGNvbXBsYWludHMgYWJvdXQgY29uc2Vuc3VzIGRlbGF5cyBkdWUgdG9cbmluZGV4aW5nIGFuZCBzdWJzY3JpcHRpb24gb3ZlcmhlYWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIklmIHdlIGFncmVlIHRoYXQgY29uc2Vuc3VzIHBlcmZvcm1hbmNlIHN1cGVyc2VkZXMgaW5kZXggY29tcGxldGVuZXNzLCBvdXJcbmRlc2lnbiBjaG9pY2VzIGFyZSB0byBjb25zdHJhaW4gdGhlIGxpa2VsaWhvb2QgYW5kIGZyZXF1ZW5jeSBvZiBtaXNzaW5nIGV2ZW50XG5pdGVtcy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJZiB3ZSBkZWNpZGUgdGhhdCBjb25zZW5zdXMgcGVyZm9ybWFuY2UgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBpbmRleFxuY29tcGxldGVuZXNzLCBvdXIgb3B0aW9uIGlzIHRvIG1pbmltaXplIG92ZXJoZWFkIG9uIHRoZSBldmVudCBkZWxpdmVyeSBwYXRoXG5hbmQgZG9jdW1lbnQgdGhhdCBpbmRleGVyIHBsdWdpbnMgY29uc3RyYWluIHRoZSByYXRlIG9mIGNvbnNlbnN1cy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2luY2Ugd2UgaGF2ZSB1c2VyIHJlcG9ydHMgcmVxdWVzdGluZyBib3RoIHByb3BlcnRpZXMsIHdlIGhhdmUgdG8gY2hvb3NlIG9uZSBvclxudGhlIG90aGVyLiAgU2luY2UgdGhlIHByaW1hcnkgam9iIG9mIHRoZSBjb25zZW5zdXMgZW5naW5lIGlzIHRvIGNvcnJlY3RseSxcbnJvYnVzdGx5LCByZWxpYWJsbHksIGFuZCBlZmZpY2llbnRseSByZXBsaWNhdGUgYXBwbGljYXRpb24gc3RhdGUgYWNyb3NzIHRoZVxubmV0d29yaywgSSBiZWxpZXZlIHRoZSBjb3JyZWN0IGNob2ljZSBpcyB0byBmYXZvciBjb25zZW5zdXMgcGVyZm9ybWFuY2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFuIGltcG9ydGFudCBjb25zaWRlcmF0aW9uIGZvciB0aGlzIGRlY2lzaW9uIGlzIHRoYXQgYSBub2RlIGRvZXMgbm90IGluZGV4XG5hcHBsaWNhdGlvbiBtZXRhZGF0YSBzZXBhcmF0ZWx5OiBJZiBpbmRleGluZyBpcyBkaXNhYmxlZCwgdGhlcmUgaXMgbm8gYnVpbHQtaW5cbm1lY2hhbmlzbSB0byBnbyBiYWNrIGFuZCByZXBsYXkgb3IgcmVjb25zdHJ1Y3QgdGhlIGRhdGEgdGhhdCBhbiBpbmRleGVyIHdvdWxkXG5oYXZlIHN0b3JlZC4gVGhlIG5vZGUgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG9lcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBzdG9yZSB0aGUgYmxvY2tjaGFpbiBpdHNlbGYgKGkuZS4sIHRoZSBibG9ja3MgYW5kXG50aGVpciB0cmFuc2FjdGlvbnMpLCBzbyBwb3RlbnRpYWxseSBzb21lIHVzZSBjYXNlcyBjdXJyZW50bHkgaGFuZGxlZCBieSB0aGVcbmluZGV4ZXIgY291bGQgYmUgaGFuZGxlZCBieSB0aGUgbm9kZS4gRm9yIGV4YW1wbGUsIGFsbG93aW5nIGNsaWVudHMgdG8gYXNrXG53aGV0aGVyIGEgZ2l2ZW4gdHJhbnNhY3Rpb24gSUQgaGFzIGJlZW4gY29tbWl0dGVkIHRvIGEgYmxvY2sgY291bGQgaW4gcHJpbmNpcGxlXG5iZSBkb25lIHdpdGhvdXQgYW4gaW5kZXhlciwgc2luY2UgaXQgZG9lcyBub3QgZGVwZW5kIG9uIGFwcGxpY2F0aW9uIG1ldGFkYXRhLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbmV2aXRhYmx5LCBhIHF1ZXN0aW9uIHdpbGwgYXJpc2Ugd2hldGhlciB3ZSBjb3VsZCBpbXBsZW1lbnQgYm90aCBzdHJhdGVnaWVzXG5hbmQgdG9nZ2xlIGJldHdlZW4gdGhlbSB3aXRoIGEgZmxhZy4gVGhhdCB3b3VsZCBiZSBhIHdvcnN0LWNhc2Ugc2NlbmFyaW8sXG5yZXF1aXJpbmcgdXMgdG8gbWFpbnRhaW4gdGhlIGNvbXBsZXhpdHkgb2YgdHdvIHZlcnktZGlmZmVyZW50IG9wZXJhdGlvbmFsXG5jb25jZXJucy4gIElmIG91ciBnb2FsIGlzIHRoYXQgVGVuZGVybWludCBzaG91bGQgYmUgYXMgc2ltcGxlLCBlZmZpY2llbnQsIGFuZFxudHJ1c3R3b3J0aHkgYXMgcG9zaWJsZSwgdGhlcmUgaXMgbm90IGEgc3Ryb25nIGNhc2UgZm9yIG1ha2luZyB0aGVzZSBvcHRpb25zXG5jb25maWd1cmFibGU6IFdlIHNob3VsZCBwaWNrIGEgc2lkZSBhbmQgY29tbWl0IHRvIGl0LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkZXNpZ24tcHJpbmNpcGxlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGVzaWduLXByaW5jaXBsZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGVzaWduIFByaW5jaXBsZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnQWx0aG91Z2ggdGhlcmUgaXMgbm8gdW5pcXVlICJiZXN0IiBzb2x1dGlvbiB0byB0aGUgaXNzdWVzIGRlc2NyaWJlZCBhYm92ZSxcbnRoZXJlIGFyZSBzb21lIHNwZWNpZmljIHByaW5jaXBsZXMgdGhhdCBhIHNvbHV0aW9uIHNob3VsZCBpbmNsdWRlOicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQSBjdXN0b20gaW5kZXhlciBzaG91bGQgbm90IHJlcXVpcmUgaW50ZWdyYXRpb24gaW50byBUZW5kZXJtaW50IGNvcmUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBXG5kZXZlbG9wZXIgb3Igbm9kZSBvcGVyYXRvciBjYW4gY3JlYXRlLCBidWlsZCwgZGVwbG95LCBhbmQgdXNlIGEgY3VzdG9tXG5pbmRleGVyIHdpdGggYSBzdG9jayBidWlsZCBvZiB0aGUgVGVuZGVybWludCBjb25zZW5zdXMgbm9kZS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkN1c3RvbSBpbmRleGVycyBjYW5ub3Qgc3RhbGwgY29uc2Vuc3VzLiIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFuIGluZGV4ZXIgdGhhdCBpcyBzbG93IG9yXG5zdGFsbHMgY2Fubm90IHNsb3cgZG93biBvciBwcmV2ZW50IGNvcmUgY29uc2Vuc3VzIGZyb20gbWFraW5nIHByb2dyZXNzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICdUaGUgcGx1Z2luIGludGVyZmFjZSBtdXN0IGdpdmUgbm9kZSBvcGVyYXRvcnMgY29udHJvbCBvdmVyIHRoZSB0b2xlcmFuY2VzXG5mb3IgYWNjZXB0YWJsZSBpbmRleGVyIHBlcmZvcm1hbmNlLCBhbmQgdGhlIG1lYW5zIHRvIGRldGVjdCB3aGVuIGluZGV4ZXJzXG5hcmUgZmFsbGluZyBvdXRzaWRlIHRob3NlIHRvbGVyYW5jZXMsIGJ1dCBpbmRleGVyIGZhaWx1cmVzIHNob3VsZCAiZmFpbFxuc2FmZSIgd2l0aCByZXNwZWN0IHRvIGNvbnNlbnN1cyAoZXZlbiBpZiB0aGF0IG1lYW5zIHRoZSBpbmRleGVyIG1heSBtaXNzXG5zb21lIGRhdGEsIGluIHN1ZmZpY2llbnRseS1leHRyZW1lIGNpcmN1bXN0YW5jZXMpLicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQ3VzdG9tIGluZGV4ZXJzIGNvbnRyb2wgd2hpY2ggZXZlbnQgaXRlbXMgdGhleSBpbmRleC4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEEgY3VzdG9tIGluZGV4ZXJcbmlzIG5vdCBsaW1pdGVkIHRvIG9ubHkgdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24gYW5kIGJsb2NrIGV2ZW50cywgYnV0IGNhblxub2JzZXJ2ZSBhbnkgZXZlbnQgaXRlbSBwdWJsaXNoZWQgYnkgdGhlIG5vZGUuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDdXN0b20gaW5kZXhpbmcgaXMgZm9yd2FyZC1jb21wYXRpYmxlLiIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFkZGluZyBuZXcgZXZlbnQgaXRlbSB0eXBlcyBvclxubWV0YWRhdGEgdG8gdGhlIGNvbnNlbnN1cyBub2RlIHNob3VsZCBub3QgcmVxdWlyZSBleGlzdGluZyBjdXN0b20gaW5kZXhlcnNcbnRvIGJlIHJlYnVpbHQgb3IgbW9kaWZpZWQsIHVubGVzcyB0aGV5IHdhbnQgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIG5ld1xuZGF0YS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkluZGV4ZXJzIGFyZSByZXNwb25zaWJsZSBmb3IgYW5zd2VyaW5nIHF1ZXJpZXMuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbiBpbmRleGVyIHBsdWdpbiBpcyBub3RcbnJlcXVpcmVkIHRvIHN1cHBvcnQgdGhlIGxlZ2FjeSBxdWVyeSBmaWx0ZXIgbGFuZ3VhZ2UsIG5vciB0byBiZSBjb21wYXRpYmxlXG53aXRoIHRoZSBsZWdhY3kgUlBDIGVuZHBvaW50cyBmb3IgYWNjZXNzaW5nIHRoZW0uICBBbnkgQVBJcyBmb3IgY2xpZW50cyB0b1xucXVlcnkgYSBjdXN0b20gaW5kZXggYXJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgaW5kZXhlciwgbm90IHRoZSBub2RlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvcGVuLXF1ZXN0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjb3Blbi1xdWVzdGlvbnMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE9wZW4gUXVlc3Rpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkdpdmVuIHRoZSBjb25zdHJhaW50cyBvdXRsaW5lZCBhYm92ZSwgdGhlcmUgYXJlIGltcG9ydGFudCBkZXNpZ24gcXVlc3Rpb25zIHdlXG5tdXN0IGFuc3dlciB0byBndWlkZSBhbnkgc3BlY2lmaWMgY2hhbmdlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldoYXQgaXMgYW4gYWNjZXB0YWJsZSBwcm9iYWJpbGl0eSB0aGF0LCBnaXZlbiBzdWZmaWNpZW50bHkgZXh0cmVtZVxub3BlcmF0aW9uYWwgaXNzdWVzLCBhbiBpbmRleGVyIG1pZ2h0IG1pc3Mgc29tZSBudW1iZXIgb2YgZXZlbnRzPyIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGVyZSBhcmUgdHdvIHBhcnRzIHRvIHRoaXMgcXVlc3Rpb246IE9uZSBpcyB3aGF0IGNvbnN0aXR1dGVzIGFuIGV4dHJlbWVcbm9wZXJhdGlvbmFsIHByb2JsZW0sIHRoZSBvdGhlciBpcyBob3cgbGlrZWx5IHdlIGFyZSB0byBtaXNzIHNvbWUgbnVtYmVyIG9mXG5ldmVudHMgaXRlbXMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiSWYgdGhlIGNvbnNlbnN1cyBpcyB0aGF0IG5vIGV2ZW50IGl0ZW0gbXVzdCBldmVyIGJlIG1pc3NlZCwgbm8gbWF0dGVyIGhvd1xuYmFkIHRoZSBvcGVyYXRpb25hbCBjaXJjdW1zdGFuY2VzLCB0aGVuIHdlICIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJtdXN0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBhY2NlcHQgdGhhdCBpbmRleGluZyBjYW5cbnNsb3cgb3IgaGFsdCBjb25zZW5zdXMgYXJiaXRyYXJpbHkuIEl0IGlzIGltcG9zc2libGUgdG8gZ3VhcmFudGVlIGNvbXBsZXRlXG5pbmRleCBjb3ZlcmFnZSB3aXRob3V0IHBvdGVudGlhbGx5IHVuYm91bmRlZCBkZWxheXMuIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJPdGhlcndpc2UsIGhvdyBtdWNoIGRhdGEgY2FuIHdlIGFmZm9yZCB0byBsb3NlIGFuZCBob3cgb2Z0ZW4/IEZvciBleGFtcGxlLFxuaWYgd2UgY2FuIGVuc3VyZSBubyBldmVudCBpdGVtIHdpbGwgYmUgbG9zdCB1bmxlc3MgdGhlIGluZGV4ZXIgaGFsdHMgZm9yXG5hdCBsZWFzdCBmaXZlIG1pbnV0ZXMsIGlzIHRoYXQgYWNjZXB0YWJsZT8gV2hhdCBwcm9iYWJpbGl0aWVzIGFuZCB0aW1lXG5yYW5nZXMgYXJlIHJlYXNvbmFibGUgZm9yIHJlYWwgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHM/IgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiV2hhdCBsZXZlbCBvZiBvcGVyYXRpb25hbCBvdmVyaGVhZCBpcyBhY2NlcHRhYmxlIHRvIGltcG9zZSBvbiBub2RlXG5vcGVyYXRvcnMgdG8gc3VwcG9ydCBpbmRleGluZz8iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQXJlIG5vZGUgb3BlcmF0b3JzIHdpbGxpbmcgdG8gY29uZmlndXJlIGFuZCBydW4gY3VzdG9tIGluZGV4ZXJzIGFzIHNpZGVjYXJcbnR5cGUgcHJvY2Vzc2VzIGFsb25nc2lkZSBhIG5vZGU/IEhvdyBtdWNoIGluZGV4ZXIgc2V0dXAgYWJvdmUgYW5kIGJleW9uZCB0aGVcbndvcmsgb2Ygc2V0dGluZyB1cCB0aGUgdW5kZXJseWluZyBub2RlIGluIGlzb2xhdGlvbiBpcyB0cmFjdGFibGUgaW5cbnByb2R1Y3Rpb24gbmV0d29ya3M/IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJ1RoZSBhbnN3ZXIgdG8gdGhpcyBxdWVzdGlvbiBhbHNvIGluZm9ybXMgdGhlIHF1ZXN0aW9uIG9mIHdoZXRoZXIgd2Ugc2hvdWxkXG5rZWVwIGFuICJpbi1wcm9jZXNzIiBpbmRleGluZyBvcHRpb24sIGFuZCB0byB3aGF0IGV4dGVudCB0aGF0IG9wdGlvbiBuZWVkc1xudG8gc2F0aXNmeSB0aGUgc3VnZ2VzdGVkIGRlc2lnbiBwcmluY2lwbGVzLicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJSZWxhdGVkbHksIHRvIHdoYXQgZXh0ZW50IGRvIHdlIG5lZWQgdG8gYmUgY29uY2VybmVkIGFib3V0IHRoZSBjb3N0IG9mXG5lbmNvZGluZyBhbmQgc2VuZGluZyBldmVudCBpdGVtcyB0byBhbiBleHRlcm5hbCBwcm9jZXNzIChlLmcuLCBhcyBKU09OIGJsb2JzXG5vciBwcm90b2J1ZiB3aXJlIG1lc3NhZ2VzKT8gR2l2ZW4gdGhhdCB0aGUgbm9kZSBhbHJlYWR5IGVuY29kZXMgZXZlbnQgaXRlbXNcbmFzIEpTT04gZm9yIHN1YnNjcmlwdGlvbiBwdXJwb3NlcywgdGhlIG92ZXJoZWFkIHdvdWxkIGJlIG5lZ2xpZ2libGUgZm9yIHRoZVxubm9kZSBpdHNlbGYsIGJ1dCB0aGUgaW5kZXhlciB3b3VsZCBoYXZlIHRvIGRlY29kZSB0byBwcm9jZXNzIHRoZSByZXN1bHRzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJXaGF0IChpZiBhbnkpIHF1ZXJ5IEFQSXMgZG9lcyB0aGUgY29uc2Vuc3VzIG5vZGUgbmVlZCB0byBleHBvcnQsXG5pbmRlcGVuZGVudCBvZiB0aGUgaW5kZXhlciBpbXBsZW1lbnRhdGlvbj8iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnT25lIHR5cGljYWwgZXhhbXBsZSBpcyB3aGV0aGVyIHRoZSBub2RlIHNob3VsZCBiZSBhYmxlIHRvIGFuc3dlciBxdWVyaWVzXG5saWtlICJpcyB0aGlzIHRyYW5zYWN0aW9uIElEIGluIGEgYmxvY2s/IiBDdXJyZW50bHksIGEgbm9kZSBjYW5ub3QgYW5zd2VyXG50aGlzIHF1ZXJ5ICcKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigidW5sZXNzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgaXQgcnVucyB0aGUgYnVpbHQtaW4gS1YgaW5kZXhlci4gRG9lcyB0aGUgbm9kZSBuZWVkIHRvXG5jb250aW51ZSB0byBzdXBwb3J0IHRoYXQgcXVlcnkgZXZlbiBmb3Igbm9kZXMgdGhhdCBkaXNhYmxlIHRoZSBLViBpbmRleGVyLFxub3Igd2hpY2ggdXNlIGEgY3VzdG9tIGluZGV4ZXI/IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImluZm9ybWFsLWRlc2lnbi1pbnRlbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luZm9ybWFsLWRlc2lnbi1pbnRlbnQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSW5mb3JtYWwgRGVzaWduIEludGVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZGVzaWduIHByaW5jaXBsZXMgZGVzY3JpYmVkIGFib3ZlIGltcGxpY2F0ZSBzZXZlcmFsIGNvbXBvbmVudHMgb2YgdGhlXG5UZW5kZXJtaW50IG5vZGUsIGJleW9uZCBqdXN0IHRoZSBpbmRleGVyLiBJbiB0aGUgY29udGV4dCBvZiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA3NS1ycGMtc3Vic2NyaXB0aW9uLm1kIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkFEUiAwNzUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsXG53ZSBhcmUgcmUtd29ya2luZyB0aGUgUlBDIGV2ZW50IHN1YnNjcmlwdGlvbiBBUEkgdG8gaW1wcm92ZSBzb21lIG9mIHRoZSBVWFxuaXNzdWVzIGRpc2N1c3NlZCBhYm92ZSBmb3IgUlBDIGNsaWVudHMuIEl0IGlzIG91ciBleHBlY3RhdGlvbiB0aGF0IGEgc29sdXRpb25cbmZvciBwbHVnZ2FibGUgY3VzdG9tIGluZGV4aW5nIHdpbGwgdGFrZSBhZHZhbnRhZ2Ugb2Ygc29tZSBvZiB0aGUgc2FtZSB3b3JrLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbiB0aGF0IGJhc2lzLCB0aGUgZGVzaWduIGFwcHJvYWNoIEkgYW0gY29uc2lkZXJpbmcgZm9yIGN1c3RvbSBpbmRleGluZyBsb29rc1xuc29tZXRoaW5nIGxpa2UgdGhpcyAoc3ViamVjdCB0byByZWZpbmVtZW50KToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQSBjdXN0b20gaW5kZXhlciBydW5zIGFzIGEgc2VwYXJhdGUgcHJvY2VzcyBmcm9tIHRoZSBub2RlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBpbmRleGVyIHN1YnNjcmliZXMgdG8gZXZlbnQgaXRlbXMgdmlhIHRoZSBBRFIgMDc1IGV2ZW50cyBBUEkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoaXMgbWVhbnMgaW5kZXhlcnMgd291bGQgcmVjZWl2ZSBldmVudCBwYXlsb2FkcyBhcyBKU09OIHJhdGhlciB0aGFuXG5wcm90b2J1ZiwgYnV0IHNpbmNlIHdlIGFscmVhZHkgaGF2ZSB0byBzdXBwb3J0IEpTT04gZW5jb2RpbmcgZm9yIHRoZSBSUENcbmludGVyZmFjZSBhbnl3YXksIHRoYXQgc2hvdWxkIG5vdCBpbmNyZWFzZSBjb21wbGV4aXR5IGZvciB0aGUgbm9kZS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgZXhpc3RpbmcgUG9zdGdyZVNRTCBpbmRleGVyIGdldHMgcmV3b3JrZWQgdG8gaGF2ZSB0aGlzIGZvcm0sIGFuZCBub1xubG9uZ2VyIGJ1aWx0IGFzIHBhcnQgb2YgdGhlIFRlbmRlcm1pbnQgY29yZSBiaW5hcnkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIldlIGNhbiByZXRhaW4gdGhlIGNvZGUgaW4gdGhlIGNvcmUgcmVwb3NpdG9yeSBhcyBhIHByb29mLW9mLWNvbmNlcHQsIG9yXG5wZXJoYXBzIGNyZWF0ZSBhIHNlcGFyYXRlIHJlcG9zaXRvcnkgd2l0aCBjb250cmlidXRlZCBpbmRleGVycyBhbmQgbW92ZSBpdFxudGhlcmUuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiKFBvc3NpYmx5KSBEZXByZWNhdGUgYW5kIHJlbW92ZSB0aGUgbGVnYWN5IEtWIGluZGV4ZXIsIG9yIGRpc2FibGUgaXQgYnlcbmRlZmF1bHQuICBJZiB3ZSBkZWNpZGUgdG8gcmVtb3ZlIGl0LCB3ZSBjYW4gYWxzbyByZW1vdmUgdGhlIGxlZ2FjeSBSUENcbmVuZHBvaW50cyBmb3IgcXVlcnlpbmcgdGhlIEtWIGluZGV4ZXIuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIklmIHdlIHBsYW4gdG8gZG8gdGhpcywgd2Ugc2hvdWxkIGFsc28gaW52ZXN0aWdhdGUgcHJvdmlkaW5nIGEgd2F5IGZvclxuY2xpZW50cyB0byBxdWVyeSB3aGV0aGVyIGEgZ2l2ZW4gdHJhbnNhY3Rpb24gSUQgaGFzIGxhbmRlZCBpbiBhIGJsb2NrLiAgVGhhdFxuc2VydmVzIGEgY29tbW9uIG5lZWQsIGFuZCBjdXJyZW50bHkgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJvbmx5IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgd29ya3MgaWYgdGhlIEtWIGluZGV4ZXIgaXNcbmVuYWJsZWQsIGJ1dCBjb3VsZCBiZSBhZGRyZXNzZWQgbW9yZSBzaW1wbHkgdXNpbmcgdGhlIG90aGVyIGRhdGEgYSBub2RlXG5hbHJlYWR5IGhhcyBzdG9yZWQsIHdpdGhvdXQgaGF2aW5nIHRvIGFuc3dlciBtb3JlIGdlbmVyYWwgcXVlcmllcy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVmZXJlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVmZXJlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9kb2NzL2FyY2hpdGVjdHVyZS9hZHItMDY1LWN1c3RvbS1ldmVudC1pbmRleGluZy5tZCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQURSIDA2NTogQ3VzdG9tIEV2ZW50IEluZGV4aW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA3NS1ycGMtc3Vic2NyaXB0aW9uLm1kIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBRFIgMDc1OiBSUEMgRXZlbnQgU3Vic2NyaXB0aW9uIEludGVyZmFjZSIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNvc21vcyBTREsiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3MudGVuZGVybWludC5jb20vdjAuMzQvcnBjLyMvV2Vic29ja2V0L3N1YnNjcmliZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiRXZlbnQgc3Vic2NyaXB0aW9uIFJQQyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL3N0YXRlL2luZGV4ZXIvYmxvY2sva3YiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIktWIHRyYW5zYWN0aW9uIGluZGV4ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy83MTM1IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJQbHVnZ2FibGUgY3VzdG9tIGV2ZW50IGluZGV4aW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAoIzcxMzUpIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC90cmVlL21haW4vc3RhdGUvaW5kZXhlci9zaW5rL3BzcWwiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlBvc3RncmVTUUwgZXZlbnQgc2luayIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9wb3N0Z3Jlc3FsLm9yZy8iLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiUG9zdGdyZVNRTCBkYXRhYmFzZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9wa2cuZ28uZGV2L2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2ludGVybmFsL3B1YnN1Yi9xdWVyeS9zeW50YXgiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlF1ZXJ5IGZpbHRlciBsYW5ndWFnZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzExNjEiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIlN0cmVhbSBldmVudHMgdG8gcG9zdGdyZXMgZm9yIGluZGV4aW5nIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKCMxMTYxKSIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzcyNDciLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIlVuYnVmZmVyZWQgZXZlbnQgc3Vic2NyaXB0aW9uIHNsb3cgZG93biB0aGUgY29uc2Vuc3VzIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKCM3MjQ3KSIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vcGtnLmdvLmRldi9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pbnRlcm5hbC9zdGF0ZS9pbmRleGVyI0V2ZW50U2luayIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRXZlbnRTaW5rIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpbnRlcmZhY2UiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9wa2cuZ28uZGV2L2dpdGh1Yi5jb20vdGVuZGVybWludC90bS1kYiNEQiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG0tZGIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGxpYnJhcnkiKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}