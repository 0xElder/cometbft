{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-007-deterministic-proto-bytes.md?vue&type=template&id=3cce43e4&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-007-deterministic-proto-bytes.md","mtime":1673295761289},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJyZmMtMDA3LWRldGVybWluaXN0aWMtcHJvdG8tYnl0ZS1zZXJpYWxpemF0aW9uIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjcmZjLTAwNy1kZXRlcm1pbmlzdGljLXByb3RvLWJ5dGUtc2VyaWFsaXphdGlvbiIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFJGQyAwMDcgOiBEZXRlcm1pbmlzdGljIFByb3RvIEJ5dGUgU2VyaWFsaXphdGlvbiIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjA5LURlYy0yMDIxOiBJbml0aWFsIGRyYWZ0IChAd2lsbGlhbWJhbmZpZWxkKS4iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhYnN0cmFjdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYWJzdHJhY3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFic3RyYWN0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgZG9jdW1lbnQgZGlzY3Vzc2VzIHRoZSBpc3N1ZSBvZiBzdGFibGUgYnl0ZS1yZXByZXNlbnRhdGlvbiBvZiBzZXJpYWxpemVkIG1lc3NhZ2VzXG53aXRoaW4gVGVuZGVybWludCBhbmQgZGVzY3JpYmVzIGEgZmV3IHBvc3NpYmxlIHJvdXRlcyB0aGF0IGNvdWxkIGJlIHRha2VuIHRvIGFkZHJlc3MgaXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImJhY2tncm91bmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2JhY2tncm91bmQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJhY2tncm91bmQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgdXNlIHRoZSBieXRlIHJlcHJlc2VudGF0aW9ucyBvZiB3aXJlLWZvcm1hdCBwcm90byBtZXNzYWdlcyB0byBwcm9kdWNlXG5hbmQgdmVyaWZ5IGhhc2hlcyBvZiBkYXRhIHdpdGhpbiB0aGUgVGVuZGVybWludCBjb2RlYmFzZSBhcyB3ZWxsIGFzIGZvclxucHJvZHVjaW5nIGFuZCB2ZXJpZnlpbmcgY3J5cHRvZ3JhcGhpYyBzaWduYXR1cmVzIG92ZXIgdGhlc2Ugc2lnbmVkIGJ5dGVzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHByb3RvY29sIGJ1ZmZlciAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL2VuY29kaW5nIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImVuY29kaW5nIHNwZWMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZG9lcyBub3QgZ3VhcmFudGVlIHRoYXQgdGhlIGJ5dGUgcmVwcmVzZW50YXRpb25cbm9mIGEgcHJvdG9jb2wgYnVmZmVyIG1lc3NhZ2Ugd2lsbCBiZSB0aGUgc2FtZSBiZXR3ZWVuIHR3byBjYWxscyB0byBhbiBlbmNvZGVyLlxuV2hpbGUgdGhlcmUgaXMgYSBtb2RlIHRvIGZvcmNlIHRoZSBlbmNvZGVyIHRvIHByb2R1Y2UgdGhlIHNhbWUgYnl0ZSByZXByZXNlbnRhdGlvblxub2YgbWVzc2FnZXMgd2l0aGluIGEgc2luZ2xlIGJpbmFyeSwgdGhlc2UgZ3VhcmFudGVlcyBhcmUgbm90IGdvb2QgZW5vdWdoIGZvciBvdXJcbnVzZSBjYXNlIGluIFRlbmRlcm1pbnQuIFdlIHJlcXVpcmUgbXVsdGlwbGUgZGlmZmVyZW50IHZlcnNpb25zIG9mIGEgYmluYXJ5IHJ1bm5pbmdcblRlbmRlcm1pbnQgdG8gYmUgYWJsZSB0byBpbnRlci1vcGVyYXRlLiBBZGRpdGlvbmFsbHksIHdlIHJlcXVpcmUgdGhhdCBtdWx0aXBsZSBkaWZmZXJlbnRcbnN5c3RlbXMgd3JpdHRlbiBpbiAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkaWZmZXJlbnQgbGFuZ3VhZ2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGJlIGFibGUgdG8gcGFydGljaXBhdGUgaW4gZGlmZmVyZW50IGFzcGVjdHNcbm9mIHRoZSBwcm90b2NvbHMgb2YgVGVuZGVybWludCBhbmQgYmUgYWJsZSB0byB2ZXJpZnkgdGhlIGludGVncml0eSBvZiB0aGUgbWVzc2FnZXNcbnRoZXkgZWFjaCBwcm9kdWNlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGlsZSB0aGlzIGhhcyBub3QgeWV0IGNyZWF0ZWQgYSBwcm9ibGVtIHRoYXQgd2Uga25vdyBvZiBpbiBhIHJ1bm5pbmcgbmV0d29yaywgd2Ugc2hvdWxkXG5tYWtlIHN1cmUgdG8gcHJvdmlkZSBzdHJvbmdlciBndWFyYW50ZWVzIGFyb3VuZCB0aGUgc2VyaWFsaXplZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWVzc2FnZXNcbnVzZWQgd2l0aGluIHRoZSBUZW5kZXJtaW50IGNvbnNlbnN1cyBhbGdvcml0aG0gdG8gcHJldmVudCBhbnkgaXNzdWUgZnJvbSBvY2N1cnJpbmcuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2N1c3Npb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Rpc2N1c3Npb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpc2N1c3Npb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUHJvdG8gaGFzIHRoZSBmb2xsb3dpbmcgcG9pbnRzIG9mIHZhcmlhYmlsaXR5IHRoYXQgY2FuIHByb2R1Y2Ugbm9uLWRldGVybWluaXN0aWMgYnl0ZSByZXByZXNlbnRhdGlvbjoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRW5jb2Rpbmcgb3JkZXIgb2YgZmllbGRzIHdpdGhpbiBhIG1lc3NhZ2UuIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUHJvdG8gYWxsb3dzIGZpZWxkcyB0byBiZSBlbmNvZGVkIGluIGFueSBvcmRlciBhbmQgZXZlbiBiZSByZXBlYXRlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiMiIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRW5jb2Rpbmcgb3JkZXIgb2YgZWxlbWVudHMgb2YgYSByZXBlYXRlZCBmaWVsZC4iKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVwZWF0ZWQiKV0pLAogICAgICAgIF92bS5fdigiIGZpZWxkcyBpbiBhIHByb3RvIG1lc3NhZ2UgY2FuIGJlIHNlcmlhbGl6ZWQgaW4gYW55IG9yZGVyLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIzIiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQcmVzZW5jZSBvciBhYnNlbmNlIG9mIGRlZmF1bHQgdmFsdWVzLiIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlR5cGVzIGluIHByb3RvIGhhdmUgZGVmaW5lZCBkZWZhdWx0IHZhbHVlcyBzaW1pbGFyIHRvIEdvJ3MgemVybyB2YWx1ZXMuXG5Xcml0aW5nIG9yIG9taXR0aW5nIGEgZGVmYXVsdCB2YWx1ZSBhcmUgYm90aCBsZWdhbCB3YXlzIG9mIGVuY29kaW5nIGEgd2lyZSBtZXNzYWdlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICI0IiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTZXJpYWxpemF0aW9uIG9mICd1bmtub3duJyBmaWVsZHMuIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW5rbm93biBmaWVsZHMgY2FuIGJlIHByZXNlbnQgd2hlbiBhIG1lc3NhZ2UgaXMgY3JlYXRlZCBieSBhIGJpbmFyeSB3aXRoIGEgbmV3ZXJcbnZlcnNpb24gb2YgdGhlIHByb3RvIHRoYXQgY29udGFpbnMgZmllbGRzIHRoYXQgdGhlIGRlc2VyaWFsaXplciBpbiBhIGRpZmZlcmVudFxuYmluYXJ5IGRvZXMgbm90IHlldCBrbm93IGFib3V0LiBEZXNlcmlhbGl6ZXJzIGluIGJpbmFyaWVzIHRoYXQgZG8gbm90IGtub3cgYWJvdXQgdGhlIGZpZWxkXG53aWxsIG1haW50YWluIHRoZSBieXRlcyBvZiB0aGUgdW5rbm93biBmaWVsZCBidXQgbm90IHBsYWNlIHRoZW0gaW50byB0aGUgZGVzZXJpYWxpemVkIHN0cnVjdHVyZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgaGF2ZSBhIGZldyBvcHRpb25zIHRvIGNvbnNpZGVyIHdoZW4gcHJvZHVjaW5nIHRoaXMgc3RhYmxlIHJlcHJlc2VudGF0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogIm9wdGlvbnMtZm9yLWRldGVybWluaXN0aWMtYnl0ZS1yZXByZXNlbnRhdGlvbiIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjb3B0aW9ucy1mb3ItZGV0ZXJtaW5pc3RpYy1ieXRlLXJlcHJlc2VudGF0aW9uIiB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgT3B0aW9ucyBmb3IgZGV0ZXJtaW5pc3RpYyBieXRlIHJlcHJlc2VudGF0aW9uIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInVzZS1vbmx5LWNvbXBsaWFudC1zZXJpYWxpemVycy1hbmQtY29uc3RyYWluLWZpZWxkLXVzYWdlIiwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiN1c2Utb25seS1jb21wbGlhbnQtc2VyaWFsaXplcnMtYW5kLWNvbnN0cmFpbi1maWVsZC11c2FnZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFVzZSBvbmx5IGNvbXBsaWFudCBzZXJpYWxpemVycyBhbmQgY29uc3RyYWluIGZpZWxkIHVzYWdlIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBY2NvcmRpbmcgdG8gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9ibG9iL21hc3Rlci9kb2NzL2FyY2hpdGVjdHVyZS9hZHItMDI3LWRldGVybWluaXN0aWMtcHJvdG9idWYtc2VyaWFsaXphdGlvbi5tZCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJDb3Ntb3MtU0RLIEFEUi0yNyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgd2hlbiBtZXNzYWdlIHR5cGVzIG9iZXkgYSBzaW1wbGVcbnNldCBvZiBydWxlcywgZ29nb3Byb3RvIHByb2R1Y2VzIGEgY29uc2lzdGVudCBieXRlIHJlcHJlc2VudGF0aW9uIG9mIHNlcmlhbGl6ZWQgbWVzc2FnZXMuXG5UaGlzIHNlZW1zIHByb21pc2luZywgYWx0aG91Z2ggbW9yZSByZXNlYXJjaCBpcyBuZWVkZWQgdG8gZ3VhcmFudGVlIGdvZ29wcm90byBhbHdheXNcbnByb2R1Y2VzIGEgY29uc2lzdGVudCBzZXQgb2YgYnl0ZXMgb24gc2VyaWFsaXplZCBtZXNzYWdlcy4gVGhpcyB3b3VsZCBzb2x2ZSB0aGUgcHJvYmxlbVxud2l0aGluIFRlbmRlcm1pbnQgYXMgd3JpdHRlbiBpbiBHbywgYnV0IHdvdWxkIHJlcXVpcmUgZW5zdXJpbmcgdGhhdCB0aGVyZSBhcmUgc2ltaWxhclxuc2VyaWFsaXplcnMgd3JpdHRlbiBpbiBvdGhlciBsYW5ndWFnZXMgdGhhdCBwcm9kdWNlIHRoZSBzYW1lIG91dHB1dCBhcyBnb2dvcHJvdG8uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicmVvcmRlci1zZXJpYWxpemVkLWJ5dGVzLXRvLWVuc3VyZS1kZXRlcm1pbmlzbSIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3Jlb3JkZXItc2VyaWFsaXplZC1ieXRlcy10by1lbnN1cmUtZGV0ZXJtaW5pc20iLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBSZW9yZGVyIHNlcmlhbGl6ZWQgYnl0ZXMgdG8gZW5zdXJlIGRldGVybWluaXNtIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBzZXJpYWxpemVkIGZvcm0gb2YgYSBwcm90byBtZXNzYWdlIGNhbiBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEgY2Fub25pY2FsIHJlcHJlc2VudGF0aW9uXG5ieSBhcHBseWluZyBzaW1wbGUgcnVsZXMgdG8gdGhlIHNlcmlhbGl6ZWQgYnl0ZXMuIFJlLW9yZGVyaW5nIHRoZSBzZXJpYWxpemVkIGJ5dGVzXG53b3VsZCBhbGxvdyBUZW5kZXJtaW50IHRvIHByb2R1Y2UgYSBjYW5vbmljYWwgYnl0ZSByZXByZXNlbnRhdGlvbiB3aXRob3V0IGhhdmluZyB0b1xuc2ltdWx0YW5lb3VzbHkgbWFpbnRhaW4gYSBjdXN0b20gcHJvdG8gbWFyc2hhbGxlci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBjb3VsZCBiZSBpbXBsZW1lbnRlZCBhcyBhIGZ1bmN0aW9uIGluIG1hbnkgbGFuZ3VhZ2VzIHRoYXQgcGVyZm9ybWVkIHRoZSBmb2xsb3dpbmdcbnByb2R1Y2luZyBieXRlcyB0byBzaWduIG9yIGhhc2hpbmc6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvZXMgbm90IGFkZCBhbnkgb2YgdGhlIGRhdGEgZnJvbSB1bmtub3duIGZpZWxkcyBpbnRvIHRoZSB0eXBlIHRvIGhhc2guIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVuZGVybWludCBzaG91bGQgbm90IHJ1biBpbnRvIGEgY2FzZSB3aGVyZSBpdCBuZWVkcyB0byB2ZXJpZnkgdGhlIGludGVncml0eSBvZlxuZGF0YSB3aXRoIHVua25vd24gZmllbGRzIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbnM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwdXJwb3NlIG9mIGNoZWNraW5nIGhhc2ggZXF1YWxpdHkgd2l0aGluIFRlbmRlcm1pbnQgaXMgdG8gZW5zdXJlIHRoYXRcbml0cyBsb2NhbCBjb3B5IG9mIGRhdGEgbWF0Y2hlcyB0aGUgZGF0YSB0aGF0IHRoZSBuZXR3b3JrIGFncmVlZCBvbi4gVGhlcmUgc2hvdWxkXG50aGVyZWZvcmUgbm90IGJlIGEgY2FzZSB3aGVyZSBhIHByb2Nlc3MgaXMgY2hlY2tpbmcgaGFzaCBlcXVhbGl0eSB1c2luZyBkYXRhIHRoYXQgaXQgZGlkIG5vdCBleHBlY3RcbnRvIHJlY2VpdmUuIFdoYXQgdGhlIGRhdGEgcmVwcmVzZW50IG1heSBiZSBvcGFxdWUgdG8gdGhlIHByb2Nlc3MsIHN1Y2ggYXMgd2hlbiBjaGVja2luZyB0aGVcbnRyYW5zYWN0aW9ucyBpbiBhIGJsb2NrLCAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJidXQgdGhlIHByb2Nlc3Mgd2lsbCBzdGlsbCBoYXZlIGV4cGVjdGVkIHRvIHJlY2VpdmUgdGhpcyBkYXRhIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLFxuZGVzcGl0ZSBub3QgdW5kZXJzdGFuZGluZyB3aGF0IHRoZWlyIGludGVybmFsIHN0cnVjdHVyZSBpcy4gSXQncyBub3QgY2xlYXIgd2hhdCBpdCB3b3VsZFxubWVhbiB0byB2ZXJpZnkgdGhhdCBhIGJsb2NrIGNvbnRhaW5zIGRhdGEgdGhhdCBhIHByb2Nlc3MgZG9lcyBub3Qga25vdyBhYm91dC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHNhbWUgcmVhc29uaW5nIGFwcGxpZXMgZm9yIHNpZ25hdHVyZSB2ZXJpZmljYXRpb24gd2l0aGluIFRlbmRlcm1pbnQuIFByb2Nlc3Nlc1xudmVyaWZ5IHRoYXQgYSBkaWdpdGFsIHNpZ25hdHVyZSBzaWduZWQgb3ZlciBhIHNldCBvZiBieXRlcyBieSBsb2NhbGx5IHJlY29uc3RydWN0aW5nIHRoZVxuZGF0YSBzdHJ1Y3R1cmUgdGhhdCB0aGUgZGlnaXRhbCBzaWduYXR1cmUgc2lnbmVkIHVzaW5nIHRoZSBwcm9jZXNzJ3MgbG9jYWwgZGF0YS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiMiIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJSZW9yZGVyZWQgYWxsIG1lc3NhZ2UgZmllbGRzIHRvIGJlIGluIHRhZy1zb3J0ZWQgb3JkZXIuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRhZy1zb3J0aW5nIHRvcC1sZXZlbCBmaWVsZHMgd2lsbCBwbGFjZSBhbGwgZmllbGRzIG9mIHRoZSBzYW1lIHRhZyBpbiBhIGFkamFjZW50XG50byBlYWNob3RoZXIgd2l0aGluIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIzIiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJlb3JkZXJlZCB0aGUgY29udGVudHMgb2YgYWxsICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXBlYXRlZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmaWVsZHMgdG8gYmUgaW4gbGV4aWNvZ3JhcGhpY2FsbHkgc29ydGVkIG9yZGVyLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVwZWF0ZWQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZmllbGRzIHdpbGwgYXBwZWFyIGluIGEgbWVzc2FnZSBhcyBoYXZpbmcgdGhlIHNhbWUgdGFnIGJ1dCB3aWxsIGNvbnRhaW4gZGlmZmVyZW50XG5jb250ZW50cy4gVGhlcmVmb3JlLCBsZXhpY29ncmFwaGljYWwgc29ydGluZyB3aWxsIHByb2R1Y2UgYSBzdGFibGUgb3JkZXJpbmcgb2ZcbmZpZWxkcyB3aXRoIHRoZSBzYW1lIHRhZy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiNCIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJEZWxldGVkIGFsbCBkZWZhdWx0IHZhbHVlcyBmcm9tIHRoZSBieXRlIHJlcHJlc2VudGF0aW9uLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFbmNvZGVycyBjYW4gaW5jbHVkZSBkZWZhdWx0IHZhbHVlcyBvciBvbWl0IHRoZW0uIE1vc3QgZW5jb2RlcnMgYXBwZWFyIHRvIG9taXQgdGhlbVxuYnV0IHdlIG1heSB3aXNoIHRvIGRlbGV0ZSB0aGVtIGp1c3QgdG8gYmUgc2FmZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiNSIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVjdXJzaXZlbHkgcGVyZm9ybWVkIHRoZXNlIG9wZXJhdGlvbnMgb24gYW55IGxlbmd0aC1kZWxpbWl0ZWQgc3ViZmllbGRzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlbmd0aCBkZWxpbWl0ZWQgZmllbGRzIG1heSBjb250YWluIG1lc3NhZ2VzLCBzdHJpbmdzLCBvciBqdXN0IGJ5dGVzLiBIb3dldmVyLFxuaXQncyBub3QgcG9zc2libGUgdG8ga25vdyB3aGF0IGRhdGEgaXMgYmVpbmcgcmVwcmVzZW50ZWQgYnkgc3VjaCBhIGZpZWxkLlxuQSAnc3RyaW5nJyBtYXkgaGFwcGVuIHRvIGhhdmUgdGhlIHNhbWUgc3RydWN0dXJlIGFzIGFuIGVtYmVkZGVkIG1lc3NhZ2UgYW5kIHdlIGNhbm5vdFxuZGlzYW1iaWd1YXRlLiBGb3IgdGhpcyByZWFzb24sIHdlIG11c3QgYXBwbHkgdGhlc2Ugc2FtZSBydWxlcyB0byBhbGwgc3ViZmllbGRzIHRoYXRcbm1heSBjb250YWluIG1lc3NhZ2VzLiBCZWNhdXNlIHdlIGNhbm5vdCBrbm93IGlmIHdlIGhhdmUgdG90YWxseSBtYW5nbGVkIHRoZSBpbnRlcmlvciAnc3RyaW5nJ1xub3Igbm90LCB0aGlzIGRhdGEgc2hvdWxkIG5ldmVyIGJlIGRlc2VyaWFsaXplZCBvciB1c2VkIGZvciBhbnl0aGluZyBiZXlvbmQgaGFzaGluZy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInByb3RvdHlwZSIpXSksCiAgICAgICAgX3ZtLl92KCIgaW1wbGVtZW50YXRpb24gYnkgQGNyZWFjaGFkYWlyIG9mIHRoaXMgY2FuIGJlIGZvdW5kIGluICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vY3JlYWNoYWRhaXIvd2lyZXBiIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInRoZSB3aXJlcGIgcmVwbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cblRoaXMgY291bGQgYmUgaW1wbGVtZW50ZWQgaW4gbXVsdGlwbGUgbGFuZ3VhZ2VzIG1vcmUgc2ltcGx5IHRoYW4gZW5zdXJpbmcgdGhhdCB0aGVyZSBhcmVcbmNhbm9uaWNhbCBwcm90byBzZXJpYWxpemVycyB0aGF0IG1hdGNoIGluIGVhY2ggbGFuZ3VhZ2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZ1dHVyZS13b3JrIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmdXR1cmUtd29yayIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnV0dXJlIHdvcmsiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2Ugc2hvdWxkIGFkZCBjbGVhciBkb2N1bWVudGF0aW9uIHRvIHRoZSBUZW5kZXJtaW50IGNvZGViYXNlIGV2ZXJ5IHRpbWUgd2VcbmNvbXBhcmUgaGFzaGVzIG9mIHByb3RvIG1lc3NhZ2VzIG9yIHVzZSBwcm90byBzZXJpYWxpemVkIGJ5dGVzIHRvIHByb2R1Y2VzIGFcbmRpZ2l0YWwgc2lnbmF0dXJlcyB0aGF0IHdlIGhhdmUgYmVlbiBjYXJlZnVsIHRvIGVuc3VyZSB0aGF0IHRoZSBoYXNoZXMgYXJlIHBlcmZvcm1lZFxucHJvcGVybHkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZmVyZW5jZXMiKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}