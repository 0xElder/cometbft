{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-044-lite-client-with-weak-subjectivity.md?vue&type=template&id=2a607b3e&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-044-lite-client-with-weak-subjectivity.md","mtime":1673295761173},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJhZHItMDQ0LWxpdGUtY2xpZW50LXdpdGgtd2Vhay1zdWJqZWN0aXZpdHkiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fkci0wNDQtbGl0ZS1jbGllbnQtd2l0aC13ZWFrLXN1YmplY3Rpdml0eSIgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEFEUiAwNDQ6IExpdGUgQ2xpZW50IHdpdGggV2VhayBTdWJqZWN0aXZpdHkiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY2hhbmdlbG9nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjaGFuZ2Vsb2ciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoYW5nZWxvZyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIxMy0wNy0yMDE5OiBJbml0aWFsIGRyYWZ0IildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCIxNC0wOC0yMDE5OiBBZGRyZXNzIGN3Z29lcyBjb21tZW50cyIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbnRleHQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnRleHQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ29udGV4dCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgY29uY2VwdCBvZiBsaWdodCBjbGllbnRzIHdhcyBpbnRyb2R1Y2VkIGluIHRoZSBCaXRjb2luIHdoaXRlIHBhcGVyLiBJdFxuZGVzY3JpYmVzIGEgd2F0Y2hlciBvZiBkaXN0cmlidXRlZCBjb25zZW5zdXMgcHJvY2VzcyB0aGF0IG9ubHkgdmFsaWRhdGVzIHRoZVxuY29uc2Vuc3VzIGFsZ29yaXRobSBhbmQgbm90IHRoZSBzdGF0ZSBtYWNoaW5lIHRyYW5zYWN0aW9ucyB3aXRoaW4uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRlbmRlcm1pbnQgbGlnaHQgY2xpZW50cyBhbGxvdyBiYW5kd2lkdGggJiBjb21wdXRlLWNvbnN0cmFpbmVkIGRldmljZXMsIHN1Y2ggYXMgc21hcnRwaG9uZXMsIGxvdy1wb3dlciBlbWJlZGRlZCBjaGlwcywgb3Igb3RoZXIgYmxvY2tjaGFpbnMgdG9cbmVmZmljaWVudGx5IHZlcmlmeSB0aGUgY29uc2Vuc3VzIG9mIGEgVGVuZGVybWludCBibG9ja2NoYWluLiBUaGlzIGZvcm1zIHRoZVxuYmFzaXMgb2Ygc2FmZSBhbmQgZWZmaWNpZW50IHN0YXRlIHN5bmNocm9uaXphdGlvbiBmb3IgbmV3IG5ldHdvcmsgbm9kZXMgYW5kXG5pbnRlci1ibG9ja2NoYWluIGNvbW11bmljYXRpb24gKHdoZXJlIGEgbGlnaHQgY2xpZW50IG9mIG9uZSBUZW5kZXJtaW50IGluc3RhbmNlXG5ydW5zIGluIGFub3RoZXIgY2hhaW4ncyBzdGF0ZSBtYWNoaW5lKS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gYSBuZXR3b3JrIHRoYXQgaXMgZXhwZWN0ZWQgdG8gcmVsaWFibHkgcHVuaXNoIHZhbGlkYXRvcnMgZm9yIG1pc2JlaGF2aW9yXG5ieSBzbGFzaGluZyBib25kZWQgc3Rha2UgYW5kIHdoZXJlIHRoZSB2YWxpZGF0b3Igc2V0IGNoYW5nZXNcbmluZnJlcXVlbnRseSwgY2xpZW50cyBjYW4gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcyBhc3N1bXB0aW9uIHRvIHNhZmVseVxuc3luY2hyb25pemUgYSBsaXRlIGNsaWVudCB3aXRob3V0IGRvd25sb2FkaW5nIHRoZSBpbnRlcnZlbmluZyBoZWFkZXJzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMaWdodCBjbGllbnRzIChhbmQgZnVsbCBub2Rlcykgb3BlcmF0aW5nIGluIHRoZSBQcm9vZiBPZiBTdGFrZSBjb250ZXh0IG5lZWQgYVxudHJ1c3RlZCBibG9jayBoZWlnaHQgZnJvbSBhIHRydXN0ZWQgc291cmNlIHRoYXQgaXMgbm8gb2xkZXIgdGhhbiAxIHVuYm9uZGluZ1xud2luZG93IHBsdXMgYSBjb25maWd1cmFibGUgZXZpZGVuY2Ugc3VibWlzc2lvbiBzeW5jaHJvbnkgYm91bmQuIFRoaXMgaXMgY2FsbGVkIOKAnHdlYWsgc3ViamVjdGl2aXR54oCdLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZWFrIHN1YmplY3Rpdml0eSBpcyByZXF1aXJlZCBpbiBQcm9vZiBvZiBTdGFrZSBibG9ja2NoYWlucyBiZWNhdXNlIGl0IGlzXG5jb3N0bGVzcyBmb3IgYW4gYXR0YWNrZXIgdG8gYnV5IHVwIHZvdGluZyBrZXlzIHRoYXQgYXJlIG5vIGxvbmdlciBib25kZWQgYW5kXG5mb3JrIHRoZSBuZXR3b3JrIGF0IHNvbWUgcG9pbnQgaW4gaXRzIHByaW9yIGhpc3RvcnkuIFNlZSBWaXRhbGlr4oCZcyBwb3N0IGF0XG4iCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9ibG9nLmV0aGVyZXVtLm9yZy8yMDE0LzExLzI1L3Byb29mLXN0YWtlLWxlYXJuZWQtbG92ZS13ZWFrLXN1YmplY3Rpdml0eS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIlByb29mIG9mIFN0YWtlOiBIb3cgSSBMZWFybmVkIHRvIExvdmUgV2Vha1xuU3ViamVjdGl2aXR5IiksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ3VycmVudGx5LCBUZW5kZXJtaW50IHByb3ZpZGVzIGEgbGl0ZSBjbGllbnQgaW1wbGVtZW50YXRpb24gaW4gdGhlXG4iCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC90cmVlL21haW4vbGlnaHQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigibGlnaHQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcGFja2FnZS4gVGhpc1xubGl0ZSBjbGllbnQgaW1wbGVtZW50cyBhIGJpc2VjdGlvbiBhbGdvcml0aG0gdGhhdCB0cmllcyB0byB1c2UgYSBiaW5hcnkgc2VhcmNoXG50byBmaW5kIHRoZSBtaW5pbXVtIG51bWJlciBvZiBibG9jayBoZWFkZXJzIHdoZXJlIHRoZSB2YWxpZGF0b3Igc2V0IHZvdGluZ1xucG93ZXIgY2hhbmdlcyBhcmUgbGVzcyB0aGFuIDwgMS8zcmQuIFRoaXMgaW50ZXJmYWNlIGRvZXMgbm90IHN1cHBvcnQgd2Vha1xuc3ViamVjdGl2aXR5IGF0IHRoaXMgdGltZS4gVGhlIENvc21vcyBTREsgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IGNvdW50ZXJmYWN0dWFsXG5zbGFzaGluZywgbm9yIGRvZXMgdGhlIGxpdGUgY2xpZW50IGhhdmUgYW55IGNhcGFjaXR5IHRvIHJlcG9ydCBldmlkZW5jZSBtYWtpbmdcbnRoZXNlIHN5c3RlbXMgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigidGhlb3JldGljYWxseSB1bnNhZmUiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOT1RFOiBUZW5kZXJtaW50IHByb3ZpZGVzIGEgc29tZXdoYXQgZGlmZmVyZW50IChzdHJvbmdlcikgbGlnaHQgY2xpZW50IG1vZGVsXG50aGFuIEJpdGNvaW4gdW5kZXIgZWNsaXBzZSwgc2luY2UgdGhlIGVjbGlwc2luZyBub2RlKHMpIGNhbiBvbmx5IGZvb2wgdGhlIGxpZ2h0XG5jbGllbnQgaWYgdGhleSBoYXZlIHR3by10aGlyZHMgb2YgdGhlIHByaXZhdGUga2V5cyBmcm9tIHRoZSBsYXN0IHJvb3Qtb2YtdHJ1c3QuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRlY2lzaW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZWNpc2lvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGVjaXNpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidGhlLXdlYWstc3ViamVjdGl2aXR5LWludGVyZmFjZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGhlLXdlYWstc3ViamVjdGl2aXR5LWludGVyZmFjZSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUaGUgV2VhayBTdWJqZWN0aXZpdHkgSW50ZXJmYWNlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFkZCB0aGUgd2VhayBzdWJqZWN0aXZpdHkgaW50ZXJmYWNlIGZvciB3aGVuIGEgbmV3IGxpZ2h0IGNsaWVudCBjb25uZWN0cyB0byB0aGVcbm5ldHdvcmsgb3Igd2hlbiBhIGxpZ2h0IGNsaWVudCB0aGF0IGhhcyBiZWVuIG9mZmxpbmUgZm9yIGxvbmdlciB0aGFuIHRoZVxudW5ib25kaW5nIHBlcmlvZCBjb25uZWN0cyB0byB0aGUgbmV0d29yay4gU3BlY2lmaWNhbGx5LCB0aGUgbm9kZSBuZWVkcyB0b1xuaW5pdGlhbGl6ZSB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZSBiZWZvcmUgc3luY2luZyBmcm9tIHVzZXIgaW5wdXQ6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogIiIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJkSGx3WlNCVWNuVnpkRTl3ZEdsdmJuTWdjM1J5ZFdOMElIc0tJQ0FnSUM4dklGSmxjWFZwY21Wa09pQnZibXg1SUhSeWRYTjBJR052YlcxcGRITWdkWEFnZEc4Z2RHaHBjeUJ2YkdRdUNpQWdJQ0F2THlCVGFHOTFiR1FnWW1VZ1pYRjFZV3dnZEc4Z2RHaGxJSFZ1WW05dVpHbHVaeUJ3WlhKcGIyUWdiV2x1ZFhNZ2MyOXRaU0JrWld4MFlTQm1iM0lnWlhacFpHVnVZMlVnY21Wd2IzSjBhVzVuTGdvZ0lDQWdWSEoxYzNSUVpYSnBiMlFnZEdsdFpTNUVkWEpoZEdsdmJpQmdhbk52YmpvbWNYVnZkRHQwY25WemRDMXdaWEpwYjJRbWNYVnZkRHRnQ2dvZ0lDQWdMeThnVDNCMGFXOXVJREU2SUZSeWRYTjBTR1ZwWjJoMElHRnVaQ0JVY25WemRFaGhjMmdnWTJGdUlHSnZkR2dnWW1VZ2NISnZkbWxrWldRS0lDQWdJQzh2SUhSdklHWnZjbU5sSUhSb1pTQjBjblZ6ZEdsdVp5QnZaaUJoSUhCaGNuUnBZM1ZzWVhJZ2FHVnBaMmgwSUdGdVpDQm9ZWE5vTGdvZ0lDQWdMeThnU1dZZ2RHaGxJR3hoZEdWemRDQjBjblZ6ZEdWa0lHaGxhV2RvZEM5b1lYTm9JR2x6SUcxdmNtVWdjbVZqWlc1MExDQjBhR1Z1SUhSb2FYTWdiM0IwYVc5dUlHbHpDaUFnSUNBdkx5QnBaMjV2Y21Wa0xnb2dJQ0FnVkhKMWMzUklaV2xuYUhRZ2FXNTBOalFnSUdCcWMyOXVPaVp4ZFc5ME8zUnlkWE4wTFdobGFXZG9kQ1p4ZFc5ME8yQUtJQ0FnSUZSeWRYTjBTR0Z6YUNBZ0lGdGRZbmwwWlNCZ2FuTnZiam9tY1hWdmREdDBjblZ6ZEMxb1lYTm9KbkYxYjNRN1lBb0tJQ0FnSUM4dklFOXdkR2x2YmlBeU9pQkRZV3hzWW1GamF5QmpZVzRnWW1VZ2MyVjBJSFJ2SUdsdGNHeGxiV1Z1ZENCaElHTnZibVpwY20xaGRHbHZiZ29nSUNBZ0x5OGdjM1JsY0NCcFppQjBhR1VnZEhKMWMzUWdjM1J2Y21VZ2FYTWdkVzVwYm1sMGFXRnNhWHBsWkN3Z2IzSWdaWGh3YVhKbFpDNEtJQ0FnSUVOaGJHeGlZV05ySUdaMWJtTW9hR1ZwWjJoMElHbHVkRFkwTENCb1lYTm9JRnRkWW5sMFpTa2daWEp5YjNJS2ZRbz0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBleHBlY3RhdGlvbiBpcyB0aGUgdXNlciB3aWxsIGdldCB0aGlzIGluZm9ybWF0aW9uIGZyb20gYSB0cnVzdGVkIHNvdXJjZVxubGlrZSBhIHZhbGlkYXRvciwgYSBmcmllbmQsIG9yIGEgc2VjdXJlIHdlYnNpdGUuIEEgbW9yZSB1c2VyIGZyaWVuZGx5XG5zb2x1dGlvbiB3aXRoIHRydXN0IHRyYWRlb2ZmcyBpcyB0aGF0IHdlIGVzdGFibGlzaCBhbiBodHRwcyBiYXNlZCBwcm90b2NvbCB3aXRoXG5hIGRlZmF1bHQgZW5kIHBvaW50IHRoYXQgcG9wdWxhdGVzIHRoaXMgaW5mb3JtYXRpb24uIEFsc28gYW4gb24tY2hhaW4gcmVnaXN0cnlcbm9mIHJvb3RzLW9mLXRydXN0IChlLmcuIG9uIHRoZSBDb3Ntb3MgSHViKSBzZWVtcyBsaWtlbHkgaW4gdGhlIGZ1dHVyZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibGluZWFyLXZlcmlmaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbGluZWFyLXZlcmlmaWNhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMaW5lYXIgVmVyaWZpY2F0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBsaW5lYXIgdmVyaWZpY2F0aW9uIGFsZ29yaXRobSByZXF1aXJlcyBkb3dubG9hZGluZyBhbGwgaGVhZGVyc1xuYmV0d2VlbiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcnVzdEhlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxhdGVzdEhlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gVGhlIGxpdGUgY2xpZW50IGRvd25sb2FkcyB0aGVcbmZ1bGwgaGVhZGVyIGZvciB0aGUgcHJvdmlkZWQgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcnVzdEhlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIHRoZW4gcHJvY2VlZHMgdG8gZG93bmxvYWQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOKzEiKV0pLAogICAgICAgIF92bS5fdigiXG5oZWFkZXJzIGFuZCBhcHBsaWVzIHRoZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC90cmVlL21haW4vc3BlYy9saWdodC1jbGllbnQvdmVyaWZpY2F0aW9uL1JFQURNRS5tZCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJUZW5kZXJtaW50IHZhbGlkYXRpb25cbnJ1bGVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIlxudG8gZWFjaCBibG9jay4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYmlzZWN0aW5nLXZlcmlmaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYmlzZWN0aW5nLXZlcmlmaWNhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCaXNlY3RpbmcgVmVyaWZpY2F0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJpc2VjdGluZyBWZXJpZmljYXRpb24gaXMgYSBtb3JlIGJhbmR3aWR0aCBhbmQgY29tcHV0ZSBpbnRlbnNpdmUgbWVjaGFuaXNtIHRoYXRcbmluIHRoZSBtb3N0IG9wdGltaXN0aWMgY2FzZSByZXF1aXJlcyBhIGxpZ2h0IGNsaWVudCB0byBvbmx5IGRvd25sb2FkIHR3byBibG9ja1xuaGVhZGVycyB0byBjb21lIGludG8gc3luY2hyb25pemF0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgYmlzZWN0aW9uIGFsZ29yaXRobSBwcm9jZWVkcyBpbiB0aGUgZm9sbG93aW5nIGZhc2hpb24uIFRoZSBjbGllbnQgZG93bmxvYWRzXG5hbmQgdmVyaWZpZXMgdGhlIGZ1bGwgYmxvY2sgaGVhZGVyIGZvciAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRydXN0SGVpZ2h0IildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgdGhlbiAgZmV0Y2hlc1xuIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMYXRlc3RIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIGJsb2NrZXIgaGVhZGVyLiBUaGUgY2xpZW50IHRoZW4gdmVyaWZpZXMgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGF0ZXN0SGVpZ2h0IildKSwKICAgICAgICBfdm0uX3YoIlxuaGVhZGVyLiBGaW5hbGx5IHRoZSBjbGllbnQgYXR0ZW1wdHMgdG8gdmVyaWZ5IHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxhdGVzdEhlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KCIgaGVhZGVyIHdpdGhcbnZvdGluZyBwb3dlcnMgdGFrZW4gZnJvbSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5leHRWYWxpZGF0b3JTZXQiKV0pLAogICAgICAgIF92bS5fdigiIGluIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRydXN0SGVpZ2h0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGhlYWRlci4gVGhpc1xudmVyaWZpY2F0aW9uIHdpbGwgc3VjY2VlZCBpZiB0aGUgdmFsaWRhdG9ycyBmcm9tICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHJ1c3RIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIHN0aWxsIGhhdmUgPiAyLzNcbisxIG9mIHZvdGluZyBwb3dlciBpbiB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMYXRlc3RIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIElmIHRoaXMgc3VjY2VlZHMsIHRoZSBjbGllbnQgaXMgZnVsbHlcbnN5bmNocm9uaXplZC4gSWYgdGhpcyBmYWlscywgdGhlbiBmb2xsb3dpbmcgQmlzZWN0aW9uIEFsZ29yaXRobSBzaG91bGQgYmVcbmV4ZWN1dGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgQ2xpZW50IHRyaWVzIHRvIGRvd25sb2FkIHRoZSBibG9jayBhdCB0aGUgbWlkLXBvaW50IGJsb2NrIGJldHdlZW5cbiIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTGF0ZXN0SGVpZ2h0IildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcnVzdEhlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGF0dGVtcHRzIHRoYXQgc2FtZSBhbGdvcml0aG0gYXMgYWJvdmVcbnVzaW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWlkUG9pbnRIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIGluc3RlYWQgb2YgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMYXRlc3RIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCBhIGRpZmZlcmVudCB0aHJlc2hvbGQgLVxuMS8zICsxIG9mIHZvdGluZyBwb3dlciBmb3IgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibm9uLWFkamFjZW50IGhlYWRlcnMiKV0pLAogICAgICAgIF92bS5fdigiLiBJbiB0aGUgY2FzZSB0aGUgb2YgZmFpbHVyZSxcbnJlY3Vyc2l2ZWx5IHBlcmZvcm0gdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWlkUG9pbnQiKV0pLAogICAgICAgIF92bS5fdigiIHZlcmlmaWNhdGlvbiB1bnRpbCBzdWNjZXNzIHRoZW4gc3RhcnQgb3Zlclxud2l0aCBhbiB1cGRhdGVkICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTmV4dFZhbGlkYXRvclNldCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHJ1c3RIZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB0aGUgY2xpZW50IGVuY291bnRlcnMgYSBmb3JnZWQgaGVhZGVyLCBpdCBzaG91bGQgc3VibWl0IHRoZSBoZWFkZXIgYWxvbmdcbndpdGggc29tZSBvdGhlciBpbnRlcm1lZGlhdGUgaGVhZGVycyBhcyB0aGUgZXZpZGVuY2Ugb2YgbWlzYmVoYXZpb3IgdG8gb3RoZXJcbmZ1bGwgbm9kZXMuIEFmdGVyIHRoYXQsIGl0IGNhbiByZXRyeSB0aGUgYmlzZWN0aW9uIHVzaW5nIGFub3RoZXIgZnVsbCBub2RlLiBBblxub3B0aW1hbCBjbGllbnQgd2lsbCBjYWNoZSB0cnVzdGVkIGhlYWRlcnMgZnJvbSB0aGUgcHJldmlvdXMgcnVuIHRvIG1pbmltaXplXG5uZXR3b3JrIHVzYWdlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJDaGVjayBvdXQgdGhlIGZvcm1hbCBzcGVjaWZpY2F0aW9uXG4iKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC90cmVlL21haW4vc3BlYy9saWdodC1jbGllbnQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiaGVyZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0YXR1cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0YXR1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSW1wbGVtZW50ZWQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbnNlcXVlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29uc2VxdWVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb25zZXF1ZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicG9zaXRpdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Bvc2l0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQb3NpdGl2ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJsaWdodCBjbGllbnQgd2hpY2ggaXMgc2FmZSB0byB1c2UgKGl0IGNhbiBnbyBvZmZsaW5lLCBidXQgbm90IGZvciB0b28gbG9uZykiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZWdhdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmVnYXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5lZ2F0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoImNvbXBsZXhpdHkgb2YgYmlzZWN0aW9uIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJzb2NpYWwgY29uc2Vuc3VzIGNhbiBiZSBwcm9uZSB0byBlcnJvcnMgKGZvciBjYXNlcyB3aGVyZSBhIG5ldyBsaWdodCBjbGllbnRcbmpvaW5zIGEgbmV0d29yayBvciBpdCBoYXMgYmVlbiBvZmZsaW5lIGZvciB0b28gbG9uZykiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}