{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-067-mempool-refactor.md?vue&type=template&id=962a0eb2&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-067-mempool-refactor.md","mtime":1673295761175},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA2Ny1tZW1wb29sLXJlZmFjdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhZHItMDY3LW1lbXBvb2wtcmVmYWN0b3IiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQURSIDA2NzogTWVtcG9vbCBSZWZhY3RvciIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNhZHItMDY3LW1lbXBvb2wtcmVmYWN0b3IiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIkFEUiAwNjc6IE1lbXBvb2wgUmVmYWN0b3IiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjaGFuZ2Vsb2ciIH0gfSwgW192bS5fdigiQ2hhbmdlbG9nIildKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFtfdm0uX3YoIlN0YXR1cyIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2NvbnRleHQiIH0gfSwgW192bS5fdigiQ29udGV4dCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjdXJyZW50LWRlc2lnbiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDdXJyZW50IERlc2lnbiIpLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNhbHRlcm5hdGl2ZS1hcHByb2FjaGVzIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQWx0ZXJuYXRpdmUgQXBwcm9hY2hlcyIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwcmlvci1hcnQiIH0gfSwgW192bS5fdigiUHJpb3IgQXJ0IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2V0aGVyZXVtIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkV0aGVyZXVtIiksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZGllbSIgfSB9LCBbX3ZtLl92KCJEaWVtIildKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNkZWNpc2lvbiIgfSB9LCBbX3ZtLl92KCJEZWNpc2lvbiIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2RldGFpbGVkLWRlc2lnbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkRldGFpbGVkIERlc2lnbiIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY2hlY2t0eCIgfSB9LCBbX3ZtLl92KCJDaGVja1R4IildKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI21lbXBvb2wiIH0gfSwgW192bS5fdigiTWVtcG9vbCIpXSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNldmljdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJFdmljdGlvbiIpLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2dvc3NpcGluZyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJHb3NzaXBpbmciKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwZXJmb3JtYW5jZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQZXJmb3JtYW5jZSIpLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNmdXR1cmUtaW1wcm92ZW1lbnRzIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRnV0dXJlIEltcHJvdmVtZW50cyIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb25zZXF1ZW5jZXMiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDb25zZXF1ZW5jZXMiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3Bvc2l0aXZlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBvc2l0aXZlIiksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjbmVnYXRpdmUiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiTmVnYXRpdmUiKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNuZXV0cmFsIiB9IH0sIFtfdm0uX3YoIk5ldXRyYWwiKV0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJSZWZlcmVuY2VzIiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNoYW5nZWxvZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2hhbmdlbG9nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDaGFuZ2Vsb2ciKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQXByaWwgMTksIDIwMjE6IEluaXRpYWwgRHJhZnQgKEBhbGV4YW5kZXJiZXopIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3RhdHVzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3RhdHVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBY2NlcHRlZCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGV4dCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udGV4dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb250ZXh0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRlbmRlcm1pbnQgQ29yZSBoYXMgYSByZWFjdG9yIGFuZCBkYXRhIHN0cnVjdHVyZSwgbWVtcG9vbCwgdGhhdCBmYWNpbGl0YXRlcyB0aGVcbmVwaGVtZXJhbCBzdG9yYWdlIG9mIHVuY29tbWl0dGVkIHRyYW5zYWN0aW9ucy4gSG9uZXN0IG5vZGVzIHBhcnRpY2lwYXRpbmcgaW4gYVxuVGVuZGVybWludCBuZXR3b3JrIGdvc3NpcCB0aGVzZSB1bmNvbW1pdHRlZCB0cmFuc2FjdGlvbnMgdG8gZWFjaCBvdGhlciBpZiB0aGV5XG5wYXNzIHRoZSBhcHBsaWNhdGlvbidzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gSW4gYWRkaXRpb24sIGJsb2NrIHByb3Bvc2VycyBzZWxlY3QgZnJvbSB0aGVcbm1lbXBvb2wgYSBzdWJzZXQgb2YgdW5jb21taXR0ZWQgdHJhbnNhY3Rpb25zIHRvIGluY2x1ZGUgaW4gdGhlIG5leHQgYmxvY2suIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkN1cnJlbnRseSwgdGhlIG1lbXBvb2wgaW4gVGVuZGVybWludCBDb3JlIGlzIGRlc2lnbmVkIGFzIGEgRklGTyBxdWV1ZS4gSW4gb3RoZXJcbndvcmRzLCB0cmFuc2FjdGlvbnMgYXJlIGluY2x1ZGVkIGluIGJsb2NrcyBhcyB0aGV5IGFyZSByZWNlaXZlZCBieSBhIG5vZGUuIFRoZXJlXG5jdXJyZW50bHkgaXMgbm8gZXhwbGljaXQgYW5kIHByaW9yaXRpemVkIG9yZGVyaW5nIG9mIHRoZXNlIHVuY29tbWl0dGVkIHRyYW5zYWN0aW9ucy5cblRoaXMgcHJlc2VudHMgYSBmZXcgdGVjaG5pY2FsIGFuZCBVWCBjaGFsbGVuZ2VzIGZvciBvcGVyYXRvcnMgYW5kIGFwcGxpY2F0aW9ucy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTmFtZWx5LCB2YWxpZGF0b3JzIGFyZSBub3QgYWJsZSB0byBwcmlvcml0aXplIHRyYW5zYWN0aW9ucyBieSB0aGVpciBmZWVzIG9yIGFueVxuaW5jZW50aXZlIGFsaWduZWQgbWVjaGFuaXNtLiBJbiBhZGRpdGlvbiwgdGhlIGxhY2sgb2YgcHJpb3JpdGl6YXRpb24gYWxzbyBsZWFkc1xudG8gY2FzY2FkaW5nIGVmZmVjdHMgaW4gdGVybXMgb2YgRG9TIGFuZCB2YXJpb3VzIGF0dGFjayB2ZWN0b3JzIG9uIG5ldHdvcmtzLFxuZS5nLiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL2Rpc2N1c3Npb25zLzgyMjQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiY29zbW9zL2Nvc21vcy1zZGsjODIyNCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRodXMsIFRlbmRlcm1pbnQgQ29yZSBuZWVkcyB0aGUgYWJpbGl0eSBmb3IgYW4gYXBwbGljYXRpb24gYW5kIGl0cyB1c2VycyB0b1xucHJpb3JpdGl6ZSB0cmFuc2FjdGlvbnMgaW4gYSBmbGV4aWJsZSBhbmQgcGVyZm9ybWFudCBtYW5uZXIuIFNwZWNpZmljYWxseSwgd2UncmVcbmFpbWluZyB0byBlaXRoZXIgaW1wcm92ZSwgbWFpbnRhaW4gb3IgYWRkIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBpbiB0aGVcblRlbmRlcm1pbnQgbWVtcG9vbDoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJBbGxvdyBhcHBsaWNhdGlvbi1kZXRlcm1pbmVkIHRyYW5zYWN0aW9uIHByaW9yaXR5LiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFsbG93IGVmZmljaWVudCBjb25jdXJyZW50IHJlYWRzIGFuZCB3cml0ZXMuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBbGxvdyBibG9jayBwcm9wb3NlcnMgdG8gcmVhcCB0cmFuc2FjdGlvbnMgZWZmaWNpZW50bHkgYnkgcHJpb3JpdHkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNYWludGFpbiBhIGZpeGVkIG1lbXBvb2wgY2FwYWNpdHkgYnkgdHJhbnNhY3Rpb24gc2l6ZSBhbmQgZXZpY3QgbG93ZXIgcHJpb3JpdHlcbnRyYW5zYWN0aW9ucyB0byBtYWtlIHJvb20gZm9yIGhpZ2hlciBwcmlvcml0eSB0cmFuc2FjdGlvbnMuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkFsbG93IHRyYW5zYWN0aW9ucyB0byBiZSBnb3NzaXBlZCBieSBwcmlvcml0eSBlZmZpY2llbnRseS4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBbGxvdyBvcGVyYXRvcnMgdG8gc3BlY2lmeSBhIG1heGltdW0gVFRMIGZvciB0cmFuc2FjdGlvbnMgaW4gdGhlIG1lbXBvb2wgYmVmb3JlXG50aGV5J3JlIGF1dG9tYXRpY2FsbHkgZXZpY3RlZCBpZiBub3Qgc2VsZWN0ZWQgZm9yIGEgYmxvY2sgcHJvcG9zYWwgaW4gdGltZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkVuc3VyZSB0aGUgZGVzaWduIGFsbG93cyBmb3IgZnV0dXJlIGV4dGVuc2lvbnMsIHN1Y2ggYXMgcmVwbGFjZS1ieS1wcmlvcml0eSBhbmRcbmFsbG93aW5nIG11bHRpcGxlIHBlbmRpbmcgdHJhbnNhY3Rpb25zIHBlciBzZW5kZXIsIHRvIGJlIGluY29ycG9yYXRlZCBlYXNpbHkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTm90ZSwgbm90IGFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkcmVzc2VkIGJ5IHRoZSBwcm9wb3NlZCBjaGFuZ2VzIGluXG50aGlzIEFEUi4gSG93ZXZlciwgdGhpcyBwcm9wb3NhbCB3aWxsIGVuc3VyZSB0aGF0IGFueSB1bmFkZHJlc3NlZCBwcm9wZXJ0aWVzXG5jYW4gYmUgYWRkcmVzc2VkIGluIGFuIGVhc3kgYW5kIGV4dGVuc2libGUgbWFubmVyIGluIHRoZSBmdXR1cmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImN1cnJlbnQtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjdXJyZW50LWRlc2lnbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3VycmVudCBEZXNpZ24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuL2ltZy9tZW1wb29sLXYwLmpwZWciKSwgYWx0OiAibWVtcG9vbCIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkF0IHRoZSBjb3JlIG9mIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYwIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG1lbXBvb2wgcmVhY3RvciBpcyBhIGNvbmN1cnJlbnQgbGlua2VkLWxpc3QuIFRoaXMgaXMgdGhlXG5wcmltYXJ5IGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUeCIpXSksCiAgICAgICAgX3ZtLl92KCIgb2JqZWN0cyB0aGF0IGhhdmUgcGFzc2VkICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cbldoZW4gYSBub2RlIHJlY2VpdmVzIGEgdHJhbnNhY3Rpb24gZnJvbSBhbm90aGVyIHBlZXIsIGl0IGV4ZWN1dGVzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KCIsIHdoaWNoXG5vYnRhaW5zIGEgcmVhZC1sb2NrIG9uIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipDTGlzdE1lbXBvb2wiKV0pLAogICAgICAgIF92bS5fdigiLiBJZiB0aGUgdHJhbnNhY3Rpb24gcGFzc2VzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KCJcbmxvY2FsbHkgb24gdGhlIG5vZGUsIGl0IGlzIGFkZGVkIHRvIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipDTGlzdCIpXSksCiAgICAgICAgX3ZtLl92KCIgYnkgb2J0YWluaW5nIGEgd3JpdGUtbG9jay4gSXRcbmlzIGFsc28gYWRkZWQgdG8gdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2FjaGUiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInR4c01hcCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYm90aCBvZiB3aGljaCBvYnRhaW4gdGhlaXIgb3duIHJlc3BlY3RpdmVcbndyaXRlLWxvY2tzIGFuZCBtYXAgYSByZWZlcmVuY2UgZnJvbSB0aGUgdHJhbnNhY3Rpb24gaGFzaCB0byB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUeCIpXSksCiAgICAgICAgX3ZtLl92KCIgaXRzZWxmLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUcmFuc2FjdGlvbnMgYXJlIGNvbnRpbnVvdXNseSBnb3NzaXBlZCB0byBwZWVycyB3aGVuZXZlciBhIG5ldyB0cmFuc2FjdGlvbiBpcyBhZGRlZFxudG8gYSBsb2NhbCBub2RlJ3MgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIqQ0xpc3QiKV0pLAogICAgICAgIF92bS5fdigiLCB3aGVyZSB0aGUgbm9kZSBhdCB0aGUgZnJvbnQgb2YgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiKkNMaXN0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIHNlbGVjdGVkLlxuQW5vdGhlciB0cmFuc2FjdGlvbiB3aWxsIG5vdCBiZSBnb3NzaXBlZCB1bnRpbCB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIqQ0xpc3QiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbm90aWZpZXMgdGhlIHJlYWRlclxudGhhdCB0aGVyZSBhcmUgbW9yZSB0cmFuc2FjdGlvbnMgdG8gZ29zc2lwLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIGEgcHJvcG9zZXIgYXR0ZW1wdHMgdG8gcHJvcG9zZSBhIGJsb2NrLCB0aGV5IHdpbGwgZXhlY3V0ZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlYXBNYXhCeXRlc01heEdhcyIpXSksCiAgICAgICAgX3ZtLl92KCJcbm9uIHRoZSByZWFjdG9yJ3MgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIqQ0xpc3RNZW1wb29sIildKSwKICAgICAgICBfdm0uX3YoIi4gVGhpcyBjYWxsIG9idGFpbnMgYSByZWFkLWxvY2sgb24gdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiKkNMaXN0TWVtcG9vbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuYW5kIHNlbGVjdHMgYXMgbWFueSB0cmFuc2FjdGlvbnMgYXMgcG9zc2libGUgc3RhcnRpbmcgZnJvbSB0aGUgZnJvbnQgb2YgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiKkNMaXN0IildKSwKICAgICAgICBfdm0uX3YoIlxubW92aW5nIHRvIHRoZSBiYWNrIG9mIHRoZSBsaXN0LiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiV2hlbiBhIGJsb2NrIGlzIGZpbmFsbHkgY29tbWl0dGVkLCBhIGNhbGxlciBpbnZva2VzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVXBkYXRlIildKSwKICAgICAgICBfdm0uX3YoIiBvbiB0aGUgcmVhY3RvcidzXG4iKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipDTGlzdE1lbXBvb2wiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2l0aCBhbGwgdGhlIHNlbGVjdGVkIHRyYW5zYWN0aW9ucy4gTm90ZSwgdGhlIGNhbGxlciBtdXN0IGFsc29cbmV4cGxpY2l0bHkgb2J0YWluIGEgd3JpdGUtbG9jayBvbiB0aGUgcmVhY3RvcidzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiKkNMaXN0TWVtcG9vbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gVGhpcyBjYWxsXG53aWxsIHJlbW92ZSBhbGwgdGhlIHN1cHBsaWVkIHRyYW5zYWN0aW9ucyBmcm9tIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInR4c01hcCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipDTGlzdCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYm90aFxub2Ygd2hpY2ggb2J0YWluIHRoZWlyIG93biByZXNwZWN0aXZlIHdyaXRlLWxvY2tzLiBJbiBhZGRpdGlvbiwgdGhlIHRyYW5zYWN0aW9uXG5tYXkgYWxzbyBiZSByZW1vdmVkIGZyb20gdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2FjaGUiKV0pLAogICAgICAgIF92bS5fdigiIHdoaWNoIG9idGFpbnMgaXQncyBvd24gd3JpdGUtbG9jay4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWx0ZXJuYXRpdmUtYXBwcm9hY2hlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYWx0ZXJuYXRpdmUtYXBwcm9hY2hlcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbHRlcm5hdGl2ZSBBcHByb2FjaGVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoZW4gY29uc2lkZXJpbmcgd2hpY2ggYXBwcm9hY2ggdG8gdGFrZSBmb3IgYSBwcmlvcml0eS1iYXNlZCBmbGV4aWJsZSBhbmRcbnBlcmZvcm1hbnQgbWVtcG9vbCwgdGhlcmUgYXJlIHR3byBjb3JlIGNhbmRpZGF0ZXMuIFRoZSBmaXJzdCBjYW5kaWRhdGUgaXMgbGVzc1xuaW52YXNpdmUgaW4gdGhlIHJlcXVpcmVkICBzZXQgb2YgcHJvdG9jb2wgYW5kIGltcGxlbWVudGF0aW9uIGNoYW5nZXMsIHdoaWNoXG5zaW1wbHkgZXh0ZW5kcyB0aGUgZXhpc3RpbmcgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDaGVja1R4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEFCQ0kgbWV0aG9kLiBUaGUgc2Vjb25kIGNhbmRpZGF0ZSBlc3NlbnRpYWxseVxuaW52b2x2ZXMgdGhlIGludHJvZHVjdGlvbiBvZiBuZXcgQUJDSSBtZXRob2QocykgYW5kIHdvdWxkIHJlcXVpcmUgYSBoaWdoZXIgZGVncmVlXG5vZiBjb21wbGV4aXR5IGluIHByb3RvY29sIGFuZCBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VzLCBzb21lIG9mIHdoaWNoIG1heSBlaXRoZXJcbm92ZXJsYXAgb3IgY29uZmxpY3Qgd2l0aCB0aGUgdXBjb21pbmcgaW50cm9kdWN0aW9uIG9mICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9kb2NzL3JmYy9yZmMtMDEzLWFiY2klMkIlMkIubWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQUJDSSsrIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlIHZhcmlvdXMgYXBwcm9hY2hlcyBhbmQgcHJvcG9zYWxzLCBwbGVhc2Ugc2VlIHRoZVxuIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvZGlzY3Vzc2lvbnMvNjI5NSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJtZW1wb29sIGRpc2N1c3Npb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwcmlvci1hcnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaW9yLWFydCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJpb3IgQXJ0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImV0aGVyZXVtIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNldGhlcmV1bSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRXRoZXJldW0iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBFdGhlcmV1bSBtZW1wb29sLCBzcGVjaWZpY2FsbHkgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJHZXRoIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIixcbmNvbnRhaW5zIGEgbWVtcG9vbCwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIqVHhQb29sIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB0aGF0IGNvbnRhaW5zIHZhcmlvdXMgbWFwcGluZ3MgaW5kZXhlZCBieSBhY2NvdW50LFxuc3VjaCBhcyBhICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGVuZGluZyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3aGljaCBjb250YWlucyBhbGwgcHJvY2Vzc2FibGUgdHJhbnNhY3Rpb25zIGZvciBhY2NvdW50c1xucHJpb3JpdGl6ZWQgYnkgbm9uY2UuIEl0IGFsc28gY29udGFpbnMgYSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInF1ZXVlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdoaWNoIGlzIHRoZSBleGFjdCBzYW1lIG1hcHBpbmdcbmV4Y2VwdCBpdCBjb250YWlucyBub3QgY3VycmVudGx5IHByb2Nlc3NhYmxlIHRyYW5zYWN0aW9ucy4gVGhlIG1lbXBvb2wgYWxzb1xuY29udGFpbnMgYSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByaWNlZCIpXSksCiAgICAgICAgX3ZtLl92KCIgaW5kZXggb2YgdHlwZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIip0eFByaWNlZExpc3QiKV0pLAogICAgICAgIF92bS5fdigiIHRoYXQgaXMgYSBwcmlvcml0eSBxdWV1ZSBiYXNlZFxub24gdHJhbnNhY3Rpb24gcHJpY2UuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImRpZW0iIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RpZW0iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRGllbSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vZGllbS9kaWVtL2Jsb2IvbWFzdGVyL21lbXBvb2wvUkVBRE1FLm1kI2ltcGxlbWVudGF0aW9uLWRldGFpbHMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiRGllbSBtZW1wb29sIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5jb250YWlucyBhIHNpbWlsYXIgYXBwcm9hY2ggdG8gdGhlIG9uZSB3ZSBwcm9wb3NlLiBTcGVjaWZpY2FsbHksIHRoZSBEaWVtIG1lbXBvb2xcbmNvbnRhaW5zIGEgbWFwcGluZyBmcm9tICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQWNjb3VudDpbXVR4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBPbiB0b3Agb2YgdGhpcyBwcmltYXJ5IG1hcHBpbmcgZnJvbSBhY2NvdW50XG50byBhIGxpc3Qgb2YgdHJhbnNhY3Rpb25zLCBhcmUgdmFyaW91cyBpbmRleGVzIHVzZWQgdG8gcGVyZm9ybSBjZXJ0YWluIGFjdGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgbWFpbiBpbmRleCwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQcmlvcml0eUluZGV4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBpcyBhbiBvcmRlcmVkIHF1ZXVlIG9mIHRyYW5zYWN0aW9ucyB0aGF0IGFyZVxu4oCcY29uc2Vuc3VzLXJlYWR54oCdIChpLmUuLCB0aGV5IGhhdmUgYSBzZXF1ZW5jZSBudW1iZXIgd2hpY2ggaXMgc2VxdWVudGlhbCB0byB0aGVcbmN1cnJlbnQgc2VxdWVuY2UgbnVtYmVyIGZvciB0aGUgYWNjb3VudCkuIFRoaXMgcXVldWUgaXMgb3JkZXJlZCBieSBnYXMgcHJpY2Ugc29cbnRoYXQgaWYgYSBjbGllbnQgaXMgd2lsbGluZyB0byBwYXkgbW9yZSAodGhhbiBvdGhlciBjbGllbnRzKSBwZXIgdW5pdCBvZlxuZXhlY3V0aW9uLCB0aGVuIHRoZXkgY2FuIGVudGVyIGNvbnNlbnN1cyBlYXJsaWVyLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZWNpc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGVjaXNpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlY2lzaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGluY29ycG9yYXRlIGEgcHJpb3JpdHktYmFzZWQgZmxleGlibGUgYW5kIHBlcmZvcm1hbnQgbWVtcG9vbCBpbiBUZW5kZXJtaW50IENvcmUsXG53ZSB3aWxsIGludHJvZHVjZSBuZXcgZmllbGRzLCAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByaW9yaXR5IildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZW5kZXIiKV0pLAogICAgICAgIF92bS5fdigiLCBpbnRvIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlc3BvbnNlQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KCJcbnR5cGUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJXZSB3aWxsIGludHJvZHVjZSBhIG5ldyB2ZXJzaW9uZWQgbWVtcG9vbCByZWFjdG9yLCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYxIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGFuZCBhc3N1bWUgYW4gaW1wbGljaXRcbnZlcnNpb24gb2YgdGhlIGN1cnJlbnQgbWVtcG9vbCByZWFjdG9yIGFzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidjAiKV0pLAogICAgICAgIF92bS5fdigiLiBJbiB0aGUgbmV3ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidjEiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbWVtcG9vbCByZWFjdG9yLFxud2UgbGFyZ2VseSBrZWVwIHRoZSBmdW5jdGlvbmFsaXR5IHRoZSBzYW1lIGFzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidjAiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZXhjZXB0IHdlIGF1Z21lbnQgdGhlIHVuZGVybHlpbmdcbmRhdGEgc3RydWN0dXJlcy4gU3BlY2lmaWNhbGx5LCB3ZSBrZWVwIGEgbWFwcGluZyBvZiBzZW5kZXJzIHRvIHRyYW5zYWN0aW9uIG9iamVjdHMuXG5PbiB0b3Agb2YgdGhpcyBtYXBwaW5nLCB3ZSBpbmRleCB0cmFuc2FjdGlvbnMgdG8gcHJvdmlkZSB0aGUgYWJpbGl0eSB0byBlZmZpY2llbnRseVxuZ29zc2lwIGFuZCByZWFwIHRyYW5zYWN0aW9ucyBieSBwcmlvcml0eS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGV0YWlsZWQtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXRhaWxlZC1kZXNpZ24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERldGFpbGVkIERlc2lnbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjaGVja3R4IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjaGVja3R4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENoZWNrVHgiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldlIGludHJvZHVjZSB0aGUgZm9sbG93aW5nIG5ldyBmaWVsZHMgaW50byB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSZXNwb25zZUNoZWNrVHgiKV0pLAogICAgICAgIF92bS5fdigiIHR5cGU6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogImRpZmYiLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiYldWemMyRm5aU0JTWlhOd2IyNXpaVU5vWldOclZIZ2dld29nSUhWcGJuUXpNaUFnSUNBZ0lDQWdJR052WkdVZ0lDQWdJQ0FnUFNBeE93b2dJR0o1ZEdWeklDQWdJQ0FnSUNBZ0lHUmhkR0VnSUNBZ0lDQWdQU0F5T3dvZ0lITjBjbWx1WnlBZ0lDQWdJQ0FnSUd4dlp5QWdJQ0FnSUNBZ1BTQXpPeUFnTHk4Z2JtOXVaR1YwWlhKdGFXNXBjM1JwWXdvZ0lITjBjbWx1WnlBZ0lDQWdJQ0FnSUdsdVptOGdJQ0FnSUNBZ1BTQTBPeUFnTHk4Z2JtOXVaR1YwWlhKdGFXNXBjM1JwWXdvZ0lHbHVkRFkwSUNBZ0lDQWdJQ0FnSUdkaGMxOTNZVzUwWldRZ1BTQTFJRnRxYzI5dVgyNWhiV1VnUFNBbWNYVnZkRHRuWVhOZmQyRnVkR1ZrSm5GMWIzUTdYVHNLSUNCcGJuUTJOQ0FnSUNBZ0lDQWdJQ0JuWVhOZmRYTmxaQ0FnSUQwZ05pQmJhbk52Ymw5dVlXMWxJRDBnSm5GMWIzUTdaMkZ6WDNWelpXUW1jWFZ2ZER0ZE93b2dJSEpsY0dWaGRHVmtJRVYyWlc1MElHVjJaVzUwY3lBZ0lDQWdQU0EzSUZzb1oyOW5iM0J5YjNSdkxtNTFiR3hoWW14bEtTQTlJR1poYkhObExDQW9aMjluYjNCeWIzUnZMbXB6YjI1MFlXY3BJRDBnSm5GMWIzUTdaWFpsYm5SekxHOXRhWFJsYlhCMGVTWnhkVzkwTzEwN0NpQWdjM1J5YVc1bklDQWdJQ0FnSUNBZ1kyOWtaWE53WVdObElDQTlJRGc3Q2lzZ2FXNTBOalFnSUNBZ0lDQWdJQ0FnY0hKcGIzSnBkSGtnSUNBOUlEazdDaXNnYzNSeWFXNW5JQ0FnSUNBZ0lDQWdjMlZ1WkdWeUlDQWdJQ0E5SURFd093cDlDZz09IiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJdCBpcyBlbnRpcmVseSB1cCB0aGUgYXBwbGljYXRpb24gaW4gZGV0ZXJtaW5pbmcgaG93IHRoZXNlIGZpZWxkcyBhcmUgcG9wdWxhdGVkXG5hbmQgd2l0aCB3aGF0IHZhbHVlcywgZS5nLiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZW5kZXIiKV0pLAogICAgICAgIF92bS5fdigiIGNvdWxkIGJlIHRoZSBzaWduZXIgYW5kIGZlZSBwYXllclxub2YgdGhlIHRyYW5zYWN0aW9uLCB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcmlvcml0eSIpXSksCiAgICAgICAgX3ZtLl92KCIgY291bGQgYmUgdGhlIGN1bXVsYXRpdmUgc3VtIG9mIHRoZSBmZWUocykuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPbmx5ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VuZGVyIildKSwKICAgICAgICBfdm0uX3YoIiBpcyByZXF1aXJlZCwgd2hpbGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcmlvcml0eSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjYW4gYmUgb21pdHRlZCB3aGljaCB3b3VsZCByZXN1bHQgaW5cbnVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHplcm8uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1lbXBvb2wiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21lbXBvb2wiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTWVtcG9vbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZXhpc3RpbmcgY29uY3VycmVudC1zYWZlIGxpbmtlZC1saXN0IHdpbGwgYmUgcmVwbGFjZWQgYnkgYSB0aHJlYWQtc2FmZSBtYXBcbm9mICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPHNlbmRlcjoqVHg+IildKSwKICAgICAgICBfdm0uX3YoIiwgaS5lIGEgbWFwcGluZyBmcm9tICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VuZGVyIildKSwKICAgICAgICBfdm0uX3YoIiB0byBhIHNpbmdsZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipUeCIpXSksCiAgICAgICAgX3ZtLl92KCIgb2JqZWN0LCB3aGVyZVxuZWFjaCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIipUeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyB0aGUgbmV4dCB2YWxpZCBhbmQgcHJvY2Vzc2FibGUgdHJhbnNhY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZW5kZXIiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbiB0b3Agb2YgdGhpcyBtYXBwaW5nLCB3ZSBpbmRleCBhbGwgdHJhbnNhY3Rpb25zIGJ5IHByaW9yaXR5IHVzaW5nIGEgdGhyZWFkLXNhZmVcbnByaW9yaXR5IHF1ZXVlLCBpLmUuIGEgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01pbi1tYXhfaGVhcCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJtYXggaGVhcCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cbldoZW4gYSBwcm9wb3NlciBpcyByZWFkeSB0byBzZWxlY3QgdHJhbnNhY3Rpb25zIGZvciB0aGUgbmV4dCBibG9jayBwcm9wb3NhbCxcbnRyYW5zYWN0aW9ucyBhcmUgc2VsZWN0ZWQgZnJvbSB0aGlzIHByaW9yaXR5IGluZGV4IGJ5IGhpZ2hlc3QgcHJpb3JpdHkgb3JkZXIuXG5XaGVuIGEgdHJhbnNhY3Rpb24gaXMgc2VsZWN0ZWQgYW5kIHJlYXBlZCwgaXQgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgaW5kZXggYW5kXG5mcm9tIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjxzZW5kZXI6KlR4PiIpXSksCiAgICAgICAgX3ZtLl92KCIgbWFwcGluZy4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldlIGRlZmluZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlR4IildKSwKICAgICAgICBfdm0uX3YoIiBhcyB0aGUgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJkSGx3WlNCVWVDQnpkSEoxWTNRZ2V3b2dJQzh2SUZSNElISmxjSEpsYzJWdWRITWdkR2hsSUhKaGR5QmlhVzVoY25rZ2RISmhibk5oWTNScGIyNGdaR0YwWVM0S0lDQlVlQ0JiWFdKNWRHVUtDaUFnTHk4Z1VISnBiM0pwZEhrZ1pHVm1hVzVsY3lCMGFHVWdkSEpoYm5OaFkzUnBiMjRuY3lCd2NtbHZjbWwwZVNCaGN5QnpjR1ZqYVdacFpXUWdZbmtnZEdobElHRndjR3hwWTJGMGFXOXVDaUFnTHk4Z2FXNGdkR2hsSUZKbGMzQnZibk5sUTJobFkydFVlQ0J5WlhOd2IyNXpaUzRLSUNCUWNtbHZjbWwwZVNCcGJuUTJOQW9LSUNBdkx5QlRaVzVrWlhJZ1pHVm1hVzVsY3lCMGFHVWdkSEpoYm5OaFkzUnBiMjRuY3lCelpXNWtaWElnWVhNZ2MzQmxZMmxtYVdWa0lHSjVJSFJvWlNCaGNIQnNhV05oZEdsdmJpQnBiZ29nSUM4dklIUm9aU0JTWlhOd2IyNXpaVU5vWldOclZIZ2djbVZ6Y0c5dWMyVXVDaUFnVTJWdVpHVnlJSE4wY21sdVp3b0tJQ0F2THlCSmJtUmxlQ0JrWldacGJtVnpJSFJvWlNCamRYSnlaVzUwSUdsdVpHVjRJR2x1SUhSb1pTQndjbWx2Y21sMGVTQnhkV1YxWlNCcGJtUmxlQzRnVG05MFpTd2dhV1lLSUNBdkx5QnRkV3gwYVhCc1pTQlVlQ0JwYm1SbGVHVnpJR0Z5WlNCdVpXVmtaV1FzSUhSb2FYTWdabWxsYkdRZ2QybHNiQ0JpWlNCeVpXMXZkbVZrSUdGdVpDQmxZV05vSUZSNENpQWdMeThnYVc1a1pYZ2dkMmxzYkNCb1lYWmxJR2wwY3lCdmQyNGdkM0poY0hCbFpDQlVlQ0IwZVhCbExnb2dJRWx1WkdWNElHbHVkQXA5Q2c9PSIsCiAgICAgICAgfSwKICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZXZpY3Rpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2V2aWN0aW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFdmljdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVXBvbiBzdWNjZXNzZnVsbHkgZXhlY3V0aW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KCIgZm9yIGEgbmV3ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYW5kIHRoZSBtZW1wb29sIGlzIGN1cnJlbnRseVxuZnVsbCwgd2UgbXVzdCBjaGVjayBpZiB0aGVyZSBleGlzdHMgYSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlR4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG9mIGxvd2VyIHByaW9yaXR5IHRoYXQgY2FuIGJlIGV2aWN0ZWRcbnRvIG1ha2Ugcm9vbSBmb3IgdGhlIG5ldyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlR4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdpdGggaGlnaGVyIHByaW9yaXR5IGFuZCB3aXRoIHN1ZmZpY2llbnQgc2l6ZVxuY2FwYWNpdHkgbGVmdC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIklmIHN1Y2ggYSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlR4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGV4aXN0cywgd2UgZmluZCBpdCBieSBvYnRhaW5pbmcgYSByZWFkIGxvY2sgYW5kIHNvcnRpbmcgdGhlXG5wcmlvcml0eSBxdWV1ZSBpbmRleC4gT25jZSBzb3J0ZWQsIHdlIGZpbmQgdGhlIGZpcnN0ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHgiKV0pLAogICAgICAgIF92bS5fdigiIHdpdGggbG93ZXIgcHJpb3JpdHkgYW5kXG5zaXplIHN1Y2ggdGhhdCB0aGUgbmV3ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHgiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd291bGQgZml0IHdpdGhpbiB0aGUgbWVtcG9vbCdzIHNpemUgbGltaXQuIFdlIHRoZW5cbnJlbW92ZSB0aGlzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHgiKV0pLAogICAgICAgIF92bS5fdigiIGZyb20gdGhlIHByaW9yaXR5IHF1ZXVlIGluZGV4IGFzIHdlbGwgYXMgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPHNlbmRlcjoqVHg+IildKSwKICAgICAgICBfdm0uX3YoIlxubWFwcGluZy4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoaXMgd2lsbCByZXF1aXJlIGFkZGl0aW9uYWwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJPKG4pIildKSwKICAgICAgICBfdm0uX3YoIiBzcGFjZSBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJPKG4qbG9nKG4pKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBydW50aW1lIGNvbXBsZXhpdHkuIE5vdGUgdGhhdCB0aGUgc3BhY2UgY29tcGxleGl0eSBkb2VzIG5vdCBkZXBlbmQgb24gdGhlIHNpemUgb2YgdGhlIHR4LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJnb3NzaXBpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dvc3NpcGluZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgR29zc2lwaW5nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIGtlZXAgdGhlIGV4aXN0aW5nIHRocmVhZC1zYWZlIGxpbmtlZCBsaXN0IGFzIGFuIGFkZGl0aW9uYWwgaW5kZXguIFVzaW5nIHRoaXNcbmluZGV4LCB3ZSBjYW4gZWZmaWNpZW50bHkgZ29zc2lwIHRyYW5zYWN0aW9ucyBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgdGhleSBhcmVcbmdvc3NpcGVkIG5vdyAoRklGTykuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkdvc3NpcGluZyB0cmFuc2FjdGlvbnMgd2lsbCBub3QgcmVxdWlyZSBsb2NraW5nIGFueSBvdGhlciBpbmRleGVzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwZXJmb3JtYW5jZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGVyZm9ybWFuY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBlcmZvcm1hbmNlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBlcmZvcm1hbmNlIHNob3VsZCBsYXJnZWx5IHJlbWFpbiB1bmFmZmVjdGVkIGFwYXJ0IGZyb20gdGhlIHNwYWNlIG92ZXJoZWFkIG9mXG5rZWVwaW5nIGFuIGFkZGl0aW9uYWwgcHJpb3JpdHkgcXVldWUgaW5kZXggYW5kIHRoZSBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gZXZpY3RcbnRyYW5zYWN0aW9ucyBmcm9tIHRoZSBwcmlvcml0eSBxdWV1ZSBpbmRleC4gVGhlcmUgc2hvdWxkIGJlIG5vIHJlYWRzIHdoaWNoXG5ibG9jayB3cml0ZXMgb24gYW55IGluZGV4IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZ1dHVyZS1pbXByb3ZlbWVudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Z1dHVyZS1pbXByb3ZlbWVudHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnV0dXJlIEltcHJvdmVtZW50cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBhcmUgYSBmZXcgY29uc2lkZXJhYmxlIHdheXMgaW4gd2hpY2ggdGhlIHByb3Bvc2VkIGRlc2lnbiBjYW4gYmUgaW1wcm92ZWQgb3JcbmV4cGFuZGVkIHVwb24uIE5hbWVseSwgdHJhbnNhY3Rpb24gZ29zc2lwaW5nIGFuZCBmb3IgdGhlIGFiaWxpdHkgdG8gc3VwcG9ydFxubXVsdGlwbGUgdHJhbnNhY3Rpb25zIGZyb20gdGhlIHNhbWUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZW5kZXIiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaXRoIHJlZ2FyZHMgdG8gdHJhbnNhY3Rpb24gZ29zc2lwaW5nLCB3ZSBuZWVkIGVtcGlyaWNhbGx5IHZhbGlkYXRlIHdoZXRoZXIgd2Vcbm5lZWQgdG8gZ29zc2lwIGJ5IHByaW9yaXR5LiBJbiBhZGRpdGlvbiwgdGhlIGN1cnJlbnQgbWV0aG9kIG9mIGdvc3NpcGluZyBtYXkgbm90XG5iZSB0aGUgbW9zdCBlZmZpY2llbnQuIFNwZWNpZmljYWxseSwgYnJvYWRjYXN0aW5nIGFsbCB0aGUgdHJhbnNhY3Rpb25zIGEgbm9kZVxuaGFzIGluIGl0J3MgbWVtcG9vbCB0byBpdCdzIHBlZXJzLiBSYXRoZXIsIHdlIHNob3VsZCBleHBsb3JlIGZvciB0aGUgYWJpbGl0eSB0b1xuZ29zc2lwIHRyYW5zYWN0aW9ucyBvbiBhIHJlcXVlc3QvcmVzcG9uc2UgYmFzaXMgc2ltaWxhciB0byBFdGhlcmV1bSBhbmQgb3RoZXJcbnByb3RvY29scy4gTm90IG9ubHkgZG9lcyB0aGlzIHJlZHVjZSBiYW5kd2lkdGggYW5kIGNvbXBsZXhpdHksIGJ1dCBhbHNvIGFsbG93c1xuZm9yIHVzIHRvIGV4cGxvcmUgZ29zc2lwaW5nIGJ5IHByaW9yaXR5IG9yIG90aGVyIGRpbWVuc2lvbnMgbW9yZSBlZmZpY2llbnRseS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFsbG93aW5nIGZvciBtdWx0aXBsZSB0cmFuc2FjdGlvbnMgZnJvbSB0aGUgc2FtZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlbmRlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBpbXBvcnRhbnQgYW5kIHdpbGxcbm1vc3QgbGlrZWx5IGJlIGEgbmVlZGVkIGZlYXR1cmUgaW4gdGhlIGZ1dHVyZSBkZXZlbG9wbWVudCBvZiB0aGUgbWVtcG9vbCwgYnV0IGZvclxubm93IGl0IHN1ZmZpY2VzIHRvIGhhdmUgdGhlIHByZWxpbWluYXJ5IGRlc2lnbiBhZ3JlZWQgdXBvbi4gSGF2aW5nIHRoZSBhYmlsaXR5XG50byBzdXBwb3J0IG11bHRpcGxlIHRyYW5zYWN0aW9ucyBwZXIgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZW5kZXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2lsbCByZXF1aXJlIGNhcmVmdWwgdGhvdWdodCB3aXRoXG5yZWdhcmRzIHRvIHRoZSBpbnRlcnBsYXkgb2YgdGhlIGNvcnJlc3BvbmRpbmcgQUJDSSBhcHBsaWNhdGlvbi4gUmVnYXJkbGVzcywgdGhlXG5wcm9wb3NlZCBkZXNpZ24gc2hvdWxkIGFsbG93IGZvciBhZGFwdGF0aW9ucyB0byBzdXBwb3J0IHRoaXMgZmVhdHVyZSBpbiBhXG5ub24tY29udGVudGlvdXMgYW5kIGJhY2t3YXJkcyBjb21wYXRpYmxlIG1hbm5lci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2VxdWVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zZXF1ZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnNlcXVlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwb3NpdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9zaXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBvc2l0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRyYW5zYWN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBwcmlvcml0aXplZCBieSB0aGUgYXBwbGljYXRpb24uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmVnYXRpdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25lZ2F0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOZWdhdGl2ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkluY3JlYXNlZCBzaXplIG9mIHRoZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmVzcG9uc2VDaGVja1R4IildKSwKICAgICAgICAgIF92bS5fdigiIFByb3RvY29sIEJ1ZmZlciB0eXBlLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2F1c2FsIG9yZGVyaW5nIGlzIE5PVCBtYWludGFpbmVkLlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiSXQgaXMgcG9zc2libGUgdGhhdCBjZXJ0YWluIHRyYW5zYWN0aW9ucyBicm9hZGNhc3RlZCBpbiBhIHBhcnRpY3VsYXIgb3JkZXIgbWF5XG5wYXNzICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hlY2tUeCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBidXQgbm90IGVuZCB1cCBiZWluZyBjb21taXR0ZWQgaW4gYSBibG9jayBiZWNhdXNlIHRoZXkgZmFpbFxuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDaGVja1R4IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBsYXRlci4gZS5nLiBDb25zaWRlciBUeCIpLAogICAgICAgICAgICAgIF9jKCJzdWIiLCBbX3ZtLl92KCIxIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiB0aGF0IHNlbmRzIGZ1bmRzIGZyb20gZXhpc3RpbmdcbmFjY291bnQgQWxpY2UgdG8gYSAiKSwKICAgICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJuZXciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFjY291bnQgQm9iIHdpdGggcHJpb3JpdHkgUCIpLAogICAgICAgICAgICAgIF9jKCJzdWIiLCBbX3ZtLl92KCIxIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgdGhlbiBsYXRlclxuQm9iJ3MgIiksCiAgICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigibmV3IildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhY2NvdW50IHNlbmRzIGZ1bmRzIGJhY2sgdG8gQWxpY2UgaW4gVHgiKSwKICAgICAgICAgICAgICBfYygic3ViIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2l0aCBQIiksCiAgICAgICAgICAgICAgX2MoInN1YiIsIFtfdm0uX3YoIjIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLFxuc3VjaCB0aGF0IFAiKSwKICAgICAgICAgICAgICBfYygic3ViIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgPiBQIiksCiAgICAgICAgICAgICAgX2MoInN1YiIsIFtfdm0uX3YoIjEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIuIElmIGV4ZWN1dGVkIGluIHRoaXMgb3JkZXIsIGJvdGhcbnRyYW5zYWN0aW9ucyB3aWxsIHBhc3MgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDaGVja1R4IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiLiBIb3dldmVyLCB3aGVuIGEgcHJvcG9zZXIgaXMgcmVhZHkgdG8gc2VsZWN0XG50cmFuc2FjdGlvbnMgZm9yIHRoZSBuZXh0IGJsb2NrIHByb3Bvc2FsLCB0aGV5IHdpbGwgc2VsZWN0IFR4IgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInN1YiIsIFtfdm0uX3YoIjIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGJlZm9yZVxuVHgiKSwKICAgICAgICAgICAgICBfYygic3ViIiwgW192bS5fdigiMSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kIHRodXMgVHgiKSwKICAgICAgICAgICAgICBfYygic3ViIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2lsbCAiKSwKICAgICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJmYWlsIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBiZWNhdXNlIFR4IiksCiAgICAgICAgICAgICAgX2MoInN1YiIsIFtfdm0uX3YoIjEiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG11c3RcbmJlIGV4ZWN1dGVkIGZpcnN0LiBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgYSAiKSwKICAgICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjYXVzYWwgb3JkZXJpbmciKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLFxuVHgiKSwKICAgICAgICAgICAgICBfYygic3ViIiwgW192bS5fdigiMSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIg4p6dIFR4IiksCiAgICAgICAgICAgICAgX2MoInN1YiIsIFtfdm0uX3YoIjIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICcuIFRoZXNlIHR5cGVzIG9mIHNpdHVhdGlvbnMgc2hvdWxkIGJlIHJhcmUgYXNcbm1vc3QgdHJhbnNhY3Rpb25zIGFyZSBub3QgY2F1c2FsbHkgb3JkZXJlZCBhbmQgY2FuIGJlIGNpcmN1bXZlbnRlZCBieSBzaW1wbHlcbnRyeWluZyBhZ2FpbiBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUgb3IgYnkgZW5zdXJpbmcgdGhlICJjaGlsZCIgcHJpb3JpdHkgaXNcbmxvd2VyIHRoYW4gdGhlICJwYXJlbnQiIHByaW9yaXR5LiBJbiBvdGhlciB3b3JkcywgaWYgcGFyZW50cyBhbHdheXMgaGF2ZVxucHJpb3JpZXMgdGhhdCBhcmUgaGlnaGVyIHRoYW4gdGhlaXIgY2hpbGRyZW4sIHRoZW4gdGhlIG5ldyBtZW1wb29sIGRlc2lnbiB3aWxsXG5tYWludGFpbiBjYXVzYWwgb3JkZXJpbmcuJwogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkEgdHJhbnNhY3Rpb24gdGhhdCBwYXNzZWQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNoZWNrVHgiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFuZCBlbnRlcmVkIHRoZSBtZW1wb29sIGNhbiBsYXRlciBiZSBldmljdGVkXG5hdCBhIGZ1dHVyZSBwb2ludCBpbiB0aW1lIGlmIGEgaGlnaGVyIHByaW9yaXR5IHRyYW5zYWN0aW9uIGVudGVyZWQgd2hpbGUgdGhlXG5tZW1wb29sIHdhcyBmdWxsLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZmVyZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9yZmMvcmZjLTAxMy1hYmNpJTJCJTJCLm1kIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJBQkNJKysiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Rpc2N1c3Npb25zLzYyOTUiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIk1lbXBvb2wgRGlzY3Vzc2lvbiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}