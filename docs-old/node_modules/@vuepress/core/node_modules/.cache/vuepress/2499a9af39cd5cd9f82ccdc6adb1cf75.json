{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-023-semi-permanent-testnet.md?vue&type=template&id=3cb06d88&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-023-semi-permanent-testnet.md","mtime":1673295761290},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmZjLTAyMy1zZW1pLXBlcm1hbmVudC10ZXN0bmV0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZmMtMDIzLXNlbWktcGVybWFuZW50LXRlc3RuZXQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUkZDIDAyMzogU2VtaS1wZXJtYW5lbnQgVGVzdG5ldCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjItMDctMjg6IEluaXRpYWwgZHJhZnQgKEBtYXJrLXJ1c2hha29mZikiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjIwMjItMDctMjk6IFJlbnVtYmVyIHRvIDAyMywgbWlub3IgY2xhcmlmaWNhdGlvbnMgKEBtYXJrLXJ1c2hha29mZikiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhYnN0cmFjdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYWJzdHJhY3QiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFic3RyYWN0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgUkZDIGRpc2N1c3NlcyBhIGxvbmctbGl2ZWQgdGVzdG5ldCwgb3duZWQgYW5kIG9wZXJhdGVkIGJ5IHRoZSBUZW5kZXJtaW50IGVuZ2luZWVycy5cbkJ5IG93bmluZyBhbmQgb3BlcmF0aW5nIGEgcHJvZHVjdGlvbi1saWtlIHRlc3RuZXQsXG50aGUgdGVhbSB3aG8gZGV2ZWxvcHMgVGVuZGVybWludCBiZWNvbWVzIG1vcmUgY2FwYWJsZSBvZiBkaXNjb3ZlcmluZyBidWdzIHRoYXRcbm9ubHkgYXJpc2UgaW4gcHJvZHVjdGlvbi1saWtlIGVudmlyb25tZW50cy5cblRoZXkgYWxzbyBidWlsZCBleHBlcnRpc2UgaW4gb3BlcmF0aW5nIFRlbmRlcm1pbnQ7XG50aGlzIHdpbGwgaGVscCBndWlkZSB0aGUgZGV2ZWxvcG1lbnQgb2YgVGVuZGVybWludCB0b3dhcmRzIG9wZXJhdG9yLWZyaWVuZGx5IGRlc2lnbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFJGQyBkZXRhaWxzIGEgcm91Z2ggcm9hZG1hcCB0b3dhcmRzIGEgc2VtaS1wZXJtYW5lbnQgdGVzdG5ldCwgc29tZSBvZiB0aGUgY29uc2lkZXJlZCB0cmFkZW9mZnMsXG5hbmQgdGhlIGV4cGVjdGVkIG91dGNvbWVzIGZyb20gZm9sbG93aW5nIHRoaXMgcm9hZG1hcC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYmFja2dyb3VuZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYmFja2dyb3VuZCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmFja2dyb3VuZCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgYXV0aG9yJ3MgdW5kZXJzdGFuZGluZyAtLSB3aGljaCBpcyBsaW1pdGVkIGFzIGEgbmV3IGNvbnRyaWJ1dG9yIHRvIHRoZSBUZW5kZXJtaW50IHByb2plY3QgLS1cbmlzIHRoYXQgVGVuZGVybWludCBkZXZlbG9wbWVudCBoYXMgYmVlbiBsYXJnZWx5IHRyZWF0ZWQgYXMgYSBsaWJyYXJ5IGZvciBvdGhlciBwcm9qZWN0cyB0byBjb25zdW1lLlxuT2YgY291cnNlIGVmZm9ydCBoYXMgYmVlbiBzcGVudCBvbiB1bml0IHRlc3RzLCBlbmQtdG8tZW5kIHRlc3RzLCBhbmQgaW50ZWdyYXRpb24gdGVzdHMuXG5CdXQgd2hldGhlciBkZXZlbG9waW5nIGEgbGlicmFyeSBvciBhbiBhcHBsaWNhdGlvbixcbnRoZXJlIGlzIG5vIHN1YnN0aXR1dGUgZm9yIHB1dHRpbmcgdGhlIHNvZnR3YXJlIHVuZGVyIGEgcHJvZHVjdGlvbi1saWtlIGxvYWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0ZpcnN0LCB0aGVyZSBhcmUgY2xhc3NlcyBvZiBidWdzIHRoYXQgYXJlIHVucmVhbGlzdGljIHRvIGRpc2NvdmVyIGluIGVudmlyb25tZW50c1xudGhhdCBkbyBub3QgcmVzZW1ibGUgcHJvZHVjdGlvbi5cbkJ1dCBwZXJoYXBzIG1vcmUgaW1wb3J0YW50bHksIHRoZXJlIGFyZSAib3BlcmF0aW9uYWwgZmVhdHVyZXMiIHRoYXQgYXJlIGJlc3QgZGVzaWduZWRcbmJ5IHRoZSBhdXRob3JzIG9mIGEgZ2l2ZW4gcGllY2Ugb2Ygc29mdHdhcmUuXG5Gb3IgaW5zdGFuY2UsIGRvZXMgdGhlIHNvZnR3YXJlIGhhdmUgc3VmZmljaWVudCBvYnNlcnZhYmlsaXR5IGJ1aWx0LWluP1xuQXJlIHRoZSByZXBvcnRlZCBtZXRyaWNzIHVzZWZ1bD9cbkFyZSB0aGUgbG9nIG1lc3NhZ2VzIGNsZWFyIGFuZCBzdWZmaWNpZW50bHkgZGV0YWlsZWQsIHdpdGhvdXQgYmVpbmcgdG9vIG5vaXN5PycKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGdXJ0aGVybW9yZSwgaWYgdGhlIGxpYnJhcnkgYXV0aG9ycyBhcmUgbm90IG9ubHkgYnVpbGRpbmcgLS1cbmJ1dCBhbHNvIG1haW50YWluaW5nIGFuZCBvcGVyYXRpbmcgLS0gYW4gYXBwbGljYXRpb24gYnVpbHQgb24gdG9wIG9mIHRoZWlyIGxpYnJhcnksXG50aGUgYXV0aG9ycyB3aWxsIGhhdmUgYSBncmVhdGx5IGluY3JlYXNlZCBjb25maWRlbmNlIHRoYXQgdGhlaXIgbGlicmFyeSdzIEFQSVxuaXMgYXBwcm9wcmlhdGUgZm9yIG90aGVyIGFwcGxpY2F0aW9uIGF1dGhvcnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uY2UgdGhlIGRlY2lzaW9uIGhhcyBiZWVuIG1hZGUgdG8gcnVuIGFuZCBvcGVyYXRlIGEgc2VydmljZSxcbm9uZSBvZiB0aGUgbmV4dCBzdHJhdGVnaWMgcXVlc3Rpb25zIGlzIHRoYXQgb2YgZGVwbG95aW5nIHNhaWQgc2VydmljZS5cblRoZSBhdXRob3Igc3Ryb25nbHkgaG9sZHMgdGhlIG9waW5pb24gdGhhdCwgd2hlbiBwb3NzaWJsZSxcbmEgY29udGludW91cyBkZWxpdmVyeSBtb2RlbCBvZmZlcnMgdGhlIG1vc3QgY29tcGVsbGluZyBzZXQgb2YgYWR2YW50YWdlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgY29kZSBvbiBhIHBhcnRpY3VsYXIgYnJhbmNoIChsaWtlbHkgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1haW4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1hc3RlciIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIpIGlzIGV4YWN0bHkgd2hhdCBpcyxcbm9yIHdoYXQgd2lsbCB2ZXJ5IHNvb24gYmUsIHJ1bm5pbmcgaW4gcHJvZHVjdGlvbiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlcmUgYXJlIG5vIG1hbnVhbCBzdGVwcyBpbnZvbHZlZCBpbiBkZXBsb3lpbmcgLS0gb3RoZXIgdGhhbiBtZXJnaW5nIHlvdXIgcHVsbCByZXF1ZXN0LFxud2hpY2ggeW91IGhhZCB0byBkbyBhbnl3YXkiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkEgYnVnIGRpc2NvdmVyZWQgaW4gcHJvZHVjdGlvbiBjYW4gYmUgcmFwaWRseSBjb25maXJtZWQgYXMgZml4ZWQgaW4gcHJvZHVjdGlvbiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHN1bW1hcnksIGlmIHRoZSB0ZW5kZXJtaW50IGF1dGhvcnMgYnVpbGQsIG1haW50YWluLCBhbmQgY29udGludW91c2x5IGRlbGl2ZXIgYW4gYXBwbGljYXRpb25cbmludGVuZGVkIHRvIHNlcnZlIGFzIGEgbG9uZy1saXZlZCB0ZXN0bmV0LCB0aGV5IHdpbGwgYmUgYWJsZSB0byBzdGF0ZSB3aXRoIGNvbmZpZGVuY2U6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldlIG9wZXJhdGUgdGhlIHNvZnR3YXJlIGluIGEgcHJvZHVjdGlvbi1saWtlIGVudmlyb25tZW50IGFuZCB3ZSBoYXZlIG9ic2VydmVkIGl0IHRvIGJlXG5zdGFibGUgYW5kIHBlcmZvcm1hbnQgdG8gb3VyIHJlcXVpcmVtZW50cyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2UgaGF2ZSBkaXNjb3ZlcmVkIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJlZm9yZSBhbnkgZXh0ZXJuYWwgcGFydGllcyBoYXZlIGNvbnN1bWVkIG91ciBzb2Z0d2FyZSxcbmFuZCB3ZSBoYXZlIGFkZHJlc3NlZCBzYWlkIGlzc3VlcyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2UgaGF2ZSBzdWNjZXNzZnVsbHkgdXNlZCB0aGUgb2JzZXJ2YWJpbGl0eSB0b29saW5nIGJ1aWx0IGludG8gb3VyIHNvZnR3YXJlXG4ocGVyaGFwcyBpbiBjb25qdW5jdGlvbiB3aXRoIG90aGVyIG9mZi10aGUtc2hlbGYgdG9vbGluZylcbnRvIGRpYWdub3NlIGFuZCBkZWJ1ZyBpc3N1ZXMgaW4gcHJvZHVjdGlvbiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2N1c3Npb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Rpc2N1c3Npb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpc2N1c3Npb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIERpc2N1c3Npb24gU2VjdGlvbiBwcm9wb3NlcyBhIHZhcmlldHkgb2YgYXNwZWN0cyBvZiBtYWludGFpbmluZyBhIHRlc3RuZXQgZm9yIFRlbmRlcm1pbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm51bWJlci1vZi10ZXN0bmV0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbnVtYmVyLW9mLXRlc3RuZXRzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE51bWJlciBvZiB0ZXN0bmV0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVyZSBzaG91bGQgcHJvYmFibHkgYmUgb25lIHRlc3RuZXQgcGVyIG1haW50YWluZWQgYnJhbmNoIG9mIFRlbmRlcm1pbnQsXG5pLmUuIG9uZSBmb3IgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWFpbiIpXSksCiAgICAgICAgX3ZtLl92KCIgYnJhbmNoXG5hbmQgb25lIHBlciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYwLk4ueCIpXSksCiAgICAgICAgX3ZtLl92KCIgYnJhbmNoIHRoYXQgdGhlIGF1dGhvcnMgbWFpbnRhaW4uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIG1heSBhbHNvIGV4aXN0IHRlc3RuZXRzIGZvciBsb25nLWxpdmVkIGZlYXR1cmUgYnJhbmNoZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIG1heSBldmVudHVhbGx5IGRpc2NvdmVyIHRoYXQgdGhlcmUgaXMgZ29vZCByZWFzb24gdG8gcnVuIG1vcmUgdGhhbiBvbmUgdGVzdG5ldCBmb3IgYSBicmFuY2gsXG5wZXJoYXBzIGR1ZSB0byBhIHNpZ25pZmljYW50IGNvbmZpZ3VyYXRpb24gdmFyaWF0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZXN0bmV0LWxpZmVjeWNsZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGVzdG5ldC1saWZlY3ljbGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGVzdG5ldCBsaWZlY3ljbGUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnVGhlIGRvY3VtZW50IGhhcyB1c2VkIHRoZSB0ZXJtcyAibG9uZy1saXZlZCIgYW5kICJzZW1pLXBlcm1hbmVudCIgc29tZXdoYXQgaW50ZXJjaGFuZ2VhYmx5LlxuVGhlIGludGVudCBvZiB0aGUgdGVzdG5ldCBiZWluZyBkaXNjdXNzZWQgaW4gdGhpcyBSRkMgaXMgdG8gZXhpc3QgaW5kZWZpbml0ZWx5O1xuYnV0IHRoZXJlIGlzIGEgcHJhY3RpY2FsIHVuZGVyc3RhbmRpbmcgdGhhdCB0aGVyZSB3aWxsIGJlIHRlc3RuZXQgaW5zdGFuY2VzXG53aGljaCB3aWxsIGJlIHJldGlyZWQgZHVlIHRvIGEgdmFyaWV0eSBvZiByZWFzb25zLlxuRm9yIGluc3RhbmNlLCBvbmNlIGEgcmVsZWFzZSBicmFuY2ggaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCxcbml0cyBjb3JyZXNwb25kaW5nIHRlc3RuZXQgc2hvdWxkIGJlIHRvcm4gZG93bi4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gZ2VuZXJhbCwgbmV3IGNvbW1pdHMgdG8gYnJhbmNoZXMgd2l0aCBjb3JyZXNwb25kaW5nIHRlc3RuZXRzXG5zaG91bGQgcmVzdWx0IGluIGFuIGluLXBsYWNlIHVwZ3JhZGUgb2YgYWxsIG5vZGVzIGluIHRoZSB0ZXN0bmV0XG53aXRob3V0IGFueSBkYXRhIGxvc3MgYW5kIHdpdGhvdXQgcmVxdWlyaW5nIG5ldyBjb25maWd1cmF0aW9uLlxuVGhlIG1lY2hhbmlzbSBmb3IgYWNoaWV2aW5nIHRoaXMgaXMgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhpcyBSRkMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhvd2V2ZXIsIGl0IGlzIGFsc28gZXhwZWN0ZWQgdGhhdCB0aGVyZSB3aWxsIGJlXG5icmVha2luZyBjaGFuZ2VzIGR1cmluZyB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibWFpbiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBicmFuY2guXG5Gb3IgaW5zdGFuY2UsIHN1cHBvc2UgdGhlcmUgaXMgYW4gdW5yZWxlYXNlZCBmZWF0dXJlIGludm9sdmluZyBzdG9yYWdlIG9uIGRpc2ssXG5hbmQgdGhlIGRldmVsb3BlcnMgbmVlZCB0byBjaGFuZ2UgdGhlIHN0b3JhZ2UgZm9ybWF0LlxuSXQgc2hvdWxkIGJlIGF0IHRoZSBkZXZlbG9wZXJzJyBkaXNjcmV0aW9uIHdoZXRoZXIgaXQgaXMgZmVhc2libGUgYW5kIHdvcnRod2hpbGVcbnRvIGludHJvZHVjZSBhbiBpbnRlcm1lZGlhdGUgY29tbWl0IHRoYXQgdHJhbnNsYXRlcyB0aGUgb2xkIGZvcm1hdCB0byB0aGUgbmV3IGZvcm1hdCxcbm9yIGlmIGl0IHdvdWxkIGJlIHByZWZlcmFibGUgdG8ganVzdCBkZXN0cm95IHRoZSB0ZXN0bmV0IGFuZCBzdGFydCBmcm9tIHNjcmF0Y2hcbndpdGhvdXQgYW55IGRhdGEgaW4gdGhlIG9sZCBmb3JtYXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpbWlsYXJseSwgaWYgYSBkZXZlbG9wZXIgaW5hZHZlcnRlbnRseSBwdXNoZWQgYSBicmVha2luZyBjaGFuZ2UgdG8gYW4gdW5yZWxlYXNlZCBmZWF0dXJlLFxudGhleSBhcmUgZnJlZSB0byBtYWtlIGEganVkZ2VtZW50IGNhbGwgYmV0d2VlbiByZXZlcnRpbmcgdGhlIGNoYW5nZSxcbmFkZGluZyBhIGNvbW1pdCB0byBhbGxvdyBhIGZvcndhcmQgbWlncmF0aW9uLFxub3Igc2ltcGx5IGZvcmNpbmcgdGhlIHRlc3RuZXQgdG8gcmVjcmVhdGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRlc3RuZXQtbWFpbnRlbmFuY2UtaW52ZXN0bWVudCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGVzdG5ldC1tYWludGVuYW5jZS1pbnZlc3RtZW50IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRlc3RuZXQgbWFpbnRlbmFuY2UgaW52ZXN0bWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGlsZSB0aGVyZSBpcyBjZXJ0YWlubHkgZW5naW5lZXJpbmcgZWZmb3J0IHJlcXVpcmVkIHRvIGJ1aWxkIHRoZSB0b29saW5nIGFuZCBpbmZyYXN0cnVjdHVyZVxudG8gZ2V0IHRoZSB0ZXN0bmV0cyB1cCBhbmQgcnVubmluZyxcbnRoZSBpbnRlbnQgaXMgdGhhdCBhIHJ1bm5pbmcgdGVzdG5ldCByZXF1aXJlcyBubyBtYW51YWwgdXBrZWVwIHVuZGVyIG5vcm1hbCBjb25kaXRpb25zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJdCBpcyBleHBlY3RlZCB0aGF0IGEgc3Vic2V0IG9mIHRoZSBUZW5kZXJtaW50IGVuZ2luZWVycyBhcmUgZmFtaWxpYXIgd2l0aCBhbmQgZW5nYWdlZCBpblxud3JpdGluZyB0aGUgc29mdHdhcmUgdG8gbWFpbnRhaW4gYW5kIGJ1aWxkIHRoZSB0ZXN0bmV0IGluZnJhc3RydWN0dXJlLFxuYnV0IHRoZSByZXN0IG9mIHRoZSB0ZWFtIHNob3VsZCBub3QgbmVlZCBhbnkgaW52b2x2ZW1lbnQgaW4gYXV0aG9yaW5nIHRoYXQgY29kZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHRlc3RuZXRzIHNob3VsZCBiZSBjb25maWd1cmVkIHRvIHNlbmQgbm90aWZpY2F0aW9ucyBmb3IgZXZlbnRzIHJlcXVpcmluZyB0cmlhZ2UsXG5zdWNoIGFzIGEgY2hhaW4gaGFsdCBvciBhIG5vZGUgT09NaW5nLlxuVGhlIHRpbWUgaW52ZXN0bWVudCBuZWNlc3NhcnkgdG8gYWRkcmVzcyB0aGUgdW5kZXJseWluZyBpc3N1ZXMgZm9yIHRob3NlIGtpbmQgb2YgZXZlbnRzXG5pcyB1bnByZWRpY3RhYmxlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBc2lkZSBmcm9tIHRyaWFnaW5nIGV4Y2VwdGlvbmFsIGV2ZW50cywgYW4gZW5naW5lZXIgbWF5IGNob29zZSB0byBzcGVuZCBzb21lIHRpbWVcbmNvbGxlY3RpbmcgbWV0cmljcyBvciBwcm9maWxlcyBmcm9tIHRlc3RuZXQgbm9kZXMgdG8gY2hlY2sgcGVyZm9ybWFuY2UgZGV0YWlsc1xuYmVmb3JlIGFuZCBhZnRlciBhIHBhcnRpY3VsYXIgY2hhbmdlO1xub3IgdGhleSBtYXkgaW5zcGVjdCBsb2dzIGFzc29jaWF0ZWQgd2l0aCBhbiBleHBlY3RlZCBiZWhhdmlvciBjaGFuZ2UuXG5CdXQgZHVyaW5nIGRheS10by1kYXkgd29yaywgZW5naW5lZXJzIGFyZSBub3QgZXhwZWN0ZWQgdG8gc3BlbmQgYW55IGNvbnNpZGVyYWJsZSB0aW1lXG5kaXJlY3RseSBpbnRlcmFjdGluZyB3aXRoIHRoZSB0ZXN0bmV0cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgd2UgZGlzY292ZXIgdGhhdCB0aGVyZSBhcmUgYW55IHJvdXRpbmUgYWN0aW9ucyBlbmdpbmVlcnMgbXVzdCB0YWtlIGFnYWluc3QgdGhlIHRlc3RuZXRcbnRoYXQgdGFrZSBhbnkgc3Vic3RhbnRpYWwgZm9jdXNlZCB0aW1lLFxudGhvc2UgYWN0aW9ucyBzaG91bGQgYmUgYXV0b21hdGVkIHRvIGEgb25lLWxpbmUgY29tbWFuZCBhcyBtdWNoIGFzIGlzIHJlYXNvbmFibGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRlc3RuZXQtbXZwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0ZXN0bmV0LW12cCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGVzdG5ldCBNVlAiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBtaW5pbXVtIHZpYWJsZSB0ZXN0bmV0IG1lZXRzIHRoaXMgc2V0IG9mIGZlYXR1cmVzOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgdGVzdG5ldCBzZWxmLXVwZGF0ZXMgZm9sbG93aW5nIGEgbmV3IGNvbW1pdCBwdXNoZWQgdG8gVGVuZGVybWludCdzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1haW4iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGJyYW5jaCBvbiBHaXRIdWJcbih0aGVyZSBhcmUgc29tZSBvbWl0dGVkIHN0ZXBzIGhlcmUsIHN1Y2ggYXMgQ0kgYnVpbGRpbmcgYXBwcm9wcmlhdGUgYmluYXJpZXMgYW5kXG5zb21laG93IG5vdGlmeWluZyB0aGUgdGVzdG5ldCB0aGF0IGEgbmV3IGJ1aWxkIGlzIGF2YWlsYWJsZSkiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSB0ZXN0bmV0IHJ1bnMgdGhlIFRlbmRlcm1pbnQgS1Ygc3RvcmUgZm9yIE1WUCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgdGVzdG5ldCBvcGVyYXRvcnMgYXJlIG5vdGlmaWVkIGlmOlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQW55IG5vZGUncyBwcm9jZXNzIGV4aXRzIGZvciBhbnkgcmVhc29uIG90aGVyIHRoYW4gYSByZXN0YXJ0IGZvciBhIG5ldyBiaW5hcnkiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkFueSBub2RlIHN0b3BzIHVwZGF0aW5nIGJsb2NrcywgYW5kIGJ5IGV4dGVuc2lvbiBpZiBhIGNoYWluIGhhbHQgb2NjdXJzIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiTm8gb3RoZXIgb2JzZXJ2YWJpbGl0eSB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIE1WUCIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIHRlc3RuZXQgaGFzIGEgbWluaW11bSBvZiAxIGZ1bGwgbm9kZSBhbmQgMyB2YWxpZGF0b3JzIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHRlc3RuZXQgaGFzIGEgcmVhc29uYWJseSBsb3csIGNvbnN0YW50IHRocm91Z2hwdXQgb2YgdHJhbnNhY3Rpb25zIC0tIHNheSAzMCB0eC9taW4gLS1cbmFuZCB0aGUgdGVzdG5ldCBvcGVyYXRvcnMgYXJlIG5vdGlmaWVkIGlmIHRoYXQgdGhyb3VnaHB1dCBkcm9wcyBiZWxvdyA3NSUgb2YgdGFyZ2V0XG5zdXN0YWluZWQgb3ZlciA1IG1pbnV0ZXMiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSB0ZXN0bmV0IG9ubHkgbmVlZHMgdG8gcnVuIGluIGEgc2luZ2xlIGRhdGFjZW50ZXIvY2xvdWQtcmVnaW9uIGZvciBNVlAsXG5pLmUuIHJ1bm5pbmcgaW4gbXVsdGlwbGUgZGF0YWNlbnRlcnMgaXMgb3V0IG9mIHNjb3BlIGZvciBNVlAiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSB0ZXN0bmV0IGlzIHJ1bm5pbmcgZGlyZWN0bHkgb24gVk1zIG9yIGNvbXB1dGUgaW5zdGFuY2VzO1xud2hpbGUgS3ViZXJuZXRlcyBvciBvdGhlciBvcmNoZXN0cmF0aW9uIGZyYW1ld29ya3MgbWF5IG9mZmVyIG1hbnkgc2lnbmlmaWNhbnQgYWR2YW50YWdlcyxcbnRoZSBUZW5kZXJtaW50IGVuZ2luZWVycyBzaG91bGQgbm90IGJlIHJlcXVpcmVkIHRvIGxlYXJuIHRob3NlIHRvb2xzIGluIG9yZGVyIHRvXG5wZXJmb3JtIGJhc2ljIGRlYnVnZ2luZyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRlc3RuZXQtbWVkaXVtLXRlcm0tZ29hbHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Rlc3RuZXQtbWVkaXVtLXRlcm0tZ29hbHMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGVzdG5ldCBtZWRpdW0tdGVybSBnb2FscyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbWVkaXVtLXRlcm0gZ29hbHMgYXJlIGludGVuZGVkIHRvIGJlIGFjaGlldmFibGUgd2l0aGluIHRoZSA2LTEyIG1vbnRoIHRpbWUgcmFuZ2VcbmZvbGxvd2luZyB0aGUgbGF1bmNoIG9mIE1WUC5cblRoZXNlIGdvYWxzIGNvdWxkIHJlYWxpc3RpY2FsbHkgYmUgcm9hZG1hcHBlZCBmb2xsb3dpbmcgdGhlIGxhdW5jaCBvZiB0aGUgTVZQIHRlc3RuZXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtYWluIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0ZXN0bmV0IGhhcyBtb3JlIHRoYW4gMjAgbm9kZXMgKGNvbXBsZXRlbHkgYXJiaXRyYXJ5IC0tIDV4IG1vcmUgdGhhbiAxKzMgYXQgTVZQKSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbiBhZGRpdGlvbiB0byB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1haW4iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRlc3RuZXQsXG50aGVyZSBpcyBhdCBsZWFzdCBvbmUgdGVzdG5ldCBhc3NvY2lhdGVkIHdpdGggb25lIHJlbGVhc2UgYnJhbmNoIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgdGVzdG5ldCBubyBsb25nZXIgaXMgc2ltcGx5IHJ1bm5pbmcgdGhlIFRlbmRlcm1pbnQgS1Ygc3RvcmU7XG5ub3cgaXQgaXMgYnVpbHQgb24gYSBtb3JlIGNvbXBsZXgsIGN1c3RvbSBhcHBsaWNhdGlvblxudGhhdCBkZWxpYmVyYXRlbHkgZXhlcmNpc2VzIGEgZ3JlYXRlciBwb3J0aW9uIG9mIHRoZSBUZW5kZXJtaW50IHN0YWNrIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdFYWNoIHRlc3RuZXQgaXMgc3ByZWFkIGFjcm9zcyBhdCBsZWFzdCB0d28gY2xvdWQgcHJvdmlkZXJzLFxuaW4gb3JkZXIgdG8gY29tbXVuaWNhdGUgb3ZlciBhIG5ldHdvcmsgbW9yZSBjbG9zZWx5IHJlc2VtYmxpbmcgdXNlIG9mIFRlbmRlcm1pbnQgaW4gInJlYWwiIGNoYWlucycKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnVGhlIG5vZGUgdXBkYXRlcyBoYXZlIHNvbWUgImppdHRlciIsXG53aXRoIHNvbWUgbm9kZXMgdXBkYXRpbmcgaW1tZWRpYXRlbHkgd2hlbiBhIG5ldyBidWlsZCBpcyBhdmFpbGFibGUsXG5hbmQgb3RoZXJzIGRlbGF5aW5nIHVwIHRvIHBlcmhhcHMgMzAtNjAgbWludXRlcycKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHRlYW0gaGFzIHB1Ymxpc2hlZCBzb21lIGZvcm0gb2YgZGFzaGJvYXJkcyB0aGF0IGhhdmUgc2VydmVkIHdlbGwgZm9yIGRlYnVnZ2luZyxcbndoaWNoIGV4dGVybmFsIHBhcnRpZXMgY2FuIGNvcHkvbW9kaWZ5IHRvIHRoZWlyIG5lZWRzXG4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoZSBkYXNoYm9hcmRzIG11c3QgaW5jbHVkZSBtZXRyaWNzIHB1Ymxpc2hlZCBieSBUZW5kZXJtaW50IG5vZGVzO1xudGhlcmUgc2hvdWxkIGJlIGJvdGggT1MtIG9yIHJ1bnRpbWUtbGV2ZWwgbWV0cmljcyBzdWNoIGFzIG1lbW9yeSBpbiB1c2UsXG5hbmQgYXBwbGljYXRpb24tbGV2ZWwgbWV0cmljcyByZWxhdGVkIHRvIHRoZSB1bmRlcmx5aW5nIGJsb2NrY2hhaW4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgJyJQdWJsaXNoZWQiIGluIHRoaXMgY29udGV4dCBpcyBtb3JlIGluIHRoZSBzcGlyaXQgb2YgInNoYXJlZCB3aXRoIHRoZSBjb21tdW5pdHkiLFxubm90ICJwcm9kdWNlZCBhIHN1cHBvcnRlZCBvcGVuIHNvdXJjZSB0b29sIiAtLVxudGhpcyBjb3VsZCBiZSBwdWJsaXNoZWQgdG8gR2l0SHViIHdpdGggYSB3YXJuaW5nIHRoYXQgbm8gc3VwcG9ydCBpcyBvZmZlcmVkLFxub3IgaXQgY291bGQgc2ltcGx5IGJlIGEgYmxvZyBwb3N0IGRldGFpbGluZyB3aGF0IGhhcyB3b3JrZWQgZm9yIHRoZSBUZW5kZXJtaW50IGRldmVsb3BlcnMnCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoZSBkYXNoYm9hcmRzIHdpbGwgbGlrZWx5IGJlIGltcGxlbWVudGVkIG9uIGZyZWUgYW5kIG9wZW4gc291cmNlIHRvb2xpbmcsXG5idXQgdGhhdCBpcyBub3QgYSBoYXJkIHJlcXVpcmVtZW50IGlmIHBhaWQgc29mdHdhcmUgaXMgbW9yZSBhcHByb3ByaWF0ZSIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSB0ZWFtIGhhcyBwcm9kdWNlZCBhIHJlZmVyZW5jZSBtb2RlbCBvZiBhIGxvZyBhZ2dyZWdhdGlvbiBzdGFjayB0aGF0IGV4dGVybmFsIHBhcnRpZXMgY2FuIHVzZVxuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICdTaW1pbGFyIHRvIHRoZSAicHVibGlzaGVkIiBkYXNoYm9hcmRzLCB0aGlzIG9ubHkgbmVlZHMgdG8gYmUgInNoYXJlZCIgcmF0aGVyIHRoYW4gInN1cHBvcnRlZCInCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDaGFvcyBlbmdpbmVlcmluZyBoYXMgYmVndW4gYmVpbmcgaW50ZWdyYXRlZCBpbnRvIHRoZSB0ZXN0bmV0c1xuKHRoaXMgY291bGQgYmUgcGVyaW9kaWMgQ1BVIGxpbWl0aW5nIG9yIGRlbGliZXJhdGUgbmV0d29yayBpbnRlcmZlcmVuY2UsIGV0Yy5cbmJ1dCBpdCBwcm9iYWJseSB3b3VsZCBub3QgYmUgZmlsZXN5c3RlbSBjb3JydXB0aW9uKSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRWFjaCB0ZXN0bmV0IGhhcyBhdCBsZWFzdCBvbmUgbm9kZSBydW5uaW5nIGEgYnVpbGQgd2l0aCB0aGUgR28gcmFjZSBkZXRlY3RvciBlbmFibGVkIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgdGVzdG5ldCBjb250YWlucyBzb21lIGtpbmQgb2YgZ2VuZXJhbGl6ZWQgbm90aWZpY2F0aW9uIHN5c3RlbSBidWlsdCBpbjpcbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAnVGVuZGVybWludCBjb2RlIGdyb3dzICJ3YXRjaGRvZyIgc3lzdGVtcyBidWlsdCBpbiB0byB2YWxpZGF0ZSB0aGluZ3MgbGlrZVxuc3Vic3lzdGVtcyBoYXZlIG5vdCBkZWFkbG9ja2VkOyBlLmcuIGlmIHRoZSB3YXRjaGRvZyBjYW5cJ3QgYWNxdWlyZSBhbmQgaW1tZWRpYXRlbHkgcmVsZWFzZVxuYSBwYXJ0aWN1bGFyIG11dGV4IG9uY2UgaW4gZXZlcnkgNS1taW51dGUgcGVyaW9kLCBpdCBpcyBuZWFyIGNlcnRhaW4gdGhhdCB0aGUgdGFyZ2V0XG5zdWJzeXN0ZW0gaGFzIGRlYWRsb2NrZWQsIGFuZCBhbiBhbGVydCBtdXN0IGJlIHNlbnQgdG8gdGhlIGVuZ2luZWVyaW5nIHRlYW0uXG4oT3V0c2lkZSBvZiB0aGUgdGVzdG5ldCwgdGhlIHdhdGNoZG9ncyBjb3VsZCBiZSBkaXNhYmxlZCwgb3IgdGhleSBjb3VsZCBwYW5pYyBvbiBmYWlsdXJlLiknCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoZSBub3RpZmljYXRpb24gc3lzdGVtIGRvZXMgc29tZSBkZWR1cGxpY2F0aW9uIHRvIG1pbmltaXplIHNwYW0gb24gc3lzdGVtIGZhaWx1cmUiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidGVzdG5ldC1sb25nLXRlcm0tdmlzaW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0ZXN0bmV0LWxvbmctdGVybS12aXNpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGVzdG5ldCBsb25nLXRlcm0gdmlzaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBsb25nLXRlcm0gdmlzaW9uIGluY2x1ZGVzIGdvYWxzIHRoYXQgYXJlIG5vdCBuZWNlc3NhcnkgZm9yIHNob3J0LSBvciBtZWRpdW0tdGVybSBzdWNjZXNzLFxuYnV0IHdoaWNoIHdvdWxkIHN1cHBvcnQgYnVpbGRpbmcgYW4gaW5jcmVhc2luZ2x5IHN0YWJsZSBhbmQgcGVyZm9ybWFudCBwcm9kdWN0LlxuVGhlc2UgZ29hbHMgd291bGQgZ2VuZXJhbGx5IGJlIGJleW9uZCB0aGUgb25lLXllYXIgcGxhbixcbmFuZCB0aGVyZWZvcmUgdGhleSB3b3VsZCBub3QgYmUgcGFydCBvZiBpbml0aWFsIHBsYW5uaW5nLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGVyZSBpcyBhIGNlbnRyYWxpemVkIGRhc2hib2FyZCB0byBnZXQgYSBxdWljayBvdmVydmlldyBvZiBhbGwgdGVzdG5ldHMsXG5vciBhdCBsZWFzdCBvbmUgY2VudHJhbGl6ZWQgZGFzaGJvYXJkIHBlciB0ZXN0bmV0LFxuc2hvd2luZyBUQkQgYmFzaWMgaW5mb3JtYXRpb24iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRlc3RuZXRzIGluY2x1ZGUgY2xvdWQgc3BvdCBpbnN0YW5jZXMgd2hpY2ggcGVyaW9kaWNhbGx5IGFuZCBhYnJ1cHRseSBqb2luIGFuZCBsZWF2ZSB0aGUgbmV0d29yayIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHRlc3RuZXRzIGFyZSBhIGhldGVyb2dlbmVvdXMgbWl4dHVyZSBvZiBzdHJhaWdodCBWTXMgYW5kIERvY2tlciBjb250YWluZXJzLFxudGhlcmVieSBtb3JlIGNsb3NlbHkgcmVwcmVzZW50aW5nIHByb2R1Y3Rpb24gYmxvY2tjaGFpbnMiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRlc3RuZXRzIGhhdmUgc29tZSBtYW5uZXIgb2YgY29udGludW91cyBwcm9maWxpbmcsXG5zbyB0aGF0IHdlIGNhbiBwcm9kdWNlIGFuIGFwcGxlcy10by1hcHBsZXMgY29tcGFyaXNvbiBvZiBDUFUvbWVtb3J5IGNvc3Qgb2YgcGFydGljdWxhciBvcGVyYXRpb25zIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidGVzdG5ldC1ub24tZ29hbHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Rlc3RuZXQtbm9uLWdvYWxzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRlc3RuZXQgbm9uLWdvYWxzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIGFyZSBzb21lIHRoaW5ncyB3ZSBhcmUgZXhwbGljaXRseSBub3QgdHJ5aW5nIHRvIGFjaGlldmUgd2l0aCBsb25nLWxpdmVkIHRlc3RuZXRzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgVGVuZGVybWludCBlbmdpbmVlcnMgd2lsbCBOT1QgYmUgcmVzcG9uc2libGUgZm9yIHRoZSB0ZXN0bmV0cycgYXZhaWxhYmlsaXR5XG5vdXRzaWRlIG9mIHdvcmtpbmcgaG91cnM7IHRoZXJlIHdpbGwgbm90IGJlIGFueSBraW5kIG9mIG9uLWNhbGwgc2NoZWR1bGUiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkFzIGEgcmVzdWx0IG9mIHRoZSA4eDUgc3VwcG9ydCBub3RlZCBpbiB0aGUgcHJldmlvdXMgcG9pbnQsXG50aGVyZSB3aWxsIGJlIE5PIGd1YXJhbnRlZSBvZiB1cHRpbWUgb3IgYXZhaWxhYmlsaXR5IGZvciBhbnkgdGVzdG5ldCIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHRlc3RuZXRzIHdpbGwgTk9UIGJlIHVzZWQgdG8gZ2F0ZSBwdWxsIHJlcXVlc3RzO1xudGhhdCByZXNwb25zaWJpbGl0eSBiZWxvbmdzIHRvIHVuaXQgdGVzdHMsIGVuZC10by1lbmQgdGVzdHMsIGFuZCBpbnRlZ3JhdGlvbiB0ZXN0cyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU2ltaWxhcmx5LCB0aGUgdGVzdG5ldCB3aWxsIE5PVCBiZSB1c2VkIHRvIGF1dG9tYXRlIGFueSBjaGFuZ2VzIGJhY2sgaW50byBUZW5kZXJtaW50IHNvdXJjZSBjb2RlO1xud2Ugd2lsbCBub3QgYXV0b21hdGljYWxseSBjcmVhdGUgYSByZXZlcnQgY29tbWl0IGR1ZSB0byBhIGZhaWxlZCByb2xsb3V0LCBmb3IgaW5zdGFuY2UiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZSB0ZXN0bmV0cyBhcmUgTk9UIGludGVuZGVkIHRvIGhhdmUgcGFydGljaXBhdGlvbiBmcm9tIG1hY2hpbmVzIG91dHNpZGUgb2YgdGhlXG5UZW5kZXJtaW50IGVuZ2luZWVyaW5nIHRlYW0ncyBjb250cm9sLCBhcyB0aGUgVGVuZGVybWludCBlbmdpbmVlcnMgYXJlIGV4cGVjdGVkXG50byBoYXZlIGZ1bGwgYWNjZXNzIHRvIGFueSBpbnN0YW5jZSB3aGVyZSB0aGV5IG1heSBuZWVkIHRvIGRlYnVnIGFuIGlzc3VlIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdXaGlsZSB0aGVyZSB3aWxsIGNlcnRhaW5seSBiZSBpbmRpdmlkdWFscyB3aXRoaW4gdGhlIFRlbmRlcm1pbnQgZW5naW5lZXJpbmcgdGVhbVxud2hvIHdpbGwgY29udGludWUgdG8gYnVpbGQgb3V0IHRoZWlyIGluZGl2aWR1YWwgImRldm9wcyIgc2tpbGxzIHRvIHByb2R1Y2VcbnRoZSBpbmZyYXN0cnVjdHVyZSBmb3IgdGhlIHRlc3RuZXQsIGl0IGlzIE5PVCBhIGdvYWwgdGhhdCBldmVyeSBUZW5kZXJtaW50IGVuZ2luZWVyXG5pcyBldmVuICcKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJmYW1pbGlhciIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgd2l0aCB0aGUgdGVjaCBzdGFjayBpbnZvbHZlZCwgd2hldGhlciBpdCBpcyBBbnNpYmxlLCBUZXJyYWZvcm0sXG5LdWJlcm5ldGVzLCBldGMuXG5BcyBhIHJ1bGUgb2YgdGh1bWIsIGFsbCBlbmdpbmVlcnMgc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHNoZWxsIGFjY2VzcyBvbiBhbnkgZ2l2ZW4gaW5zdGFuY2VcbmFuZCBzaG91bGQgaGF2ZSBhY2Nlc3MgdG8gdGhlIGluc3RhbmNlJ3MgbG9ncy5cbkxpdHRsZSBpZiBhbnkgZnVydGhlciBvcGVyYXRpb25hbCBza2lsbHMgd2lsbCBiZSBleHBlY3RlZC4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIHRlc3RuZXRzIGFyZSBub3QgaW50ZW5kZWQgdG8gYmUgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjcmVhdGVkIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBmb3Igb25lLW9mZiBleHBlcmltZW50cy5cbldoaWxlIHRoZXJlIGlzIG5vdGhpbmcgd3Jvbmcgd2l0aCBhbiBlbmdpbmVlciBkaXJlY3RseSBpbnRlcmFjdGluZyB3aXRoIGEgdGVzdG5ldFxudG8gdHJ5IHNvbWV0aGluZyBvdXQsXG5hIHRlc3RuZXQgY29tZXMgd2l0aCBhIGNvbnNpZGVyYWJsZSBhbW91bnQgb2YgImJhZ2dhZ2UiLCBzbyBlbmQtdG8tZW5kIG9yIGludGVncmF0aW9uIHRlc3RzXG5hcmUgY2xvc2VyIHRvIHRoZSBpbnRlbnQgZm9yICJ0cnlpbmcgc29tZXRoaW5nIHRvIHNlZSB3aGF0IGhhcHBlbnMiLlxuRGlyZWN0IGludGVyYWN0aW9uIHNob3VsZCBiZSBsaW1pdGVkIHRvIHN0YW5kYXJkIGJsb2NrY2hhaW4gb3BlcmF0aW9ucyxcbicKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJub3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgbW9kaWZ5aW5nIGNvbmZpZ3VyYXRpb24gb2Ygbm9kZXMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnTGlrZXdpc2UsIHRoZSBwdXJwb3NlIG9mIHRoZSB0ZXN0bmV0IGlzIG5vdCB0byBydW4gc3BlY2lmaWMgInRlc3RzIiBwZXIgc2UsXG5idXQgcmF0aGVyIHRvIGRlbW9uc3RyYXRlIHRoYXQgVGVuZGVybWludCBibG9ja2NoYWlucyBhcyBhIHdob2xlIGFyZSBzdGFibGVcbnVuZGVyIGEgcHJvZHVjdGlvbiBsb2FkLlxuT2YgY291cnNlIHdlIHdpbGwgaW5qZWN0IGZhdWx0cyBwZXJpb2RpY2FsbHksIGJ1dCB0aGUgaW50ZW50IGlzIHRvIG9ic2VydmUgYW5kIHByb3ZlIHRoYXRcbnRoZSB0ZXN0bmV0IGlzIHJlc2lsaWVudCB0byB0aG9zZSBmYXVsdHMuXG5JdCB3b3VsZCBiZSB0aGUgcmVzcG9uc2liaWxpdHkgb2YgYSBsb3dlci1sZXZlbCB0ZXN0IHRvIGRlbW9uc3RyYXRlIGUuZy5cbnRoYXQgdGhlIG5ldHdvcmsgY29udGludWVzIHdoZW4gYSBzaW5nbGUgdmFsaWRhdG9yIGRpc2FwcGVhcnMgd2l0aG91dCB3YXJuaW5nLicKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIHRlc3RuZXQgZGVzY3JpcHRpb25zIGluIHRoaXMgZG9jdW1lbnQgYXJlIHNjb3BlZCBvbmx5IHRvIGJ1aWxkaW5nIGRpcmVjdGx5IG9uIFRlbmRlcm1pbnQ7XG5pbnRlZ3JhdGluZyB3aXRoIHRoZSBDb3Ntb3MgU0RLLCBvciBhbnkgb3RoZXIgdGhpcmQtcGFydHkgbGlicmFyeSwgaXMgb3V0IG9mIHNjb3BlIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAidGVhbS1vdXRjb21lcy1hcy1hLXJlc3VsdC1vZi1tYWludGFpbmluZy1hbmQtb3BlcmF0aW5nLWEtdGVzdG5ldCIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjdGVhbS1vdXRjb21lcy1hcy1hLXJlc3VsdC1vZi1tYWludGFpbmluZy1hbmQtb3BlcmF0aW5nLWEtdGVzdG5ldCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBUZWFtIG91dGNvbWVzIGFzIGEgcmVzdWx0IG9mIG1haW50YWluaW5nIGFuZCBvcGVyYXRpbmcgYSB0ZXN0bmV0IgogICAgICAgICAgKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRmluYWxseSwgdGhpcyBzZWN0aW9uIHJlaXRlcmF0ZXMgd2hhdCB0ZWFtIGdyb3d0aCB3ZSBleHBlY3QgYnkgcnVubmluZyBzZW1pLXBlcm1hbmVudCB0ZXN0bmV0cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29uZmlkZW5jZSB0aGF0IFRlbmRlcm1pbnQgaXMgc3RhYmxlIHVuZGVyIGEgcGFydGljdWxhciBwcm9kdWN0aW9uLWxpa2UgbG9hZCIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRmFtaWxpYXJpdHkgd2l0aCB0eXBpY2FsIHByb2R1Y3Rpb24gYmVoYXZpb3Igb2YgVGVuZGVybWludCwgZS5nLiB3aGF0IHRoZSBsb2dzIGxvb2sgbGlrZSxcbndoYXQgdGhlIG1lbW9yeSBmb290cHJpbnQgbG9va3MgbGlrZSwgYW5kIHdoYXQga2luZCBvZiB0aHJvdWdocHV0IGlzIHJlYXNvbmFibGVcbmZvciBhIG5ldHdvcmsgb2YgYSBwYXJ0aWN1bGFyIHNpemUiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbWZvcnQgYW5kIGZhbWlsaWFyaXR5IGluIG1hbnVhbGx5IGluc3BlY3RpbmcgYSBtaXNiZWhhdmluZyBvciBmYWlsaW5nIG5vZGUiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbmZpZGVuY2UgdGhhdCBUZW5kZXJtaW50IHNoaXBzIHN1ZmZpY2llbnQgdG9vbGluZyBmb3IgZXh0ZXJuYWwgdXNlcnNcbnRvIG9wZXJhdGUgdGhlaXIgbm9kZXMiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbmZpZGVuY2UgdGhhdCBUZW5kZXJtaW50IGV4cG9zZXMgdXNlZnVsIG1ldHJpY3MsIGFuZCBjb21mb3J0IGludGVycHJldGluZyB0aG9zZSBtZXRyaWNzIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQcm9kdWNlIHVzZWZ1bCByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbiB0aGF0IGdpdmVzIG9wZXJhdG9ycyBjb25maWRlbmNlIHRvIHJ1biBUZW5kZXJtaW50IG5vZGVzIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}