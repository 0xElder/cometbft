{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-062-p2p-architecture.md?vue&type=template&id=dafcb224&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-062-p2p-architecture.md","mtime":1673295761175},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA2Mi1wMnAtYXJjaGl0ZWN0dXJlLWFuZC1hYnN0cmFjdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fkci0wNjItcDJwLWFyY2hpdGVjdHVyZS1hbmQtYWJzdHJhY3Rpb25zIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFEUiAwNjI6IFAyUCBBcmNoaXRlY3R1cmUgYW5kIEFic3RyYWN0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiMjAyMC0xMS0wOTogSW5pdGlhbCB2ZXJzaW9uIChAZXJpa2dyaW5ha2VyKSIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiMjAyMC0xMS0xMzogUmVtb3ZlIHN0cmVhbSBJRHMsIG1vdmUgcGVlciBlcnJvcnMgb250byBjaGFubmVsLCBub3RlIG9uIG1vdmluZyBQRVggaW50byBjb3JlIChAZXJpa2dyaW5ha2VyKSIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjIwMjAtMTEtMTY6IE5vdGVzIG9uIHJlY29tbWVuZGVkIHJlYWN0b3IgaW1wbGVtZW50YXRpb24gcGF0dGVybnMsIGFwcHJvdmUgQURSIChAZXJpa2dyaW5ha2VyKSIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjIwMjEtMDItMDQ6IFVwZGF0ZSB3aXRoIG5ldyBQMlAgY29yZSBhbmQgVHJhbnNwb3J0IEFQSSBjaGFuZ2VzIChAZXJpa2dyaW5ha2VyKS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGV4dCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udGV4dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb250ZXh0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiSW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2FyY2hpdGVjdHVyZS9hZHItMDYxLXAycC1yZWZhY3Rvci1zY29wZS5odG1sIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkFEUiAwNjEiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgd2UgZGVjaWRlZCB0byByZWZhY3RvciB0aGUgcGVlci10by1wZWVyIChQMlApIG5ldHdvcmtpbmcgc3RhY2suIFRoZSBmaXJzdCBwaGFzZSBpcyB0byByZWRlc2lnbiBhbmQgcmVmYWN0b3IgdGhlIGludGVybmFsIFAyUCBhcmNoaXRlY3R1cmUsIHdoaWxlIHJldGFpbmluZyBwcm90b2NvbCBjb21wYXRpYmlsaXR5IGFzIGZhciBhcyBwb3NzaWJsZS4iCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFsdGVybmF0aXZlLWFwcHJvYWNoZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FsdGVybmF0aXZlLWFwcHJvYWNoZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWx0ZXJuYXRpdmUgQXBwcm9hY2hlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTZXZlcmFsIHZhcmlhdGlvbnMgb2YgdGhlIHByb3Bvc2VkIGRlc2lnbiB3ZXJlIGNvbnNpZGVyZWQsIGluY2x1ZGluZyBlLmcuIGNhbGxpbmcgaW50ZXJmYWNlIG1ldGhvZHMgaW5zdGVhZCBvZiBwYXNzaW5nIG1lc3NhZ2VzIChsaWtlIHRoZSBjdXJyZW50IGFyY2hpdGVjdHVyZSksIG1lcmdpbmcgY2hhbm5lbHMgd2l0aCBzdHJlYW1zLCBleHBvc2luZyB0aGUgaW50ZXJuYWwgcGVlciBkYXRhIHN0cnVjdHVyZSB0byByZWFjdG9ycywgYmVpbmcgbWVzc2FnZSBmb3JtYXQtYWdub3N0aWMgdmlhIGFyYml0cmFyeSBjb2RlY3MsIGFuZCBzbyBvbi4gVGhpcyBkZXNpZ24gd2FzIGNob3NlbiBiZWNhdXNlIGl0IGhhcyB2ZXJ5IGxvb3NlIGNvdXBsaW5nLCBpcyBzaW1wbGVyIHRvIHJlYXNvbiBhYm91dCBhbmQgbW9yZSBjb252ZW5pZW50IHRvIHVzZSwgYXZvaWRzIHJhY2UgY29uZGl0aW9ucyBhbmQgbG9jayBjb250ZW50aW9uIGZvciBpbnRlcm5hbCBkYXRhIHN0cnVjdHVyZXMsIGdpdmVzIHJlYWN0b3JzIGJldHRlciBjb250cm9sIG9mIG1lc3NhZ2Ugb3JkZXJpbmcgYW5kIHByb2Nlc3Npbmcgc2VtYW50aWNzLCBhbmQgYWxsb3dzIGZvciBRb1Mgc2NoZWR1bGluZyBhbmQgYmFja3ByZXNzdXJlIGluIGEgdmVyeSBuYXR1cmFsIHdheS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL211bHRpZm9ybWF0cy9tdWx0aWFkZHIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigibXVsdGlhZGRyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdhcyBjb25zaWRlcmVkIGFzIGEgdHJhbnNwb3J0LWFnbm9zdGljIHBlZXIgYWRkcmVzcyBmb3JtYXQgb3ZlciByZWd1bGFyIFVSTHMsIGJ1dCBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gaGF2ZSB2ZXJ5IHdpZGVzcHJlYWQgYWRvcHRpb24sIGFuZCBhZHZhbmNlZCBmZWF0dXJlcyBsaWtlIHByb3RvY29sIGVuY2Fwc3VsYXRpb24gYW5kIHR1bm5lbGluZyBkbyBub3QgYXBwZWFyIHRvIGJlIGltbWVkaWF0ZWx5IHVzZWZ1bCB0byB1cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlcmUgd2VyZSBhbHNvIHByb3Bvc2FscyB0byB1c2UgTGliUDJQIGluc3RlYWQgb2YgbWFpbnRhaW5pbmcgb3VyIG93biBQMlAgc3RhY2ssIHdoaWNoIHdlcmUgcmVqZWN0ZWQgKGZvciBub3cpIGluICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2FyY2hpdGVjdHVyZS9hZHItMDYxLXAycC1yZWZhY3Rvci1zY29wZS5odG1sIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkFEUiAwNjEiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgaW5pdGlhbCB2ZXJzaW9uIG9mIHRoaXMgQURSIGhhZCBhIGJ5dGUtb3JpZW50ZWQgbXVsdGktc3RyZWFtIHRyYW5zcG9ydCBBUEksIGJ1dCB0aGlzIGhhZCB0byBiZSBhYmFuZG9uZWQvcG9zdHBvbmVkIHRvIG1haW50YWluIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggdGhlIGV4aXN0aW5nIE1Db25uZWN0aW9uIHByb3RvY29sIHdoaWNoIGlzIG1lc3NhZ2Utb3JpZW50ZWQuIFNlZSB0aGUgcmVqZWN0ZWQgUkZDIGluICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC9zcGVjL3B1bGwvMjI3IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInRlbmRlcm1pbnQvc3BlYyMyMjciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIGZvciBkZXRhaWxzLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZWNpc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGVjaXNpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlY2lzaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBQMlAgc3RhY2sgd2lsbCBiZSByZWRlc2lnbmVkIGFzIGEgbWVzc2FnZS1vcmllbnRlZCBhcmNoaXRlY3R1cmUsIHByaW1hcmlseSByZWx5aW5nIG9uIEdvIGNoYW5uZWxzIGZvciBjb21tdW5pY2F0aW9uIGFuZCBzY2hlZHVsaW5nLiBJdCB3aWxsIHVzZSBhIG1lc3NhZ2Utb3JpZW50ZWQgdHJhbnNwb3J0IHRvIGJpbmFyeSBtZXNzYWdlcyB3aXRoIGluZGl2aWR1YWwgcGVlcnMsIGJpZGlyZWN0aW9uYWwgcGVlci1hZGRyZXNzYWJsZSBjaGFubmVscyB0byBzZW5kIGFuZCByZWNlaXZlIFByb3RvYnVmIG1lc3NhZ2VzLCBhIHJvdXRlciB0byByb3V0ZSBtZXNzYWdlcyBiZXR3ZWVuIHJlYWN0b3JzIGFuZCBwZWVycywgYW5kIGEgcGVlciBtYW5hZ2VyIHRvIG1hbmFnZSBwZWVyIGxpZmVjeWNsZSBpbmZvcm1hdGlvbi4gTWVzc2FnZSBwYXNzaW5nIGlzIGFzeW5jaHJvbm91cyB3aXRoIGF0LW1vc3Qtb25jZSBkZWxpdmVyeS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGV0YWlsZWQtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXRhaWxlZC1kZXNpZ24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERldGFpbGVkIERlc2lnbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIEFEUiBpcyBwcmltYXJpbHkgY29uY2VybmVkIHdpdGggdGhlIGFyY2hpdGVjdHVyZSBhbmQgaW50ZXJmYWNlcyBvZiB0aGUgUDJQIHN0YWNrLCBub3QgaW1wbGVtZW50YXRpb24gZGV0YWlscy4gVGhlIGludGVyZmFjZXMgZGVzY3JpYmVkIGhlcmUgc2hvdWxkIHRoZXJlZm9yZSBiZSBjb25zaWRlcmVkIGEgcm91Z2ggYXJjaGl0ZWN0dXJlIG91dGxpbmUsIG5vdCBhIGNvbXBsZXRlIGFuZCBmaW5hbCBkZXNpZ24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcmltYXJ5IGRlc2lnbiBvYmplY3RpdmVzIGhhdmUgYmVlbjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxvb3NlIGNvdXBsaW5nIGJldHdlZW4gY29tcG9uZW50cywgZm9yIGEgc2ltcGxlciwgbW9yZSByb2J1c3QsIGFuZCB0ZXN0LWZyaWVuZGx5IGFyY2hpdGVjdHVyZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBsdWdnYWJsZSB0cmFuc3BvcnRzIChub3QgbmVjZXNzYXJpbHkgbmV0d29ya2VkKS4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJldHRlciBzY2hlZHVsaW5nIG9mIG1lc3NhZ2VzLCB3aXRoIGltcHJvdmVkIHByaW9yaXRpemF0aW9uLCBiYWNrcHJlc3N1cmUsIGFuZCBwZXJmb3JtYW5jZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ2VudHJhbGl6ZWQgcGVlciBsaWZlY3ljbGUgYW5kIGNvbm5lY3Rpb24gbWFuYWdlbWVudC4iKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJldHRlciBwZWVyIGFkZHJlc3MgZGV0ZWN0aW9uLCBhZHZlcnRpc2VtZW50LCBhbmQgZXhjaGFuZ2UuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2lyZS1sZXZlbCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGN1cnJlbnQgUDJQIG5ldHdvcmsgcHJvdG9jb2xzLCBleGNlcHQgd2hlcmUgaXQgcHJvdmVzIHRvbyBvYnN0cnVjdGl2ZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIG1haW4gYWJzdHJhY3Rpb25zIGluIHRoZSBuZXcgc3RhY2sgYXJlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcmFuc3BvcnQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBBbiBhcmJpdHJhcnkgbWVjaGFuaXNtIHRvIGV4Y2hhbmdlIGJpbmFyeSBtZXNzYWdlcyB3aXRoIGEgcGVlciBhY3Jvc3MgYSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDb25uZWN0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hhbm5lbCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IEEgYmlkaXJlY3Rpb25hbCBjaGFubmVsIHRvIGFzeW5jaHJvbm91c2x5IGV4Y2hhbmdlIFByb3RvYnVmIG1lc3NhZ2VzIHdpdGggcGVlcnMgdXNpbmcgbm9kZSBJRCBhZGRyZXNzaW5nLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSb3V0ZXIiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBNYWludGFpbnMgdHJhbnNwb3J0IGNvbm5lY3Rpb25zIHRvIHJlbGV2YW50IHBlZXJzIGFuZCByb3V0ZXMgY2hhbm5lbCBtZXNzYWdlcy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBNYW5hZ2VzIHBlZXIgbGlmZWN5Y2xlIGluZm9ybWF0aW9uLCBlLmcuIGRlY2lkaW5nIHdoaWNoIHBlZXJzIHRvIGRpYWwgYW5kIHdoZW4sIHVzaW5nIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGVlclN0b3JlIildKSwKICAgICAgICAgIF92bS5fdigiIGZvciBzdG9yYWdlLiIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ1JlYWN0b3I6IEEgZGVzaWduIHBhdHRlcm4gbG9vc2VseSBkZWZpbmVkIGFzICJzb21ldGhpbmcgd2hpY2ggbGlzdGVucyBvbiBhIGNoYW5uZWwgYW5kIHJlYWN0cyB0byBtZXNzYWdlcyIuJwogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlc2UgYWJzdHJhY3Rpb25zIGFyZSBpbGx1c3RyYXRlZCBpbiB0aGUgZm9sbG93aW5nIGRpYWdyYW0gKHJlcHJlc2VudGluZyB0aGUgaW50ZXJuYWxzIG9mIG5vZGUgQSkgYW5kIGRlc2NyaWJlZCBpbiBkZXRhaWwgYmVsb3cuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogImltZy9hZHItMDYyLWFyY2hpdGVjdHVyZS5zdmciLAogICAgICAgICAgICBhbHQ6ICJQMlAgQXJjaGl0ZWN0dXJlIERpYWdyYW0iLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidHJhbnNwb3J0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdHJhbnNwb3J0cyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHJhbnNwb3J0cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdUcmFuc3BvcnRzIGFyZSBhcmJpdHJhcnkgbWVjaGFuaXNtcyBmb3IgZXhjaGFuZ2luZyBiaW5hcnkgbWVzc2FnZXMgd2l0aCBhIHBlZXIuIEZvciBleGFtcGxlLCBhIGdSUEMgdHJhbnNwb3J0IHdvdWxkIGNvbm5lY3QgdG8gYSBwZWVyIG92ZXIgVENQL0lQIGFuZCBzZW5kIGRhdGEgdXNpbmcgdGhlIGdSUEMgcHJvdG9jb2wsIHdoaWxlIGFuIGluLW1lbW9yeSB0cmFuc3BvcnQgbWlnaHQgY29tbXVuaWNhdGUgd2l0aCBhIHBlZXIgcnVubmluZyBpbiBhbm90aGVyIGdvcm91dGluZSB1c2luZyBpbnRlcm5hbCBHbyBjaGFubmVscy4gTm90ZSB0aGF0IHRyYW5zcG9ydHMgZG9uXCd0IGhhdmUgYSBub3Rpb24gb2YgYSAicGVlciIgb3IgIm5vZGUiIGFzIHN1Y2ggLSBpbnN0ZWFkLCB0aGV5IGVzdGFibGlzaCBjb25uZWN0aW9ucyBiZXR3ZWVuIGFyYml0cmFyeSBlbmRwb2ludCBhZGRyZXNzZXMgKGUuZy4gSVAgYWRkcmVzcyBhbmQgcG9ydCBudW1iZXIpLCB0byBkZWNvdXBsZSB0aGVtIGZyb20gdGhlIHJlc3Qgb2YgdGhlIFAyUCBzdGFjay4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRyYW5zcG9ydHMgbXVzdCBzYXRpc2Z5IHRoZSBmb2xsb3dpbmcgcmVxdWlyZW1lbnRzOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQmUgY29ubmVjdGlvbi1vcmllbnRlZCwgYW5kIHN1cHBvcnQgYm90aCBsaXN0ZW5pbmcgZm9yIGluYm91bmQgY29ubmVjdGlvbnMgYW5kIG1ha2luZyBvdXRib3VuZCBjb25uZWN0aW9ucyB1c2luZyBlbmRwb2ludCBhZGRyZXNzZXMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU3VwcG9ydCBzZW5kaW5nIGJpbmFyeSBtZXNzYWdlcyB3aXRoIGRpc3RpbmN0IGNoYW5uZWwgSURzIChhbHRob3VnaCBjaGFubmVscyBhbmQgY2hhbm5lbCBJRHMgYXJlIGEgaGlnaGVyLWxldmVsIGFwcGxpY2F0aW9uIHByb3RvY29sIGNvbmNlcHQgZXhwbGFpbmVkIGluIHRoZSBSb3V0ZXIgc2VjdGlvbiwgdGhleSBhcmUgdGhyZWFkZWQgdGhyb3VnaCB0aGUgdHJhbnNwb3J0IGxheWVyIGFzIHdlbGwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsdHkgd2l0aCB0aGUgZXhpc3RpbmcgTUNvbm5lY3Rpb24gcHJvdG9jb2wpLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkV4Y2hhbmdlIHRoZSBNQ29ubmVjdGlvbiAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOb2RlSW5mbyIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGFuZCBwdWJsaWMga2V5IHZpYSBhIG5vZGUgaGFuZHNoYWtlLCBhbmQgcG9zc2libHkgZW5jcnlwdCBvciBzaWduIHRoZSB0cmFmZmljIGFzIGFwcHJvcHJpYXRlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgaW5pdGlhbCB0cmFuc3BvcnQgaXMgYSBwb3J0IG9mIHRoZSBjdXJyZW50IE1Db25uZWN0aW9uIHByb3RvY29sIGN1cnJlbnRseSB1c2VkIGJ5IFRlbmRlcm1pbnQsIGFuZCBzaG91bGQgYmUgYmFja3dhcmRzLWNvbXBhdGlibGUgYXQgdGhlIHdpcmUgbGV2ZWwuIEFuIGluLW1lbW9yeSB0cmFuc3BvcnQgZm9yIHRlc3RpbmcgaGFzIGFsc28gYmVlbiBpbXBsZW1lbnRlZC4gVGhlcmUgYXJlIHBsYW5zIHRvIGV4cGxvcmUgYSBRVUlDIHRyYW5zcG9ydCB0aGF0IG1heSByZXBsYWNlIHRoZSBNQ29ubmVjdGlvbiBwcm90b2NvbC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRyYW5zcG9ydCIpXSksCiAgICAgICAgX3ZtLl92KCIgaW50ZXJmYWNlIGlzIGFzIGZvbGxvd3M6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogImdvIiwKICAgICAgICAgIGJhc2U2NDoKICAgICAgICAgICAgIkx5OGdWSEpoYm5Od2IzSjBJR2x6SUdFZ1kyOXVibVZqZEdsdmJpMXZjbWxsYm5SbFpDQnRaV05vWVc1cGMyMGdabTl5SUdWNFkyaGhibWRwYm1jZ1pHRjBZU0IzYVhSb0lHRWdjR1ZsY2k0S2RIbHdaU0JVY21GdWMzQnZjblFnYVc1MFpYSm1ZV05sSUhzS0lDQWdJQzh2SUZCeWIzUnZZMjlzY3lCeVpYUjFjbTV6SUhSb1pTQndjbTkwYjJOdmJITWdjM1Z3Y0c5eWRHVmtJR0o1SUhSb1pTQjBjbUZ1YzNCdmNuUXVJRlJvWlNCU2IzVjBaWElLSUNBZ0lDOHZJSFZ6WlhNZ2RHaHBjeUIwYnlCd2FXTnJJR0VnZEhKaGJuTndiM0owSUdadmNpQmhiaUJGYm1Sd2IybHVkQzRLSUNBZ0lGQnliM1J2WTI5c2N5Z3BJRnRkVUhKdmRHOWpiMndLQ2lBZ0lDQXZMeUJGYm1Sd2IybHVkSE1nY21WMGRYSnVjeUIwYUdVZ2JHOWpZV3dnWlc1a2NHOXBiblJ6SUhSb1pTQjBjbUZ1YzNCdmNuUWdhWE1nYkdsemRHVnVhVzVuSUc5dUxDQnBaaUJoYm5rdUNpQWdJQ0F2THlCSWIzY2dkRzhnYkdsemRHVnVJR2x6SUhSeVlXNXpjRzl5ZEMxa1pYQmxibVJsYm5Rc0lHVXVaeTRnVFVOdmJtNVVjbUZ1YzNCdmNuUWdkWE5sY3lCTWFYTjBaVzRvS1NCM2FHbHNaUW9nSUNBZ0x5OGdUV1Z0YjNKNVZISmhibk53YjNKMElITjBZWEowY3lCc2FYTjBaVzVwYm1jZ2RtbGhJRTFsYlc5eWVVNWxkSGR2Y21zdVEzSmxZWFJsVkhKaGJuTndiM0owS0NrdUNpQWdJQ0JGYm1Sd2IybHVkSE1vS1NCYlhVVnVaSEJ2YVc1MENnb2dJQ0FnTHk4Z1FXTmpaWEIwSUhkaGFYUnpJR1p2Y2lCMGFHVWdibVY0ZENCcGJtSnZkVzVrSUdOdmJtNWxZM1JwYjI0Z2IyNGdZU0JzYVhOMFpXNXBibWNnWlc1a2NHOXBiblFzSUdKc2IyTnJhVzVuQ2lBZ0lDQXZMeUIxYm5ScGJDQmxhWFJvWlhJZ1lTQmpiMjV1WldOMGFXOXVJR2x6SUdGMllXbHNZV0pzWlNCdmNpQjBhR1VnZEhKaGJuTndiM0owSUdseklHTnNiM05sWkM0Z1QyNGdZMnh2YzNWeVpTd0tJQ0FnSUM4dklHbHZMa1ZQUmlCcGN5QnlaWFIxY201bFpDQmhibVFnWm5WeWRHaGxjaUJCWTJObGNIUWdZMkZzYkhNZ1lYSmxJR1oxZEdsc1pTNEtJQ0FnSUVGalkyVndkQ2dwSUNoRGIyNXVaV04wYVc5dUxDQmxjbkp2Y2lrS0NpQWdJQ0F2THlCRWFXRnNJR055WldGMFpYTWdZVzRnYjNWMFltOTFibVFnWTI5dWJtVmpkR2x2YmlCMGJ5QmhiaUJsYm1Sd2IybHVkQzRLSUNBZ0lFUnBZV3dvWTI5dWRHVjRkQzVEYjI1MFpYaDBMQ0JGYm1Sd2IybHVkQ2tnS0VOdmJtNWxZM1JwYjI0c0lHVnljbTl5S1FvS0lDQWdJQzh2SUVOc2IzTmxJSE4wYjNCeklHRmpZMlZ3ZEdsdVp5QnVaWGNnWTI5dWJtVmpkR2x2Ym5Nc0lHSjFkQ0JrYjJWeklHNXZkQ0JqYkc5elpTQmhZM1JwZG1VZ1kyOXVibVZqZEdsdmJuTXVDaUFnSUNCRGJHOXpaU2dwSUdWeWNtOXlDbjBLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIb3cgdGhlIHRyYW5zcG9ydCBjb25maWd1cmVzIGxpc3RlbmluZyBpcyB0cmFuc3BvcnQtZGVwZW5kZW50LCBhbmQgbm90IGNvdmVyZWQgYnkgdGhlIGludGVyZmFjZS4gVGhpcyB0eXBpY2FsbHkgaGFwcGVucyBkdXJpbmcgdHJhbnNwb3J0IGNvbnN0cnVjdGlvbiwgd2hlcmUgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgdGhlIHRyYW5zcG9ydCBpcyBjcmVhdGVkIGFuZCBzZXQgdG8gbGlzdGVuIG9uIGFuIGFwcHJvcHJpYXRlIG5ldHdvcmsgaW50ZXJmYWNlIGJlZm9yZSBiZWluZyBwYXNzZWQgdG8gdGhlIHJvdXRlci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiZW5kcG9pbnRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNlbmRwb2ludHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEVuZHBvaW50cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRW5kcG9pbnQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcmVwcmVzZW50cyBhIHRyYW5zcG9ydCBlbmRwb2ludCAoZS5nLiBhbiBJUCBhZGRyZXNzIGFuZCBwb3J0KS4gQSBjb25uZWN0aW9uIGFsd2F5cyBoYXMgdHdvIGVuZHBvaW50czogb25lIGF0IHRoZSBsb2NhbCBub2RlIGFuZCBvbmUgYXQgdGhlIHJlbW90ZSBwZWVyLiBPdXRib3VuZCBjb25uZWN0aW9ucyB0byByZW1vdGUgZW5kcG9pbnRzIGFyZSBtYWRlIHZpYSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRpYWwoKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYW5kIGluYm91bmQgY29ubmVjdGlvbnMgdG8gbGlzdGVuaW5nIGVuZHBvaW50cyBhcmUgcmV0dXJuZWQgdmlhICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQWNjZXB0KCkiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRW5kcG9pbnQiKV0pLAogICAgICAgIF92bS5fdigiIHN0cnVjdCBpczoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiTHk4Z1JXNWtjRzlwYm5RZ2NtVndjbVZ6Wlc1MGN5QmhJSFJ5WVc1emNHOXlkQ0JqYjI1dVpXTjBhVzl1SUdWdVpIQnZhVzUwTENCbGFYUm9aWElnYkc5allXd2diM0lnY21WdGIzUmxMZ292THdvdkx5QkZibVJ3YjJsdWRITWdZWEpsSUc1dmRDQnVaV05sYzNOaGNtbHNlU0J1WlhSM2IzSnJaV1FnS0hObFpTQmxMbWN1SUUxbGJXOXllVlJ5WVc1emNHOXlkQ2tnWW5WMElHRnNiQW92THlCdVpYUjNiM0pyWldRZ1pXNWtjRzlwYm5SeklHMTFjM1FnZFhObElFbFFJR0Z6SUhSb1pTQjFibVJsY214NWFXNW5JSFJ5WVc1emNHOXlkQ0J3Y205MGIyTnZiQ0IwYnlCaGJHeHZkd292THlCbExtY3VJRWxRSUdGa1pISmxjM01nWm1sc2RHVnlhVzVuTGlCRmFYUm9aWElnU1ZBZ2IzSWdVR0YwYUNBb2IzSWdZbTkwYUNrZ2JYVnpkQ0JpWlNCelpYUXVDblI1Y0dVZ1JXNWtjRzlwYm5RZ2MzUnlkV04wSUhzS0lDQWdJQzh2SUZCeWIzUnZZMjlzSUhOd1pXTnBabWxsY3lCMGFHVWdkSEpoYm5Od2IzSjBJSEJ5YjNSdlkyOXNMZ29nSUNBZ1VISnZkRzlqYjJ3Z1VISnZkRzlqYjJ3S0NpQWdJQ0F2THlCSlVDQnBjeUJoYmlCSlVDQmhaR1J5WlhOeklDaDJOQ0J2Y2lCMk5pa2dkRzhnWTI5dWJtVmpkQ0IwYnk0Z1NXWWdjMlYwTENCMGFHbHpJR1JsWm1sdVpYTWdkR2hsQ2lBZ0lDQXZMeUJsYm1Sd2IybHVkQ0JoY3lCaElHNWxkSGR2Y210bFpDQmxibVJ3YjJsdWRDNEtJQ0FnSUVsUUlHNWxkQzVKVUFvS0lDQWdJQzh2SUZCdmNuUWdhWE1nWVNCdVpYUjNiM0pySUhCdmNuUWdLR1ZwZEdobGNpQlVRMUFnYjNJZ1ZVUlFLUzRnU1dZZ01Dd2dZU0JrWldaaGRXeDBJSEJ2Y25RZ2JXRjVJR0psQ2lBZ0lDQXZMeUIxYzJWa0lHUmxjR1Z1WkdsdVp5QnZiaUIwYUdVZ2NISnZkRzlqYjJ3dUNpQWdJQ0JRYjNKMElIVnBiblF4TmdvS0lDQWdJQzh2SUZCaGRHZ2dhWE1nWVc0Z2IzQjBhVzl1WVd3Z2RISmhibk53YjNKMExYTndaV05wWm1saklIQmhkR2dnYjNJZ2FXUmxiblJwWm1sbGNpNEtJQ0FnSUZCaGRHZ2djM1J5YVc1bkNuMEtDaTh2SUZCeWIzUnZZMjlzSUdsa1pXNTBhV1pwWlhNZ1lTQjBjbUZ1YzNCdmNuUWdjSEp2ZEc5amIyd3VDblI1Y0dVZ1VISnZkRzlqYjJ3Z2MzUnlhVzVuQ2c9PSIsCiAgICAgICAgfSwKICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRW5kcG9pbnRzIGFyZSBhcmJpdHJhcnkgdHJhbnNwb3J0LXNwZWNpZmljIGFkZHJlc3NlcywgYnV0IGlmIHRoZXkgYXJlIG5ldHdvcmtlZCB0aGV5IG11c3QgdXNlIElQIGFkZHJlc3NlcyBhbmQgdGh1cyByZWx5IG9uIElQIGFzIGEgZnVuZGFtZW50YWwgcGFja2V0IHJvdXRpbmcgcHJvdG9jb2wuIFRoaXMgZW5hYmxlcyBwb2xpY2llcyBmb3IgYWRkcmVzcyBkaXNjb3ZlcnksIGFkdmVydGlzZW1lbnQsIGFuZCBleGNoYW5nZSAtIGZvciBleGFtcGxlLCBhIHByaXZhdGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIxOTIuMTY4LjAuMC8yNCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJUCBhZGRyZXNzIHNob3VsZCBvbmx5IGJlIGFkdmVydGlzZWQgdG8gcGVlcnMgb24gdGhhdCBJUCBuZXR3b3JrLCB3aGlsZSB0aGUgcHVibGljIGFkZHJlc3MgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI4LjguOC44IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG1heSBiZSBhZHZlcnRpc2VkIHRvIGFsbCBwZWVycy4gU2ltaWxhcmx5LCBhbnkgcG9ydCBudW1iZXJzIGlmIGdpdmVuIG11c3QgcmVwcmVzZW50IFRDUCBhbmQvb3IgVURQIHBvcnQgbnVtYmVycywgaW4gb3JkZXIgdG8gdXNlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Vbml2ZXJzYWxfUGx1Z19hbmRfUGxheSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJVUG5QIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiB0byBhdXRvY29uZmlndXJlIGUuZy4gTkFUIGdhdGV3YXlzLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb24tbmV0d29ya2VkIGVuZHBvaW50cyAod2l0aG91dCBhbiBJUCBhZGRyZXNzKSBhcmUgY29uc2lkZXJlZCBsb2NhbCwgYW5kIHdpbGwgb25seSBiZSBhZHZlcnRpc2VkIHRvIG90aGVyIHBlZXJzIGNvbm5lY3RpbmcgdmlhIHRoZSBzYW1lIHByb3RvY29sLiBGb3IgZXhhbXBsZSwgdGhlIGluLW1lbW9yeSB0cmFuc3BvcnQgdXNlZCBmb3IgdGVzdGluZyB1c2VzICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignRW5kcG9pbnR7UHJvdG9jb2w6ICJtZW1vcnkiLCBQYXRoOiAiZm9vIn0nKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgYXMgYW4gYWRkcmVzcyBmb3IgdGhlIG5vZGUgImZvbyIsIGFuZCB0aGlzIHNob3VsZCBvbmx5IGJlIGFkdmVydGlzZWQgdG8gb3RoZXIgbm9kZXMgdXNpbmcgJwogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCdQcm90b2NvbDogIm1lbW9yeSInKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJjb25uZWN0aW9ucyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29ubmVjdGlvbnMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbm5lY3Rpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkEgY29ubmVjdGlvbiByZXByZXNlbnRzIGFuIGVzdGFibGlzaGVkIHRyYW5zcG9ydCBjb25uZWN0aW9uIGJldHdlZW4gdHdvIGVuZHBvaW50cyAoaS5lLiB0d28gbm9kZXMpLCB3aGljaCBjYW4gYmUgdXNlZCB0byBleGNoYW5nZSBiaW5hcnkgbWVzc2FnZXMgd2l0aCBsb2dpY2FsIGNoYW5uZWwgSURzIChjb3JyZXNwb25kaW5nIHRvIHRoZSBoaWdoZXItbGV2ZWwgY2hhbm5lbCBJRHMgdXNlZCBpbiB0aGUgcm91dGVyKS4gQ29ubmVjdGlvbnMgYXJlIHNldCB1cCBlaXRoZXIgdmlhICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVHJhbnNwb3J0LkRpYWwoKSIpXSksCiAgICAgICAgX3ZtLl92KCIgKG91dGJvdW5kKSBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRyYW5zcG9ydC5BY2NlcHQoKSIpXSksCiAgICAgICAgX3ZtLl92KCIgKGluYm91bmQpLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiT25jZSBhIGNvbm5lY3Rpb24gaXMgZXNhYmxpc2hlZCwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcmFuc3BvcnQuSGFuZHNoYWtlKCkiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbXVzdCBiZSBjYWxsZWQgdG8gcGVyZm9ybSBhIG5vZGUgaGFuZHNoYWtlLCBleGNoYW5naW5nIG5vZGUgaW5mbyBhbmQgcHVibGljIGtleXMgdG8gdmVyaWZ5IG5vZGUgaWRlbnRpdGllcy4gTm9kZSBoYW5kc2hha2VzIHNob3VsZCBub3QgcmVhbGx5IGJlIHBhcnQgb2YgdGhlIHRyYW5zcG9ydCBsYXllciAoaXQncyBhbiBhcHBsaWNhdGlvbiBwcm90b2NvbCBjb25jZXJuKSwgdGhpcyBleGlzdHMgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggdGhlIGV4aXN0aW5nIE1Db25uZWN0aW9uIHByb3RvY29sIHdoaWNoIGNvbmZsYXRlcyB0aGUgdHdvLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5vZGVJbmZvIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIHBhcnQgb2YgdGhlIGV4aXN0aW5nIE1Db25uZWN0aW9uIHByb3RvY29sLCBidXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGRvY3VtZW50ZWQgaW4gdGhlIHNwZWNpZmljYXRpb24gLS0gcmVmZXIgdG8gdGhlIEdvIGNvZGViYXNlIGZvciBkZXRhaWxzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ29ubmVjdGlvbiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbnRlcmZhY2UgaXMgc2hvd24gYmVsb3cuIEl0IG9taXRzIGNlcnRhaW4gYWRkaXRpb25zIHRoYXQgYXJlIGN1cnJlbnRseSBpbXBsZW1lbnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgbGVnYWN5IFAyUCBzdGFjayBhbmQgYXJlIHBsYW5uZWQgdG8gYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIGZpbmFsIHJlbGVhc2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogImdvIiwKICAgICAgICAgIGJhc2U2NDoKICAgICAgICAgICAgIkx5OGdRMjl1Ym1WamRHbHZiaUJ5WlhCeVpYTmxiblJ6SUdGdUlHVnpkR0ZpYkdsemFHVmtJR052Ym01bFkzUnBiMjRnWW1WMGQyVmxiaUIwZDI4Z1pXNWtjRzlwYm5SekxncDBlWEJsSUVOdmJtNWxZM1JwYjI0Z2FXNTBaWEptWVdObElIc0tJQ0FnSUM4dklFaGhibVJ6YUdGclpTQmxlR1ZqZFhSbGN5QmhJRzV2WkdVZ2FHRnVaSE5vWVd0bElIZHBkR2dnZEdobElISmxiVzkwWlNCd1pXVnlMaUJKZENCdGRYTjBJR0psQ2lBZ0lDQXZMeUJqWVd4c1pXUWdiMjVqWlNCMGFHVWdZMjl1Ym1WamRHbHZiaUJwY3lCbGMzUmhZbXhwYzJobFpDd2dZVzVrSUhKbGRIVnlibk1nZEdobElISmxiVzkwWlNCd1pXVnlKM01LSUNBZ0lDOHZJRzV2WkdVZ2FXNW1ieUJoYm1RZ2NIVmliR2xqSUd0bGVTNGdWR2hsSUdOaGJHeGxjaUJwY3lCeVpYTndiMjV6YVdKc1pTQm1iM0lnZG1Gc2FXUmhkR2x2Ymk0S0lDQWdJRWhoYm1SemFHRnJaU2hqYjI1MFpYaDBMa052Ym5SbGVIUXNJRTV2WkdWSmJtWnZMQ0JqY25sd2RHOHVVSEpwZGt0bGVTa2dLRTV2WkdWSmJtWnZMQ0JqY25sd2RHOHVVSFZpUzJWNUxDQmxjbkp2Y2lrS0NpQWdJQ0F2THlCU1pXTmxhWFpsVFdWemMyRm5aU0J5WlhSMWNtNXpJSFJvWlNCdVpYaDBJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdiMjRnZEdobElHTnZibTVsWTNScGIyNHNDaUFnSUNBdkx5QmliRzlqYTJsdVp5QjFiblJwYkNCdmJtVWdhWE1nWVhaaGFXeGhZbXhsTGlCU1pYUjFjbTV6SUdsdkxrVlBSaUJwWmlCamJHOXpaV1F1Q2lBZ0lDQlNaV05sYVhabFRXVnpjMkZuWlNncElDaERhR0Z1Ym1Wc1NVUXNJRnRkWW5sMFpTd2daWEp5YjNJcENnb2dJQ0FnTHk4Z1UyVnVaRTFsYzNOaFoyVWdjMlZ1WkhNZ1lTQnRaWE56WVdkbElHOXVJSFJvWlNCamIyNXVaV04wYVc5dUxpQlNaWFIxY201eklHbHZMa1ZQUmlCcFppQmpiRzl6WldRdUNpQWdJQ0JUWlc1a1RXVnpjMkZuWlNoRGFHRnVibVZzU1VRc0lGdGRZbmwwWlNrZ1pYSnliM0lLQ2lBZ0lDQXZMeUJNYjJOaGJFVnVaSEJ2YVc1MElISmxkSFZ5Ym5NZ2RHaGxJR3h2WTJGc0lHVnVaSEJ2YVc1MElHWnZjaUIwYUdVZ1kyOXVibVZqZEdsdmJpNEtJQ0FnSUV4dlkyRnNSVzVrY0c5cGJuUW9LU0JGYm1Sd2IybHVkQW9LSUNBZ0lDOHZJRkpsYlc5MFpVVnVaSEJ2YVc1MElISmxkSFZ5Ym5NZ2RHaGxJSEpsYlc5MFpTQmxibVJ3YjJsdWRDQm1iM0lnZEdobElHTnZibTVsWTNScGIyNHVDaUFnSUNCU1pXMXZkR1ZGYm1Sd2IybHVkQ2dwSUVWdVpIQnZhVzUwQ2dvZ0lDQWdMeThnUTJ4dmMyVWdZMnh2YzJWeklIUm9aU0JqYjI1dVpXTjBhVzl1TGdvZ0lDQWdRMnh2YzJVb0tTQmxjbkp2Y2dwOUNnPT0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgQURSIGluaXRpYWxseSBwcm9wb3NlZCBhIGJ5dGUtb3JpZW50ZWQgbXVsdGktc3RyZWFtIGNvbm5lY3Rpb24gQVBJIHRoYXQgZm9sbG93cyBtb3JlIHR5cGljYWwgbmV0d29ya2luZyBBUEkgY29udmVudGlvbnMgKHVzaW5nIGUuZy4gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpby5SZWFkZXIiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImlvLldyaXRlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbnRlcmZhY2VzIHdoaWNoIGVhc2lseSBjb21wb3NlIHdpdGggb3RoZXIgbGlicmFyaWVzKS4gVGhpcyB3b3VsZCBhbHNvIGFsbG93IG1vdmluZyB0aGUgcmVzcG9uc2liaWxpdHkgZm9yIG1lc3NhZ2UgZnJhbWluZywgbm9kZSBoYW5kc2hha2VzLCBhbmQgdHJhZmZpYyBzY2hlZHVsaW5nIHRvIHRoZSBjb21tb24gcm91dGVyIGluc3RlYWQgb2YgcmVpbXBsZW1lbnRpbmcgdGhpcyBhY3Jvc3MgdHJhbnNwb3J0cywgYW5kIHdvdWxkIGFsbG93IG1ha2luZyBiZXR0ZXIgdXNlIG9mIG11bHRpLXN0cmVhbSBwcm90b2NvbHMgc3VjaCBhcyBRVUlDLiBIb3dldmVyLCB0aGlzIHdvdWxkIHJlcXVpcmUgbWlub3IgYnJlYWtpbmcgY2hhbmdlcyB0byB0aGUgTUNvbm5lY3Rpb24gcHJvdG9jb2wgd2hpY2ggd2VyZSByZWplY3RlZCwgc2VlICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC9zcGVjL3B1bGwvMjI3IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoInRlbmRlcm1pbnQvc3BlYyMyMjciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZm9yIGRldGFpbHMuIFRoaXMgc2hvdWxkIGJlIHJldmlzaXRlZCB3aGVuIHN0YXJ0aW5nIHdvcmsgb24gYSBRVUlDIHRyYW5zcG9ydC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicGVlci1tYW5hZ2VtZW50IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwZWVyLW1hbmFnZW1lbnQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBlZXIgTWFuYWdlbWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQZWVycyBhcmUgb3RoZXIgVGVuZGVybWludCBub2Rlcy4gRWFjaCBwZWVyIGlzIGlkZW50aWZpZWQgYnkgYSB1bmlxdWUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOb2RlSUQiKV0pLAogICAgICAgIF92bS5fdigiICh0aWVkIHRvIHRoZSBub2RlJ3MgcHJpdmF0ZSBrZXkpLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwZWVyLWFkZHJlc3NlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGVlci1hZGRyZXNzZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBlZXIgQWRkcmVzc2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJOb2RlcyBoYXZlIG9uZSBvciBtb3JlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTm9kZUFkZHJlc3MiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYWRkcmVzc2VzIGV4cHJlc3NlZCBhcyBVUkxzIHRoYXQgdGhleSBjYW4gYmUgcmVhY2hlZCBhdC4gRXhhbXBsZXMgb2Ygbm9kZSBhZGRyZXNzZXMgbWlnaHQgYmUgZS5nLjoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtY29ubjovL25vZGVpZEBob3N0LmRvbWFpbi5jb206MjU1NjcvcGF0aCIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigibWVtb3J5Om5vZGVpZCIpXSldKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWRkcmVzc2VzIGFyZSByZXNvbHZlZCBpbnRvIG9uZSBvciBtb3JlIHRyYW5zcG9ydCBlbmRwb2ludHMsIGUuZy4gYnkgcmVzb2x2aW5nIEROUyBob3N0bmFtZXMgaW50byBJUCBhZGRyZXNzZXMuIFBlZXJzIHNob3VsZCBhbHdheXMgYmUgZXhwcmVzc2VkIGFzIGFkZHJlc3MgVVJMcyByYXRoZXIgdGhhbiBlbmRwb2ludHMgKHdoaWNoIGFyZSBhIGxvd2VyLWxldmVsIHRyYW5zcG9ydCBjb25zdHJ1Y3QpLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnVG05a1pVbEVJR2x6SUdFZ2FHVjRMV1Z1WTI5a1pXUWdZM0o1Y0hSdkxrRmtaSEpsYzNNdUlFbDBJRzExYzNRZ1ltVWdiRzkzWlhKallYTmxaQW92THlBb1ptOXlJSFZ1YVhGMVpXNWxjM01wSUdGdVpDQnZaaUJzWlc1bmRHZ2dOREF1Q25SNWNHVWdUbTlrWlVsRUlITjBjbWx1WndvS0x5OGdUbTlrWlVGa1pISmxjM01nYVhNZ1lTQnViMlJsSUdGa1pISmxjM01nVlZKTUxpQkpkQ0JrYVdabVpYSnpJR1p5YjIwZ1lTQjBjbUZ1YzNCdmNuUWdSVzVrY0c5cGJuUWdhVzRLTHk4Z2RHaGhkQ0JwZENCamIyNTBZV2x1Y3lCMGFHVWdibTlrWlNkeklFbEVMQ0JoYm1RZ2RHaGhkQ0IwYUdVZ1lXUmtjbVZ6Y3lCb2IzTjBibUZ0WlNCdFlYa2dZbVVnY21WemIyeDJaV1FLTHk4Z2FXNTBieUJ0ZFd4MGFYQnNaU0JKVUNCaFpHUnlaWE56WlhNZ0tHRnVaQ0IwYUhWeklHMTFiSFJwY0d4bElHVnVaSEJ2YVc1MGN5a3VDaTh2Q2k4dklFbG1JSFJvWlNCVlVrd2dhWE1nYjNCaGNYVmxMQ0JwTG1VdUlHOW1JSFJvWlNCbWIzSnRJQ1p4ZFc5ME8zTmphR1Z0WlRwdmNHRnhkV1VtY1hWdmREc3NJSFJvWlc0Z2RHaGxJRzl3WVhGMVpTQndZWEowQ2k4dklHbHpJR1Y0Y0dWamRHVmtJSFJ2SUdOdmJuUmhhVzRnWVNCdWIyUmxJRWxFTGdwMGVYQmxJRTV2WkdWQlpHUnlaWE56SUhOMGNuVmpkQ0I3Q2lBZ0lDQk9iMlJsU1VRZ0lDQk9iMlJsU1VRS0lDQWdJRkJ5YjNSdlkyOXNJRkJ5YjNSdlkyOXNDaUFnSUNCSWIzTjBibUZ0WlNCemRISnBibWNLSUNBZ0lGQnZjblFnSUNBZ0lIVnBiblF4TmdvZ0lDQWdVR0YwYUNBZ0lDQWdjM1J5YVc1bkNuMEtDaTh2SUZCaGNuTmxUbTlrWlVGa1pISmxjM01nY0dGeWMyVnpJR0VnYm05a1pTQmhaR1J5WlhOeklGVlNUQ0JwYm5SdklHRWdUbTlrWlVGa1pISmxjM01zSUc1dmNtMWhiR2w2YVc1bkNpOHZJR0Z1WkNCMllXeHBaR0YwYVc1bklHbDBMZ3BtZFc1aklGQmhjbk5sVG05a1pVRmtaSEpsYzNNb2RYSnNVM1J5YVc1bklITjBjbWx1WnlrZ0tFNXZaR1ZCWkdSeVpYTnpMQ0JsY25KdmNpa0tDaTh2SUZKbGMyOXNkbVVnY21WemIyeDJaWE1nWVNCT2IyUmxRV1JrY21WemN5QnBiblJ2SUdFZ2MyVjBJRzltSUVWdVpIQnZhVzUwY3l3Z1pTNW5MaUJpZVNCbGVIQmhibVJwYm1jS0x5OGdiM1YwSUdFZ1JFNVRJR2h2YzNSdVlXMWxJSFJ2SUVsUUlHRmtaSEpsYzNObGN5NEtablZ1WXlBb1lTQk9iMlJsUVdSa2NtVnpjeWtnVW1WemIyeDJaU2hqZEhnZ1kyOXVkR1Y0ZEM1RGIyNTBaWGgwS1NBb1cxMUZibVJ3YjJsdWRDd2daWEp5YjNJcENnPT0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInBlZXItbWFuYWdlciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGVlci1tYW5hZ2VyIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQZWVyIE1hbmFnZXIiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIFAyUCBzdGFjayBuZWVkcyB0byB0cmFjayBhIGxvdCBvZiBpbnRlcm5hbCBzdGF0ZSBhYm91dCBwZWVycywgc3VjaCBhcyB0aGVpciBhZGRyZXNzZXMsIGNvbm5lY3Rpb24gc3RhdGUsIHByaW9yaXRpZXMsIGF2YWlsYWJpbGl0eSwgZmFpbHVyZXMsIHJldHJpZXMsIGFuZCBzbyBvbi4gVGhpcyByZXNwb25zaWJpbGl0eSBoYXMgYmVlbiBzZXBhcmF0ZWQgb3V0IHRvIGEgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyTWFuYWdlciIpXSksCiAgICAgICAgX3ZtLl92KCIsIHdoaWNoIHRyYWNrIHRoaXMgc3RhdGUgZm9yIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJvdXRlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAoYnV0IGRvZXMgbm90IG1haW50YWluIHRoZSBhY3R1YWwgdHJhbnNwb3J0IGNvbm5lY3Rpb25zIHRoZW1zZWx2ZXMsIHdoaWNoIGlzIHRoZSByb3V0ZXIncyByZXNwb25zaWJpbGl0eSkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyTWFuYWdlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBhIHN5bmNocm9ub3VzIHN0YXRlIG1hY2hpbmUsIHdoZXJlIGFsbCBzdGF0ZSB0cmFuc2l0aW9ucyBhcmUgc2VyaWFsaXplZCAoaW1wbGVtZW50ZWQgYXMgc3luY2hyb25vdXMgbWV0aG9kIGNhbGxzIGhvbGRpbmcgYW4gZXhjbHVzaXZlIG11dGV4IGxvY2spLiBNb3N0IHBlZXIgc3RhdGUgaXMgaW50ZW50aW9uYWxseSBrZXB0IGludGVybmFsLCBzdG9yZWQgaW4gYSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInBlZXJTdG9yZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBkYXRhYmFzZSB0aGF0IHBlcnNpc3RzIGl0IGFzIGFwcHJvcHJpYXRlLCBhbmQgdGhlIGV4dGVybmFsIGludGVyZmFjZXMgcGFzcyB0aGUgbWluaW11bSBhbW91bnQgb2YgaW5mb3JtYXRpb24gbmVjZXNzYXJ5IGluIG9yZGVyIHRvIGF2b2lkIHNoYXJlZCBzdGF0ZSBiZXR3ZWVuIHJvdXRlciBnb3JvdXRpbmVzLiBUaGlzIGRlc2lnbiBzaWduaWZpY2FudGx5IHNpbXBsaWZpZXMgdGhlIG1vZGVsLCBtYWtpbmcgaXQgbXVjaCBlYXNpZXIgdG8gcmVhc29uIGFib3V0IGFuZCB0ZXN0IHRoYW4gaWYgaXQgd2FzIGJha2VkIGludG8gdGhlIGFzeW5jaHJvbm91cyBiYWxsIG9mIGNvbmN1cnJlbmN5IHRoYXQgdGhlIFAyUCBuZXR3b3JraW5nIGNvcmUgbXVzdCBuZWNlc3NhcmlseSBiZS4gQXMgcGVlciBsaWZlY3ljbGUgZXZlbnRzIGFyZSBleHBlY3RlZCB0byBiZSByZWxhdGl2ZWx5IGluZnJlcXVlbnQsIHRoaXMgc2hvdWxkIG5vdCBzaWduaWZpY2FudGx5IGltcGFjdCBwZXJmb3JtYW5jZSBlaXRoZXIuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSb3V0ZXIiKV0pLAogICAgICAgIF92bS5fdigiIHVzZXMgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gcmVxdWVzdCB3aGljaCBwZWVycyB0byBkaWFsIGFuZCBldmljdCwgYW5kIHJlcG9ydHMgaW4gd2l0aCBwZWVyIGxpZmVjeWNsZSBldmVudHMgc3VjaCBhcyBjb25uZWN0aW9ucywgZGlzY29ubmVjdGlvbnMsIGFuZCBmYWlsdXJlcyBhcyB0aGV5IG9jY3VyLiBUaGUgbWFuYWdlciBjYW4gcmVqZWN0IHRoZXNlIGV2ZW50cyAoZS5nLiByZWplY3QgYW4gaW5ib3VuZCBjb25uZWN0aW9uKSBieSByZXR1cm5pbmcgZXJyb3JzLiBUaGlzIGhhcHBlbnMgYXMgZm9sbG93czoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiT3V0Ym91bmQgY29ubmVjdGlvbnMsIHZpYSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcmFuc3BvcnQuRGlhbCIpXSksCiAgICAgICAgICAgIF92bS5fdigiOiIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRGlhbE5leHQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIjogcmV0dXJucyBhIHBlZXIgYWRkcmVzcyB0byBkaWFsLCBvciBibG9ja3MgdW50aWwgb25lIGlzIGF2YWlsYWJsZS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEaWFsRmFpbGVkKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiOiByZXBvcnRzIGEgcGVlciBkaWFsIGZhaWx1cmUuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRGlhbGVkKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiOiByZXBvcnRzIGEgcGVlciBkaWFsIHN1Y2Nlc3MuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUmVhZHkoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCI6IHJlcG9ydHMgdGhlIHBlZXIgYXMgcm91dGVkIGFuZCByZWFkeS4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEaXNjb25uZWN0ZWQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCI6IHJlcG9ydHMgYSBwZWVyIGRpc2Nvbm5lY3Rpb24uIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiSW5ib3VuZCBjb25uZWN0aW9ucywgdmlhICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRyYW5zcG9ydC5BY2NlcHQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIjoiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFjY2VwdGVkKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiOiByZXBvcnRzIGFuIGluYm91bmQgcGVlciBjb25uZWN0aW9uLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlYWR5KCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiOiByZXBvcnRzIHRoZSBwZWVyIGFzIHJvdXRlZCBhbmQgcmVhZHkuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRGlzY29ubmVjdGVkKCkiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiOiByZXBvcnRzIGEgcGVlciBkaXNjb25uZWN0aW9uLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkV2aWN0aW9ucywgdmlhICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNvbm5lY3Rpb24uQ2xvc2UiKV0pLAogICAgICAgICAgICBfdm0uX3YoIjoiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkV2aWN0TmV4dCgpIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiOiByZXR1cm5zIGEgcGVlciB0byBkaXNjb25uZWN0LCBvciBibG9ja3MgdW50aWwgb25lIGlzIGF2YWlsYWJsZS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJEaXNjb25uZWN0ZWQoKSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCI6IHJlcG9ydHMgYSBwZWVyIGRpc2Nvbm5lY3Rpb24uIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGVzZSBjYWxscyBoYXZlIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiTHk4Z1JHbGhiRTVsZUhRZ2NtVjBkWEp1Y3lCaElIQmxaWElnWVdSa2NtVnpjeUIwYnlCa2FXRnNMQ0JpYkc5amEybHVaeUIxYm5ScGJDQnZibVVnYVhNZ1lYWmhhV3hoWW14bExncG1kVzVqSUNodElDcFFaV1Z5VFdGdVlXZGxjaWtnUkdsaGJFNWxlSFFvWTNSNElHTnZiblJsZUhRdVEyOXVkR1Y0ZENrZ0tFNXZaR1ZCWkdSeVpYTnpMQ0JsY25KdmNpa0tDaTh2SUVScFlXeEdZV2xzWldRZ2NtVndiM0owY3lCaElHUnBZV3dnWm1GcGJIVnlaU0JtYjNJZ2RHaGxJR2RwZG1WdUlHRmtaSEpsYzNNdUNtWjFibU1nS0cwZ0tsQmxaWEpOWVc1aFoyVnlLU0JFYVdGc1JtRnBiR1ZrS0dGa1pISmxjM01nVG05a1pVRmtaSEpsYzNNcElHVnljbTl5Q2dvdkx5QkVhV0ZzWldRZ2NtVndiM0owY3lCaElITjFZMk5sYzNObWRXd2diM1YwWW05MWJtUWdZMjl1Ym1WamRHbHZiaUIwYnlCMGFHVWdaMmwyWlc0Z1lXUmtjbVZ6Y3k0S1puVnVZeUFvYlNBcVVHVmxjazFoYm1GblpYSXBJRVJwWVd4bFpDaGhaR1J5WlhOeklFNXZaR1ZCWkdSeVpYTnpLU0JsY25KdmNnb0tMeThnUVdOalpYQjBaV1FnY21Wd2IzSjBjeUJoSUhOMVkyTmxjM05tZFd3Z2FXNWliM1Z1WkNCamIyNXVaV04wYVc5dUlHWnliMjBnZEdobElHZHBkbVZ1SUc1dlpHVXVDbVoxYm1NZ0tHMGdLbEJsWlhKTllXNWhaMlZ5S1NCQlkyTmxjSFJsWkNod1pXVnlTVVFnVG05a1pVbEVLU0JsY25KdmNnb0tMeThnVW1WaFpIa2djbVZ3YjNKMGN5QjBhR1VnY0dWbGNpQmhjeUJtZFd4c2VTQnliM1YwWldRZ1lXNWtJSEpsWVdSNUlHWnZjaUIxYzJVdUNtWjFibU1nS0cwZ0tsQmxaWEpOWVc1aFoyVnlLU0JTWldGa2VTaHdaV1Z5U1VRZ1RtOWtaVWxFS1NCbGNuSnZjZ29LTHk4Z1JYWnBZM1JPWlhoMElISmxkSFZ5Ym5NZ1lTQndaV1Z5SUVsRUlIUnZJR1JwYzJOdmJtNWxZM1FzSUdKc2IyTnJhVzVuSUhWdWRHbHNJRzl1WlNCcGN5QmhkbUZwYkdGaWJHVXVDbVoxYm1NZ0tHMGdLbEJsWlhKTllXNWhaMlZ5S1NCRmRtbGpkRTVsZUhRb1kzUjRJR052Ym5SbGVIUXVRMjl1ZEdWNGRDa2dLRTV2WkdWSlJDd2daWEp5YjNJcENnb3ZMeUJFYVhOamIyNXVaV04wWldRZ2NtVndiM0owY3lCaElIQmxaWElnWkdselkyOXVibVZqZEdsdmJpNEtablZ1WXlBb2JTQXFVR1ZsY2sxaGJtRm5aWElwSUVScGMyTnZibTVsWTNSbFpDaHdaV1Z5U1VRZ1RtOWtaVWxFS1NCbGNuSnZjZ289IiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiSW50ZXJuYWxseSwgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdXNlcyBhIG51bWVyaWMgcGVlciBzY29yZSB0byBwcmlvcml0aXplIHBlZXJzLCBlLmcuIHdoZW4gZGVjaWRpbmcgd2hpY2ggcGVlcnMgdG8gZGlhbCBuZXh0LiBUaGUgc2NvcmluZyBwb2xpY3kgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZCwgYnV0IHNob3VsZCB0YWtlIGludG8gYWNjb3VudCBlLmcuIG5vZGUgY29uZmlndXJhdGlvbiBzdWNoIGEgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwZXJzaXN0ZW50X3BlZXJzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB1cHRpbWUgYW5kIGNvbm5lY3Rpb24gZmFpbHVyZXMsIHBlcmZvcm1hbmNlLCBhbmQgc28gb24uIFRoZSBtYW5hZ2VyIHdpbGwgYWxzbyBhdHRlbXB0IHRvIGF1dG9tYXRpY2FsbHkgdXBncmFkZSB0byBiZXR0ZXItc2NvcmVkIHBlZXJzIGJ5IGV2aWN0aW5nIGxvd2VyLXNjb3JlZCBwZWVycyB3aGVuIGEgYmV0dGVyIG9uZSBiZWNvbWVzIGF2YWlsYWJsZSAoZS5nLiB3aGVuIGEgcGVyc2lzdGVudCBwZWVyIGNvbWVzIGJhY2sgb25saW5lIGFmdGVyIGFuIG91dGFnZSkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyTWFuYWdlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBzaG91bGQgYWxzbyBoYXZlIGFuIEFQSSBmb3IgcmVwb3J0aW5nIHBlZXIgYmVoYXZpb3IgZnJvbSByZWFjdG9ycyB0aGF0IGFmZmVjdHMgaXRzIHNjb3JlIChlLmcuIHNpZ25pbmcgYSBibG9jayBpbmNyZWFzZXMgdGhlIHNjb3JlLCBkb3VibGUtdm90aW5nIGRlY3JlYXNlcyBpdCBvciBldmVuIGJhbnMgdGhlIHBlZXIpLCBidXQgdGhpcyBoYXMgbm90IHlldCBiZWVuIGRlc2lnbmVkIGFuZCBpbXBsZW1lbnRlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFkZGl0aW9uYWxseSwgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgIF92bS5fdigiIHByb3ZpZGVzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlclVwZGF0ZXMiKV0pLAogICAgICAgIF92bS5fdigiIHN1YnNjcmlwdGlvbnMgdGhhdCB3aWxsIHJlY2VpdmUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyVXBkYXRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGV2ZW50cyB3aGVuZXZlciBzaWduaWZpY2FudCBwZWVyIHN0YXRlIGNoYW5nZXMgaGFwcGVuLiBSZWFjdG9ycyBjYW4gdXNlIHRoZXNlIGUuZy4gdG8ga25vdyB3aGVuIHBlZXJzIGFyZSBjb25uZWN0ZWQgb3IgZGlzY29ubmVjdGVkLCBhbmQgdGFrZSBhcHByb3ByaWF0ZSBhY3Rpb24uIFRoaXMgaXMgY3VycmVudGx5IGZhaXJseSBtaW5pbWFsOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnVTNWaWMyTnlhV0psSUhOMVluTmpjbWxpWlhNZ2RHOGdjR1ZsY2lCMWNHUmhkR1Z6TGlCVWFHVWdZMkZzYkdWeUlHMTFjM1FnWTI5dWMzVnRaU0IwYUdVZ2NHVmxjaUIxY0dSaGRHVnpDaTh2SUdsdUlHRWdkR2x0Wld4NUlHWmhjMmhwYjI0Z1lXNWtJR05zYjNObElIUm9aU0J6ZFdKelkzSnBjSFJwYjI0Z2QyaGxiaUJrYjI1bExDQjBieUJoZG05cFpDQnpkR0ZzYkdsdVp5QjBhR1VLTHk4Z1VHVmxjazFoYm1GblpYSWdZWE1nWkdWc2FYWmxjbmtnYVhNZ2MyVnRhUzF6ZVc1amFISnZibTkxY3l3Z1ozVmhjbUZ1ZEdWbFpDd2dZVzVrSUc5eVpHVnlaV1F1Q21aMWJtTWdLRzBnS2xCbFpYSk5ZVzVoWjJWeUtTQlRkV0p6WTNKcFltVW9LU0FxVUdWbGNsVndaR0YwWlhNS0NpOHZJRkJsWlhKVmNHUmhkR1VnYVhNZ1lTQndaV1Z5SUhWd1pHRjBaU0JsZG1WdWRDQnpaVzUwSUhacFlTQlFaV1Z5VlhCa1lYUmxjeTRLZEhsd1pTQlFaV1Z5VlhCa1lYUmxJSE4wY25WamRDQjdDaUFnSUNCT2IyUmxTVVFnVG05a1pVbEVDaUFnSUNCVGRHRjBkWE1nVUdWbGNsTjBZWFIxY3dwOUNnb3ZMeUJRWldWeVUzUmhkSFZ6SUdseklHRWdjR1ZsY2lCemRHRjBkWE11Q25SNWNHVWdVR1ZsY2xOMFlYUjFjeUJ6ZEhKcGJtY0tDbU52Ym5OMElDZ0tJQ0FnSUZCbFpYSlRkR0YwZFhOVmNDQWdJRkJsWlhKVGRHRjBkWE1nUFNBbWNYVnZkRHQxY0NaeGRXOTBPeUFnSUM4dklFTnZibTVsWTNSbFpDQmhibVFnY21WaFpIa3VDaUFnSUNCUVpXVnlVM1JoZEhWelJHOTNiaUJRWldWeVUzUmhkSFZ6SUQwZ0puRjFiM1E3Wkc5M2JpWnhkVzkwT3lBdkx5QkVhWE5qYjI1dVpXTjBaV1F1Q2lrS0NpOHZJRkJsWlhKVmNHUmhkR1Z6SUdseklHRWdjbVZoYkMxMGFXMWxJSEJsWlhJZ2RYQmtZWFJsSUhOMVluTmpjbWx3ZEdsdmJpNEtkSGx3WlNCUVpXVnlWWEJrWVhSbGN5QnpkSEoxWTNRZ2V5QXVMaTRnZlFvS0x5OGdWWEJrWVhSbGN5QnlaWFIxY201eklHRWdZMmhoYm01bGJDQm1iM0lnWTI5dWMzVnRhVzVuSUhCbFpYSWdkWEJrWVhSbGN5NEtablZ1WXlBb2NIVWdLbEJsWlhKVmNHUmhkR1Z6S1NCVmNHUmhkR1Z6S0NrZ0pteDBPeTFqYUdGdUlGQmxaWEpWY0dSaGRHVUtDaTh2SUVOc2IzTmxJR05zYjNObGN5QjBhR1VnY0dWbGNpQjFjR1JoZEdWeklITjFZbk5qY21sd2RHbHZiaTRLWm5WdVl5QW9jSFVnS2xCbFpYSlZjR1JoZEdWektTQkRiRzl6WlNncENnPT0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyTWFuYWdlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3aWxsIGFsc28gYmUgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBwZWVyIGluZm9ybWF0aW9uIHRvIHRoZSBQRVggcmVhY3RvciB0aGF0IGNhbiBiZSBnb3NzaXBwZWQgdG8gb3RoZXIgbm9kZXMuIFRoaXMgcmVxdWlyZXMgYW4gaW1wcm92ZWQgc3lzdGVtIGZvciBwZWVyIGFkZHJlc3MgZGV0ZWN0aW9uIGFuZCBhZHZlcnRpc2VtZW50LCB0aGF0IGUuZy4gcmVsaWFibHkgZGV0ZWN0cyBwZWVyIGFuZCBzZWxmIGFkZHJlc3NlcyBhbmQgb25seSBnb3NzaXBzIHByaXZhdGUgbmV0d29yayBhZGRyZXNzZXMgdG8gb3RoZXIgcGVlcnMgb24gdGhlIHNhbWUgbmV0d29yaywgYnV0IHRoaXMgc3lzdGVtIGhhcyBub3QgeWV0IGJlZW4gZnVsbHkgZGVzaWduZWQgYW5kIGltcGxlbWVudGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFubmVscyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2hhbm5lbHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoYW5uZWxzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJXaGlsZSBsb3ctbGV2ZWwgZGF0YSBleGNoYW5nZSBoYXBwZW5zIHZpYSB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcmFuc3BvcnQiKV0pLAogICAgICAgIF92bS5fdigiLCB0aGUgaGlnaC1sZXZlbCBBUEkgaXMgYmFzZWQgb24gYSBiaWRpcmVjdGlvbmFsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hhbm5lbCIpXSksCiAgICAgICAgX3ZtLl92KCIgdGhhdCBjYW4gc2VuZCBhbmQgcmVjZWl2ZSBQcm90b2J1ZiBtZXNzYWdlcyBhZGRyZXNzZWQgYnkgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOb2RlSUQiKV0pLAogICAgICAgIF92bS5fdigiLiBBIGNoYW5uZWwgaXMgaWRlbnRpZmllZCBieSBhbiBhcmJpdHJhcnkgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDaGFubmVsSUQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaWRlbnRpZmllciwgYW5kIGNhbiBleGNoYW5nZSBQcm90b2J1ZiBtZXNzYWdlcyBvZiBvbmUgc3BlY2lmaWMgdHlwZSAoc2luY2UgdGhlIHR5cGUgdG8gdW5tYXJzaGFsIGludG8gbXVzdCBiZSBwcmVkZWZpbmVkKS4gTWVzc2FnZSBkZWxpdmVyeSBpcyBhc3luY2hyb25vdXMgYW5kIGF0LW1vc3Qtb25jZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGNoYW5uZWwgY2FuIGFsc28gYmUgdXNlZCB0byByZXBvcnQgcGVlciBlcnJvcnMsIGUuZy4gd2hlbiByZWNlaXZpbmcgYW4gaW52YWxpZCBvciBtYWxpZ25hbnQgbWVzc2FnZS4gVGhpcyBtYXkgY2F1c2UgdGhlIHBlZXIgdG8gYmUgZGlzY29ubmVjdGVkIG9yIGJhbm5lZCBkZXBlbmRpbmcgb24gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQZWVyTWFuYWdlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwb2xpY3ksIGJ1dCBzaG91bGQgcHJvYmFibHkgYmUgcmVwbGFjZWQgYnkgYSBicm9hZGVyIHBlZXIgYmVoYXZpb3IgQVBJIHRoYXQgY2FuIGFsc28gcmVwb3J0IGdvb2QgYmVoYXZpb3IuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hhbm5lbCIpXSksCiAgICAgICAgX3ZtLl92KCIgaGFzIHRoaXMgaW50ZXJmYWNlOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnUTJoaGJtNWxiRWxFSUdseklHRnVJR0Z5WW1sMGNtRnllU0JqYUdGdWJtVnNJRWxFTGdwMGVYQmxJRU5vWVc1dVpXeEpSQ0IxYVc1ME1UWUtDaTh2SUVOb1lXNXVaV3dnYVhNZ1lTQmlhV1JwY21WamRHbHZibUZzSUdOb1lXNXVaV3dnZEc4Z1pYaGphR0Z1WjJVZ1VISnZkRzlpZFdZZ2JXVnpjMkZuWlhNZ2QybDBhQ0J3WldWeWN5NEtkSGx3WlNCRGFHRnVibVZzSUhOMGNuVmpkQ0I3Q2lBZ0lDQkpSQ0FnSUNBZ0lDQWdJQ0JEYUdGdWJtVnNTVVFnSUNBZ0lDQWdJQzh2SUVOb1lXNXVaV3dnU1VRdUNpQWdJQ0JKYmlBZ0lDQWdJQ0FnSUNBbWJIUTdMV05vWVc0Z1JXNTJaV3h2Y0dVZ0lDOHZJRWx1WW05MWJtUWdiV1Z6YzJGblpYTWdLSEJsWlhKeklIUnZJSEpsWVdOMGIzSnpLUzRLSUNBZ0lFOTFkQ0FnSUNBZ0lDQWdJR05vWVc0bWJIUTdMU0JGYm5abGJHOXdaU0FnTHk4Z2IzVjBZbTkxYm1RZ2JXVnpjMkZuWlhNZ0tISmxZV04wYjNKeklIUnZJSEJsWlhKektRb2dJQ0FnUlhKeWIzSWdJQ0FnSUNBZ1kyaGhiaVpzZERzdElGQmxaWEpGY25KdmNpQXZMeUJRWldWeUlHVnljbTl5SUhKbGNHOXlkR2x1Wnk0S0lDQWdJRzFsYzNOaFoyVlVlWEJsSUhCeWIzUnZMazFsYzNOaFoyVWdJQ0FnTHk4Z1EyaGhibTVsYkNkeklHMWxjM05oWjJVZ2RIbHdaU3dnWm05eUlHVXVaeTRnZFc1dFlYSnphR0ZzYVc1bkxncDlDZ292THlCRGJHOXpaU0JqYkc5elpYTWdkR2hsSUdOb1lXNXVaV3dzSUdGc2MyOGdZMnh2YzJsdVp5QlBkWFFnWVc1a0lFVnljbTl5TGdwbWRXNWpJQ2hqSUNwRGFHRnVibVZzS1NCRGJHOXpaU2dwSUdWeWNtOXlDZ292THlCRmJuWmxiRzl3WlNCemNHVmphV1pwWlhNZ2RHaGxJRzFsYzNOaFoyVWdjbVZqWldsMlpYSWdZVzVrSUhObGJtUmxjaTRLZEhsd1pTQkZiblpsYkc5d1pTQnpkSEoxWTNRZ2V3b2dJQ0FnUm5KdmJTQWdJQ0FnSUU1dlpHVkpSQ0FnSUNBZ0lDQWdMeThnVTJWdVpHVnlJQ2hsYlhCMGVTQnBaaUJ2ZFhSaWIzVnVaQ2t1Q2lBZ0lDQlVieUFnSUNBZ0lDQWdUbTlrWlVsRUlDQWdJQ0FnSUNBdkx5QlNaV05sYVhabGNpQW9aVzF3ZEhrZ2FXWWdhVzVpYjNWdVpDa3VDaUFnSUNCQ2NtOWhaR05oYzNRZ1ltOXZiQ0FnSUNBZ0lDQWdJQ0F2THlCVFpXNWtJSFJ2SUdGc2JDQmpiMjV1WldOMFpXUWdjR1ZsY25Nc0lHbG5ibTl5YVc1bklGUnZMZ29nSUNBZ1RXVnpjMkZuWlNBZ0lIQnliM1J2TGsxbGMzTmhaMlVnTHk4Z1RXVnpjMkZuWlNCd1lYbHNiMkZrTGdwOUNnb3ZMeUJRWldWeVJYSnliM0lnYVhNZ1lTQndaV1Z5SUdWeWNtOXlJSEpsY0c5eWRHVmtJSFpwWVNCMGFHVWdSWEp5YjNJZ1kyaGhibTVsYkM0S2RIbHdaU0JRWldWeVJYSnliM0lnYzNSeWRXTjBJSHNLSUNBZ0lFNXZaR1ZKUkNBZ0lFNXZaR1ZKUkFvZ0lDQWdSWEp5SUNBZ0lDQWdaWEp5YjNJS2ZRbz0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkEgY2hhbm5lbCBjYW4gcmVhY2ggYW55IGNvbm5lY3RlZCBwZWVyLCBhbmQgd2lsbCBhdXRvbWF0aWNhbGx5ICh1biltYXJzaGFsIHRoZSBQcm90b2J1ZiBtZXNzYWdlcy4gTWVzc2FnZSBzY2hlZHVsaW5nIGFuZCBxdWV1ZWluZyBpcyBhICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUm91dGVyIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGltcGxlbWVudGF0aW9uIGNvbmNlcm4sIGFuZCBjYW4gdXNlIGFueSBudW1iZXIgb2YgYWxnb3JpdGhtcyBzdWNoIGFzIEZJRk8sIHJvdW5kLXJvYmluLCBwcmlvcml0eSBxdWV1ZXMsIGV0Yy4gU2luY2UgbWVzc2FnZSBkZWxpdmVyeSBpcyBub3QgZ3VhcmFudGVlZCwgYm90aCBpbmJvdW5kIGFuZCBvdXRib3VuZCBtZXNzYWdlcyBtYXkgYmUgZHJvcHBlZCwgYnVmZmVyZWQsIHJlb3JkZXJlZCwgb3IgYmxvY2tlZCBhcyBhcHByb3ByaWF0ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2luY2UgYSBjaGFubmVsIGNhbiBvbmx5IGV4Y2hhbmdlIG1lc3NhZ2VzIG9mIGEgc2luZ2xlIHR5cGUsIGl0IGlzIG9mdGVuIHVzZWZ1bCB0byB1c2UgYSB3cmFwcGVyIG1lc3NhZ2UgdHlwZSB3aXRoIGUuZy4gYSBQcm90b2J1ZiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9uZW9mIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZpZWxkIHRoYXQgc3BlY2lmaWVzIGEgc2V0IG9mIGlubmVyIG1lc3NhZ2UgdHlwZXMgdGhhdCBpdCBjYW4gY29udGFpbi4gVGhlIGNoYW5uZWwgY2FuIGF1dG9tYXRpY2FsbHkgcGVyZm9ybSB0aGlzICh1bil3cmFwcGluZyBpZiB0aGUgb3V0ZXIgbWVzc2FnZSB0eXBlIGltcGxlbWVudHMgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiV3JhcHBlciIpXSksCiAgICAgICAgX3ZtLl92KCIgaW50ZXJmYWNlIChzZWUgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjcmVhY3Rvci1leGFtcGxlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiUmVhY3RvciBFeGFtcGxlIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgZm9yIGFuIGV4YW1wbGUpOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnVjNKaGNIQmxjaUJwY3lCaElGQnliM1J2WW5WbUlHMWxjM05oWjJVZ2RHaGhkQ0JqWVc0Z1kyOXVkR0ZwYmlCaElIWmhjbWxsZEhrZ2IyWWdhVzV1WlhJZ2JXVnpjMkZuWlhNdUNpOHZJRWxtSUdFZ1EyaGhibTVsYkNkeklHMWxjM05oWjJVZ2RIbHdaU0JwYlhCc1pXMWxiblJ6SUZkeVlYQndaWElzSUhSb1pTQmphR0Z1Ym1Wc0lIZHBiR3dLTHk4Z1lYVjBiMjFoZEdsallXeHNlU0FvZFc0cGQzSmhjQ0J3WVhOelpXUWdiV1Z6YzJGblpYTWdkWE5wYm1jZ2RHaGxJR052Ym5SaGFXNWxjaUIwZVhCbExDQnpkV05vSUhSb1lYUUtMeThnZEdobElHTm9ZVzV1Wld3Z1kyRnVJSFJ5WVc1emNHRnlaVzUwYkhrZ2MzVndjRzl5ZENCdGRXeDBhWEJzWlNCdFpYTnpZV2RsSUhSNWNHVnpMZ3AwZVhCbElGZHlZWEJ3WlhJZ2FXNTBaWEptWVdObElIc0tJQ0FnSUhCeWIzUnZMazFsYzNOaFoyVUtDaUFnSUNBdkx5QlhjbUZ3SUhkcGJHd2dkR0ZyWlNCaElHMWxjM05oWjJVZ1lXNWtJSGR5WVhBZ2FYUWdhVzRnZEdocGN5QnZibVV1Q2lBZ0lDQlhjbUZ3S0hCeWIzUnZMazFsYzNOaFoyVXBJR1Z5Y205eUNnb2dJQ0FnTHk4Z1ZXNTNjbUZ3SUhkcGJHd2dkVzUzY21Gd0lIUm9aU0JwYm01bGNpQnRaWE56WVdkbElHTnZiblJoYVc1bFpDQnBiaUIwYUdseklHMWxjM05oWjJVdUNpQWdJQ0JWYm5keVlYQW9LU0FvY0hKdmRHOHVUV1Z6YzJGblpTd2daWEp5YjNJcENuMEsiLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJvdXRlcnMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JvdXRlcnMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUm91dGVycyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcm91dGVyIGV4ZXV0ZXMgUDJQIG5ldHdvcmtpbmcgZm9yIGEgbm9kZSwgdGFraW5nIGluc3RydWN0aW9ucyBmcm9tIGFuZCByZXBvcnRpbmcgZXZlbnRzIHRvIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBlZXJNYW5hZ2VyIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBtYWludGFpbmluZyB0cmFuc3BvcnQgY29ubmVjdGlvbnMgdG8gcGVlcnMsIGFuZCByb3V0aW5nIG1lc3NhZ2VzIGJldHdlZW4gY2hhbm5lbHMgYW5kIHBlZXJzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQcmFjdGljYWxseSBhbGwgY29uY3VycmVuY3kgaW4gdGhlIFAyUCBzdGFjayBoYXMgYmVlbiBtb3ZlZCBpbnRvIHRoZSByb3V0ZXIgYW5kIHJlYWN0b3JzLCB3aGlsZSBhcyBtYW55IG90aGVyIHJlc3BvbnNpYmlsaXRpZXMgYXMgcG9zc2libGUgaGF2ZSBiZWVuIG1vdmVkIGludG8gc2VwYXJhdGUgY29tcG9uZW50cyBzdWNoIGFzIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlRyYW5zcG9ydCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdGhhdCBjYW4gcmVtYWluIGxhcmdlbHkgc3luY2hyb25vdXMuIExpbWl0aW5nIGNvbmN1cnJlbmN5IHRvIGEgc2luZ2xlIGNvcmUgY29tcG9uZW50IG1ha2VzIGl0IG11Y2ggZWFzaWVyIHRvIHJlYXNvbiBhYm91dCBzaW5jZSB0aGVyZSBpcyBvbmx5IGEgc2luZ2xlIGNvbmN1cnJlbmN5IHN0cnVjdHVyZSwgd2hpbGUgdGhlIHJlbWFpbmluZyBjb21wb25lbnRzIGNhbiBiZSBzZXJpYWwsIHNpbXBsZSwgYW5kIGVhc2lseSB0ZXN0YWJsZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJvdXRlciIpXSksCiAgICAgICAgX3ZtLl92KCIgaGFzIGEgdmVyeSBtaW5pbWFsIEFQSSwgc2luY2UgaXQgaXMgbW9zdGx5IGRyaXZlbiBieSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBlZXJNYW5hZ2VyIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJUcmFuc3BvcnQiKV0pLAogICAgICAgIF92bS5fdigiIGV2ZW50czoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiTHk4Z1VtOTFkR1Z5SUcxaGFXNTBZV2x1Y3lCd1pXVnlJSFJ5WVc1emNHOXlkQ0JqYjI1dVpXTjBhVzl1Y3lCaGJtUWdjbTkxZEdWeklHMWxjM05oWjJWeklHSmxkSGRsWlc0S0x5OGdjR1ZsY25NZ1lXNWtJR05vWVc1dVpXeHpMZ3AwZVhCbElGSnZkWFJsY2lCemRISjFZM1FnZXdvZ0lDQWdMeThnVTI5dFpTQmtaWFJoYVd4eklHaGhkbVVnWW1WbGJpQnZiV2wwZEdWa0lHSmxiRzkzTGdvS0lDQWdJR3h2WjJkbGNpQWdJQ0FnSUNBZ0lDQnNiMmN1VEc5bloyVnlDaUFnSUNCdmNIUnBiMjV6SUNBZ0lDQWdJQ0FnVW05MWRHVnlUM0IwYVc5dWN3b2dJQ0FnYm05a1pVbHVabThnSUNBZ0lDQWdJRTV2WkdWSmJtWnZDaUFnSUNCd2NtbDJTMlY1SUNBZ0lDQWdJQ0FnWTNKNWNIUnZMbEJ5YVhaTFpYa0tJQ0FnSUhCbFpYSk5ZVzVoWjJWeUlDQWdJQ0FxVUdWbGNrMWhibUZuWlhJS0lDQWdJSFJ5WVc1emNHOXlkSE1nSUNBZ0lDQmJYVlJ5WVc1emNHOXlkQW9LSUNBZ0lIQmxaWEpOZEhnZ0lDQWdJQ0FnSUNCemVXNWpMbEpYVFhWMFpYZ0tJQ0FnSUhCbFpYSlJkV1YxWlhNZ0lDQWdJQ0J0WVhCYlRtOWtaVWxFWFhGMVpYVmxDZ29nSUNBZ1kyaGhibTVsYkUxMGVDQWdJQ0FnSUhONWJtTXVVbGROZFhSbGVBb2dJQ0FnWTJoaGJtNWxiRkYxWlhWbGN5QWdJRzFoY0Z0RGFHRnVibVZzU1VSZGNYVmxkV1VLZlFvS0x5OGdUM0JsYmtOb1lXNXVaV3dnYjNCbGJuTWdZU0J1WlhjZ1kyaGhibTVsYkNCbWIzSWdkR2hsSUdkcGRtVnVJRzFsYzNOaFoyVWdkSGx3WlM0Z1ZHaGxJR05oYkd4bGNpQnRkWE4wQ2k4dklHTnNiM05sSUhSb1pTQmphR0Z1Ym1Wc0lIZG9aVzRnWkc5dVpTd2dZbVZtYjNKbElITjBiM0J3YVc1bklIUm9aU0JTYjNWMFpYSXVJRzFsYzNOaFoyVlVlWEJsSUdseklIUm9aUW92THlCMGVYQmxJRzltSUcxbGMzTmhaMlVnY0dGemMyVmtJSFJvY205MVoyZ2dkR2hsSUdOb1lXNXVaV3d1Q21aMWJtTWdLSElnS2xKdmRYUmxjaWtnVDNCbGJrTm9ZVzV1Wld3b2FXUWdRMmhoYm01bGJFbEVMQ0J0WlhOellXZGxWSGx3WlNCd2NtOTBieTVOWlhOellXZGxLU0FvS2tOb1lXNXVaV3dzSUdWeWNtOXlLUW9LTHk4Z1UzUmhjblFnYzNSaGNuUnpJSFJvWlNCeWIzVjBaWElzSUdOdmJtNWxZM1JwYm1jZ2RHOGdjR1ZsY25NZ1lXNWtJSEp2ZFhScGJtY2diV1Z6YzJGblpYTXVDbVoxYm1NZ0tISWdLbEp2ZFhSbGNpa2dVM1JoY25Rb0tTQmxjbkp2Y2dvS0x5OGdVM1J2Y0NCemRHOXdjeUIwYUdVZ2NtOTFkR1Z5TENCa2FYTmpiMjV1WldOMGFXNW5JR1p5YjIwZ1lXeHNJSEJsWlhKeklHRnVaQ0J6ZEc5d2NHbHVaeUJ0WlhOellXZGxJSEp2ZFhScGJtY3VDbVoxYm1NZ0tISWdLbEp2ZFhSbGNpa2dVM1J2Y0NncElHVnljbTl5Q2c9PSIsCiAgICAgICAgfSwKICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFsbCBHbyBjaGFubmVsIHNlbmRzIGluIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJvdXRlciIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhbmQgcmVhY3RvcnMgYXJlIGJsb2NraW5nICh0aGUgcm91dGVyIGFsc28gc2VsZWN0cyBvbiBzaWduYWwgY2hhbm5lbHMgZm9yIGNsb3N1cmUgYW5kIHNodXRkb3duKS4gVGhlIHJlc3BvbnNpYmlsaXR5IGZvciBtZXNzYWdlIHNjaGVkdWxpbmcsIHByaW9yaXRpemF0aW9uLCBiYWNrcHJlc3N1cmUsIGFuZCBsb2FkIHNoZWRkaW5nIGlzIGNlbnRyYWxpemVkIGluIGEgY29yZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInF1ZXVlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGludGVyZmFjZSB0aGF0IGlzIHVzZWQgYXQgY29udGVudGlvbiBwb2ludHMgKGkuZS4gZnJvbSBhbGwgcGVlcnMgdG8gYSBzaW5nbGUgY2hhbm5lbCwgYW5kIGZyb20gYWxsIGNoYW5uZWxzIHRvIGEgc2luZ2xlIHBlZXIpOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnY1hWbGRXVWdaRzlsY3lCUmIxTWdjMk5vWldSMWJHbHVaeUJtYjNJZ1JXNTJaV3h2Y0dWekxDQmxibkYxWlhWbGFXNW5JR0Z1WkNCa1pYRjFaWFZsYVc1bklHRmpZMjl5WkdsdVp3b3ZMeUIwYnlCemIyMWxJSEJ2YkdsamVTNGdVWFZsZFdWeklHRnlaU0IxYzJWa0lHRjBJR052Ym5SbGJuUnBiMjRnY0c5cGJuUnpMQ0JwTG1VdU9nb3ZMeUF0SUZKbFkyVnBkbWx1WnlCcGJtSnZkVzVrSUcxbGMzTmhaMlZ6SUhSdklHRWdjMmx1WjJ4bElHTm9ZVzV1Wld3Z1puSnZiU0JoYkd3Z2NHVmxjbk11Q2k4dklDMGdVMlZ1WkdsdVp5QnZkWFJpYjNWdVpDQnRaWE56WVdkbGN5QjBieUJoSUhOcGJtZHNaU0J3WldWeUlHWnliMjBnWVd4c0lHTm9ZVzV1Wld4ekxncDBlWEJsSUhGMVpYVmxJR2x1ZEdWeVptRmpaU0I3Q2lBZ0lDQXZMeUJsYm5GMVpYVmxJSEpsZEhWeWJuTWdZU0JqYUdGdWJtVnNJR1p2Y2lCemRXSnRhWFIwYVc1bklHVnVkbVZzYjNCbGN5NEtJQ0FnSUdWdWNYVmxkV1VvS1NCamFHRnVKbXgwT3kwZ1JXNTJaV3h2Y0dVS0NpQWdJQ0F2THlCa1pYRjFaWFZsSUhKbGRIVnlibk1nWVNCamFHRnVibVZzSUc5eVpHVnlaV1FnWVdOamIzSmthVzVuSUhSdklITnZiV1VnY1hWbGRXVnBibWNnY0c5c2FXTjVMZ29nSUNBZ1pHVnhkV1YxWlNncElDWnNkRHN0WTJoaGJpQkZiblpsYkc5d1pRb0tJQ0FnSUM4dklHTnNiM05sSUdOc2IzTmxjeUIwYUdVZ2NYVmxkV1V1SUVGbWRHVnlJSFJvYVhNZ1kyRnNiQ0JsYm5GMVpYVmxLQ2tnZDJsc2JDQmliRzlqYXl3Z2MyOGdkR2hsQ2lBZ0lDQXZMeUJqWVd4c1pYSWdiWFZ6ZENCelpXeGxZM1FnYjI0Z1kyeHZjMlZrS0NrZ1lYTWdkMlZzYkNCMGJ5QmhkbTlwWkNCaWJHOWphMmx1WnlCbWIzSmxkbVZ5TGlCVWFHVUtJQ0FnSUM4dklHVnVjWFZsZFdVb0tTQmhibVFnWkdWeGRXVjFaU2dwSUdOb1lXNXVaV3h6SUhkcGJHd2dibTkwSUdKbElHTnNiM05sWkM0S0lDQWdJR05zYjNObEtDa0tDaUFnSUNBdkx5QmpiRzl6WldRZ2NtVjBkWEp1Y3lCaElHTm9ZVzV1Wld3Z2RHaGhkQ2R6SUdOc2IzTmxaQ0IzYUdWdUlIUm9aU0J6WTJobFpIVnNaWElnYVhNZ1kyeHZjMlZrTGdvZ0lDQWdZMnh2YzJWa0tDa2dKbXgwT3kxamFHRnVJSE4wY25WamRIdDlDbjBLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gaXMgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJmaWZvUXVldWUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHdoaWNoIGlzIGEgc2ltcGxlIHVuYnVmZmVyZWQgbG9zc2xlc3MgcXVldWUgdGhhdCBwYXNzZXMgbWVzc2FnZXMgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSByZWNlaXZlZCBhbmQgYmxvY2tzIHVudGlsIHRoZSBtZXNzYWdlIGlzIGRlbGl2ZXJlZCAoaS5lLiBpdCBpcyBhIEdvIGNoYW5uZWwpLiBUaGUgcm91dGVyIHdpbGwgbmVlZCBhIG1vcmUgc29waGlzdGljYXRlZCBxdWV1ZWluZyBwb2xpY3ksIGJ1dCB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgaW50ZXJuYWwgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSb3V0ZXIiKV0pLAogICAgICAgIF92bS5fdigiIGdvcm91dGluZSBzdHJ1Y3R1cmUgYW5kIGRlc2lnbiBpcyBkZXNjcmliZWQgaW4gdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUm91dGVyIildKSwKICAgICAgICBfdm0uX3YoIiBHb0RvYywgd2hpY2ggaXMgaW5jbHVkZWQgYmVsb3cgZm9yIHJlZmVyZW5jZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiTHk4Z1QyNGdjM1JoY25SMWNDd2dkR2h5WldVZ2JXRnBiaUJuYjNKdmRYUnBibVZ6SUdGeVpTQnpjR0YzYm1Wa0lIUnZJRzFoYVc1MFlXbHVJSEJsWlhJZ1kyOXVibVZqZEdsdmJuTTZDaTh2Q2k4dklDQWdaR2xoYkZCbFpYSnpLQ2s2SUdsdUlHRWdiRzl2Y0N3Z1kyRnNiSE1nVUdWbGNrMWhibUZuWlhJdVJHbGhiRTVsZUhRb0tTQjBieUJuWlhRZ2RHaGxJRzVsZUhRZ2NHVmxjZ292THlBZ0lHRmtaSEpsYzNNZ2RHOGdaR2xoYkNCaGJtUWdjM0JoZDI1eklHRWdaMjl5YjNWMGFXNWxJSFJvWVhRZ1pHbGhiSE1nZEdobElIQmxaWElzSUdoaGJtUnphR0ZyWlhNS0x5OGdJQ0IzYVhSb0lHbDBMQ0JoYm1RZ1ltVm5hVzV6SUhSdklISnZkWFJsSUcxbGMzTmhaMlZ6SUdsbUlITjFZMk5sYzNObWRXd3VDaTh2Q2k4dklDQWdZV05qWlhCMFVHVmxjbk1vS1RvZ2FXNGdZU0JzYjI5d0xDQjNZV2wwY3lCbWIzSWdZVzRnYVc1aWIzVnVaQ0JqYjI1dVpXTjBhVzl1SUhacFlRb3ZMeUFnSUZSeVlXNXpjRzl5ZEM1QlkyTmxjSFFvS1NCaGJtUWdjM0JoZDI1eklHRWdaMjl5YjNWMGFXNWxJSFJvWVhRZ2FHRnVaSE5vWVd0bGN5QjNhWFJvSUdsMElHRnVaQW92THlBZ0lHSmxaMmx1Y3lCMGJ5QnliM1YwWlNCdFpYTnpZV2RsY3lCcFppQnpkV05qWlhOelpuVnNMZ292THdvdkx5QWdJR1YyYVdOMFVHVmxjbk1vS1RvZ2FXNGdZU0JzYjI5d0xDQmpZV3hzY3lCUVpXVnlUV0Z1WVdkbGNpNUZkbWxqZEU1bGVIUW9LU0IwYnlCblpYUWdkR2hsSUc1bGVIUUtMeThnSUNCd1pXVnlJSFJ2SUdWMmFXTjBMQ0JoYm1RZ1pHbHpZMjl1Ym1WamRITWdhWFFnWW5rZ1kyeHZjMmx1WnlCcGRITWdiV1Z6YzJGblpTQnhkV1YxWlM0S0x5OEtMeThnVjJobGJpQmhJSEJsWlhJZ2FYTWdZMjl1Ym1WamRHVmtMQ0JoYmlCdmRYUmliM1Z1WkNCd1pXVnlJRzFsYzNOaFoyVWdjWFZsZFdVZ2FYTWdjbVZuYVhOMFpYSmxaQ0JwYmdvdkx5QndaV1Z5VVhWbGRXVnpMQ0JoYm1RZ2NtOTFkR1ZRWldWeUtDa2dhWE1nWTJGc2JHVmtJSFJ2SUhOd1lYZHVJRzltWmlCMGQyOGdZV1JrYVhScGIyNWhiQ0JuYjNKdmRYUnBibVZ6T2dvdkx3b3ZMeUFnSUhObGJtUlFaV1Z5S0NrNklIZGhhWFJ6SUdadmNpQmhiaUJ2ZFhSaWIzVnVaQ0J0WlhOellXZGxJR1p5YjIwZ2RHaGxJSEJsWlhKUmRXVjFaWE1nY1hWbGRXVXNDaTh2SUNBZ2JXRnljMmhoYkhNZ2FYUXNJR0Z1WkNCd1lYTnpaWE1nYVhRZ2RHOGdkR2hsSUhCbFpYSWdkSEpoYm5Od2IzSjBJSGRvYVdOb0lHUmxiR2wyWlhKeklHbDBMZ292THdvdkx5QWdJSEpsWTJWcGRtVlFaV1Z5S0NrNklIZGhhWFJ6SUdadmNpQmhiaUJwYm1KdmRXNWtJRzFsYzNOaFoyVWdabkp2YlNCMGFHVWdjR1ZsY2lCMGNtRnVjM0J2Y25Rc0NpOHZJQ0FnZFc1dFlYSnphR0ZzY3lCcGRDd2dZVzVrSUhCaGMzTmxjeUJwZENCMGJ5QjBhR1VnWVhCd2NtOXdjbWxoZEdVZ2FXNWliM1Z1WkNCamFHRnVibVZzSUhGMVpYVmxDaTh2SUNBZ2FXNGdZMmhoYm01bGJGRjFaWFZsY3k0S0x5OEtMeThnVjJobGJpQmhJSEpsWVdOMGIzSWdiM0JsYm5NZ1lTQmphR0Z1Ym1Wc0lIWnBZU0JQY0dWdVEyaGhibTVsYkN3Z1lXNGdhVzVpYjNWdVpDQmphR0Z1Ym1Wc0lHMWxjM05oWjJVS0x5OGdjWFZsZFdVZ2FYTWdjbVZuYVhOMFpYSmxaQ0JwYmlCamFHRnVibVZzVVhWbGRXVnpMQ0JoYm1RZ1lTQmphR0Z1Ym1Wc0lHZHZjbTkxZEdsdVpTQnBjeUJ6Y0dGM2JtVmtPZ292THdvdkx5QWdJSEp2ZFhSbFEyaGhibTVsYkNncE9pQjNZV2wwY3lCbWIzSWdZVzRnYjNWMFltOTFibVFnYldWemMyRm5aU0JtY205dElIUm9aU0JqYUdGdWJtVnNMQ0JzYjI5cmN3b3ZMeUFnSUhWd0lIUm9aU0J5WldOcGNHbGxiblFnY0dWbGNpZHpJRzkxZEdKdmRXNWtJRzFsYzNOaFoyVWdjWFZsZFdVZ2FXNGdjR1ZsY2xGMVpYVmxjeXdnWVc1a0lITjFZbTFwZEhNS0x5OGdJQ0IwYUdVZ2JXVnpjMkZuWlNCMGJ5QnBkQzRLTHk4S0x5OGdRV3hzSUdOb1lXNXVaV3dnYzJWdVpITWdhVzRnZEdobElISnZkWFJsY2lCaGNtVWdZbXh2WTJ0cGJtY3VJRWwwSUdseklIUm9aU0J5WlhOd2IyNXphV0pwYkdsMGVTQnZaaUIwYUdVS0x5OGdjWFZsZFdVZ2FXNTBaWEptWVdObElHbHVJSEJsWlhKUmRXVjFaWE1nWVc1a0lHTm9ZVzV1Wld4UmRXVjFaWE1nZEc4Z2NISnBiM0pwZEdsNlpTQmhibVFnWkhKdmNBb3ZMeUJ0WlhOellXZGxjeUJoY3lCaGNIQnliM0J5YVdGMFpTQmtkWEpwYm1jZ1kyOXVkR1Z1ZEdsdmJpQjBieUJ3Y21WMlpXNTBJSE4wWVd4c2N5QmhibVFnWlc1emRYSmxJR2R2YjJRS0x5OGdjWFZoYkdsMGVTQnZaaUJ6WlhKMmFXTmxMZ289IiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJyZWFjdG9yLWV4YW1wbGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlYWN0b3ItZXhhbXBsZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVhY3RvciBFeGFtcGxlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoaWxlIHJlYWN0b3JzIGFyZSBhIGZpcnN0LWNsYXNzIGNvbmNlcHQgaW4gdGhlIGN1cnJlbnQgUDJQIHN0YWNrIChpLmUuIHRoZXJlIGlzIGFuIGV4cGxpY2l0ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicDJwLlJlYWN0b3IiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgaW50ZXJmYWNlKSwgdGhleSB3aWxsIHNpbXBseSBiZSBhIGRlc2lnbiBwYXR0ZXJuIGluIHRoZSBuZXcgc3RhY2ssIGxvb3NlbHkgZGVmaW5lZCBhcyAic29tZXRoaW5nIHdoaWNoIGxpc3RlbnMgb24gYSBjaGFubmVsIGFuZCByZWFjdHMgdG8gbWVzc2FnZXMiLicKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaW5jZSByZWFjdG9ycyBoYXZlIHZlcnkgZmV3IGZvcm1hbCBjb25zdHJhaW50cywgdGhleSBjYW4gYmUgaW1wbGVtZW50ZWQgaW4gYSB2YXJpZXR5IG9mIHdheXMuIFRoZXJlIGlzIGN1cnJlbnRseSBubyByZWNvbW1lbmRlZCBwYXR0ZXJuIGZvciBpbXBsZW1lbnRpbmcgcmVhY3RvcnMsIHRvIGF2b2lkIG92ZXJzcGVjaWZpY2F0aW9uIGFuZCBzY29wZSBjcmVlcCBpbiB0aGlzIEFEUi4gSG93ZXZlciwgcHJvdG90eXBpbmcgYW5kIGRldmVsb3BpbmcgYSByZWFjdG9yIHBhdHRlcm4gc2hvdWxkIGJlIGRvbmUgZWFybHkgZHVyaW5nIGltcGxlbWVudGF0aW9uLCB0byBtYWtlIHN1cmUgcmVhY3RvcnMgYnVpbHQgdXNpbmcgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ2hhbm5lbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbnRlcmZhY2UgY2FuIHNhdGlzZnkgdGhlIG5lZWRzIGZvciBjb252ZW5pZW5jZSwgZGV0ZXJtaW5pc3RpYyB0ZXN0cywgYW5kIHJlbGlhYmlsaXR5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWxvdyBpcyBhIHRyaXZpYWwgZXhhbXBsZSBvZiBhIHNpbXBsZSBlY2hvIHJlYWN0b3IgaW1wbGVtZW50ZWQgYXMgYSBmdW5jdGlvbi4gVGhlIHJlYWN0b3Igd2lsbCBleGNoYW5nZSB0aGUgZm9sbG93aW5nIFByb3RvYnVmIG1lc3NhZ2VzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJwcm90b2J1ZiIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJiV1Z6YzJGblpTQkZZMmh2VFdWemMyRm5aU0I3Q2lBZ0lDQnZibVZ2WmlCcGJtNWxjaUI3Q2lBZ0lDQWdJQ0FnVUdsdVowMWxjM05oWjJVZ2NHbHVaeUE5SURFN0NpQWdJQ0FnSUNBZ1VHOXVaMDFsYzNOaFoyVWdjRzl1WnlBOUlESTdDaUFnSUNCOUNuMEtDbTFsYzNOaFoyVWdVR2x1WjAxbGMzTmhaMlVnZXdvZ0lDQWdjM1J5YVc1bklHTnZiblJsYm5RZ1BTQXhPd3A5Q2dwdFpYTnpZV2RsSUZCdmJtZE5aWE56WVdkbElIc0tJQ0FnSUhOMGNtbHVaeUJqYjI1MFpXNTBJRDBnTVRzS2ZRbz0iLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbXBsZW1lbnRpbmcgdGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiV3JhcHBlciIpXSksCiAgICAgICAgX3ZtLl92KCIgaW50ZXJmYWNlIGZvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkVjaG9NZXNzYWdlIildKSwKICAgICAgICBfdm0uX3YoIiBhbGxvd3MgdHJhbnNwYXJlbnRseSBwYXNzaW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGluZ01lc3NhZ2UiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBvbmdNZXNzYWdlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRocm91Z2ggdGhlIGNoYW5uZWwsIHdoZXJlIGl0IHdpbGwgYXV0b21hdGljYWxseSBiZSAodW4pd3JhcHBlZCBpbiBhbiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkVjaG9NZXNzYWdlIildKSwKICAgICAgICBfdm0uX3YoIjoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiWm5WdVl5QW9iU0FxUldOb2IwMWxjM05oWjJVcElGZHlZWEFvYVc1dVpYSWdjSEp2ZEc4dVRXVnpjMkZuWlNrZ1pYSnliM0lnZXdvZ0lDQWdjM2RwZEdOb0lHbHVibVZ5SURvOUlHbHVibVZ5TGloMGVYQmxLU0I3Q2lBZ0lDQmpZWE5sSUNwUWFXNW5UV1Z6YzJGblpUb0tJQ0FnSUNBZ0lDQnRMa2x1Ym1WeUlEMGdKbUZ0Y0R0RlkyaHZUV1Z6YzJGblpWOVFhVzVuVFdWemMyRm5aWHRRYVc1bk9pQnBibTVsY24wS0lDQWdJR05oYzJVZ0tsQnZibWROWlhOellXZGxPZ29nSUNBZ0lDQWdJRzB1U1c1dVpYSWdQU0FtWVcxd08wVmphRzlOWlhOellXZGxYMUJ2Ym1kTlpYTnpZV2RsZTFCdmJtYzZJR2x1Ym1WeWZRb2dJQ0FnWkdWbVlYVnNkRG9LSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabTEwTGtWeWNtOXlaaWdtY1hWdmREdDFibXR1YjNkdUlHMWxjM05oWjJVZ0pWUW1jWFZ2ZERzc0lHbHVibVZ5S1FvZ0lDQWdmUW9nSUNBZ2NtVjBkWEp1SUc1cGJBcDlDZ3BtZFc1aklDaHRJQ3BGWTJodlRXVnpjMkZuWlNrZ1ZXNTNjbUZ3S0NrZ0tIQnliM1J2TGsxbGMzTmhaMlVzSUdWeWNtOXlLU0I3Q2lBZ0lDQnpkMmwwWTJnZ2FXNXVaWElnT2owZ2JTNUpibTVsY2k0b2RIbHdaU2tnZXdvZ0lDQWdZMkZ6WlNBcVJXTm9iMDFsYzNOaFoyVmZVR2x1WjAxbGMzTmhaMlU2Q2lBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1Ym1WeUxsQnBibWNzSUc1cGJBb2dJQ0FnWTJGelpTQXFSV05vYjAxbGMzTmhaMlZmVUc5dVowMWxjM05oWjJVNkNpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdWJtVnlMbEJ2Ym1jc0lHNXBiQW9nSUNBZ1pHVm1ZWFZzZERvS0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1sc0xDQm1iWFF1UlhKeWIzSm1LQ1p4ZFc5ME8zVnVhMjV2ZDI0Z2JXVnpjMkZuWlNBbFZDWnhkVzkwT3l3Z2FXNXVaWElwQ2lBZ0lDQjlDbjBLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHJlYWN0b3IgaXRzZWxmIHdvdWxkIGJlIGltcGxlbWVudGVkIGUuZy4gbGlrZSB0aGlzOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJMeThnVW5WdVJXTm9iMUpsWVdOMGIzSWdkMmx5WlhNZ2RYQWdZVzRnWldOb2J5QnlaV0ZqZEc5eUlIUnZJR0VnY205MWRHVnlJR0Z1WkNCeWRXNXpJR2wwTGdwbWRXNWpJRkoxYmtWamFHOVNaV0ZqZEc5eUtISnZkWFJsY2lBcWNESndMbEp2ZFhSbGNpd2djR1ZsY2sxaGJtRm5aWElnS25BeWNDNVFaV1Z5VFdGdVlXZGxjaWtnWlhKeWIzSWdld29nSUNBZ1kyaGhibTVsYkN3Z1pYSnlJRG85SUhKdmRYUmxjaTVQY0dWdVEyaGhibTVsYkNneExDQW1ZVzF3TzBWamFHOU5aWE56WVdkbGUzMHBDaUFnSUNCcFppQmxjbklnSVQwZ2JtbHNJSHNLSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5Q2lBZ0lDQjlDaUFnSUNCa1pXWmxjaUJqYUdGdWJtVnNMa05zYjNObEtDa0tJQ0FnSUhCbFpYSlZjR1JoZEdWeklEbzlJSEJsWlhKTllXNWhaMlZ5TGxOMVluTmpjbWxpWlNncENpQWdJQ0JrWldabGNpQndaV1Z5VlhCa1lYUmxjeTVEYkc5elpTZ3BDZ29nSUNBZ2NtVjBkWEp1SUVWamFHOVNaV0ZqZEc5eUtHTnZiblJsZUhRdVFtRmphMmR5YjNWdVpDZ3BMQ0JqYUdGdWJtVnNMQ0J3WldWeVZYQmtZWFJsY3lrS2ZRb0tMeThnUldOb2IxSmxZV04wYjNJZ2NISnZkbWxrWlhNZ1lXNGdaV05vYnlCelpYSjJhV05sTENCd2FXNW5hVzVuSUdGc2JDQnJibTkzYmlCd1pXVnljeUIxYm5ScGJDQjBhR1VnWjJsMlpXNEtMeThnWTI5dWRHVjRkQ0JwY3lCallXNWpaV3hsWkM0S1puVnVZeUJGWTJodlVtVmhZM1J2Y2loamRIZ2dZMjl1ZEdWNGRDNURiMjUwWlhoMExDQmphR0Z1Ym1Wc0lDcHdNbkF1UTJoaGJtNWxiQ3dnY0dWbGNsVndaR0YwWlhNZ0tuQXljQzVRWldWeVZYQmtZWFJsY3lrZ1pYSnliM0lnZXdvZ0lDQWdkR2xqYTJWeUlEbzlJSFJwYldVdVRtVjNWR2xqYTJWeUtEVWdLaUIwYVcxbExsTmxZMjl1WkNrS0lDQWdJR1JsWm1WeUlIUnBZMnRsY2k1VGRHOXdLQ2tLQ2lBZ0lDQm1iM0lnZXdvZ0lDQWdJQ0FnSUhObGJHVmpkQ0I3Q2lBZ0lDQWdJQ0FnTHk4Z1UyVnVaQ0J3YVc1bklHMWxjM05oWjJVZ2RHOGdZV3hzSUd0dWIzZHVJSEJsWlhKeklHVjJaWEo1SURVZ2MyVmpiMjVrY3k0S0lDQWdJQ0FnSUNCallYTmxJQ1pzZERzdGRHbGphMlZ5TGtNNkNpQWdJQ0FnSUNBZ0lDQWdJR05vWVc1dVpXd3VUM1YwSUNac2REc3RJRVZ1ZG1Wc2IzQmxld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRbkp2WVdSallYTjBPaUIwY25WbExBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlRvZ0lDQW1ZVzF3TzFCcGJtZE5aWE56WVdkbGUwTnZiblJsYm5RNklDWnhkVzkwTy9DZmtZc21jWFZ2ZER0OUxBb2dJQ0FnSUNBZ0lDQWdJQ0I5Q2dvZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ2NtVmpaV2wyWlNCaElHMWxjM05oWjJVZ1puSnZiU0JoSUhCbFpYSXNJR1ZwZEdobGNpQnlaWE53YjI1a0lIUnZJSEJwYm1jc0lHOTFkSEIxZEFvZ0lDQWdJQ0FnSUM4dklIQnZibWNzSUc5eUlISmxjRzl5ZENCd1pXVnlJR1Z5Y205eUlHOXVJSFZ1YTI1dmQyNGdiV1Z6YzJGblpTQjBlWEJsTGdvZ0lDQWdJQ0FnSUdOaGMyVWdaVzUyWld4dmNHVWdPajBnSm14ME95MWphR0Z1Ym1Wc0xrbHVPZ29nSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnYlhObklEbzlJR1Z1ZG1Wc2IzQmxMazFsYzNOaFoyVXVLSFI1Y0dVcElIc0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXFVR2x1WjAxbGMzTmhaMlU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdGdWJtVnNMazkxZENBbWJIUTdMU0JGYm5abGJHOXdaWHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVWJ6b2dJQ0FnSUNCbGJuWmxiRzl3WlM1R2NtOXRMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlU2SUNaaGJYQTdVRzl1WjAxbGMzTmhaMlY3UTI5dWRHVnVkRG9nYlhObkxrTnZiblJsYm5SOUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb0tJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXFVRzl1WjAxbGMzTmhaMlU2Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYlhRdVVISnBiblJtS0NaeGRXOTBPeVZ4SUhKbGNHeHBaV1FnZDJsMGFDQWxjVnh1Sm5GMWIzUTdMQ0JsYm5abGJHOXdaUzVHY205dExDQnRjMmN1UTI5dWRHVnVkQ2tLQ2lBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHRnVibVZzTGtWeWNtOXlJQ1pzZERzdElGQmxaWEpGY25KdmNuc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JRWldWeVNVUTZJR1Z1ZG1Wc2IzQmxMa1p5YjIwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSWEp5T2lBZ0lDQm1iWFF1UlhKeWIzSm1LQ1p4ZFc5ME8zVnVaWGh3WldOMFpXUWdiV1Z6YzJGblpTQWxWQ1p4ZFc5ME95d2diWE5uS1N3S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdmUW9LSUNBZ0lDQWdJQ0F2THlCUGRYUndkWFFnYVc1bWJ5QmhZbTkxZENCaGJua2djR1ZsY2lCemRHRjBkWE1nWTJoaGJtZGxjeTRLSUNBZ0lDQWdJQ0JqWVhObElIQmxaWEpWY0dSaGRHVWdPajBnSm14ME95MXdaV1Z5VlhCa1lYUmxjem9LSUNBZ0lDQWdJQ0FnSUNBZ1ptMTBMbEJ5YVc1MFppZ21jWFZ2ZER0UVpXVnlJQ1Z4SUdOb1lXNW5aV1FnYzNSaGRIVnpJSFJ2SUNWeEpuRjFiM1E3TENCd1pXVnlWWEJrWVhSbExsQmxaWEpKUkN3Z2NHVmxjbFZ3WkdGMFpTNVRkR0YwZFhNcENnb2dJQ0FnSUNBZ0lDOHZJRVY0YVhRZ2QyaGxiaUJqYjI1MFpYaDBJR2x6SUdOaGJtTmxiR1ZrTGdvZ0lDQWdJQ0FnSUdOaGMyVWdKbXgwT3kxamRIZ3VSRzl1WlNncE9nb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibWxzQ2lBZ0lDQWdJQ0FnZlFvZ0lDQWdmUXA5Q2c9PSIsCiAgICAgICAgfSwKICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3RhdHVzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3RhdHVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9wb3NlZCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldhcyBwYXJ0aWFsbHkgaW1wbGVtZW50ZWQgaW4gdjAuMzUgKCIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy81NjcwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiM1NjcwIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIikiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2VxdWVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zZXF1ZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnNlcXVlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwb3NpdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9zaXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBvc2l0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlJlZHVjZWQgY291cGxpbmcgYW5kIHNpbXBsaWZpZWQgaW50ZXJmYWNlcyBzaG91bGQgbGVhZCB0byBiZXR0ZXIgdW5kZXJzdGFuZGFiaWxpdHksIGluY3JlYXNlZCByZWxpYWJpbGl0eSwgYW5kIG1vcmUgdGVzdGluZy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJVc2luZyBtZXNzYWdlIHBhc3NpbmcgdmlhIEdvIGNoYW5uZWxzIGdpdmVzIGJldHRlciBjb250cm9sIG9mIGJhY2twcmVzc3VyZSBhbmQgcXVhbGl0eS1vZi1zZXJ2aWNlIHNjaGVkdWxpbmcuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiUGVlciBsaWZlY3ljbGUgYW5kIGNvbm5lY3Rpb24gbWFuYWdlbWVudCBpcyBjZW50cmFsaXplZCBpbiBhIHNpbmdsZSBlbnRpdHksIG1ha2luZyBpdCBlYXNpZXIgdG8gcmVhc29uIGFib3V0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRldGVjdGlvbiwgYWR2ZXJ0aXNlbWVudCwgYW5kIGV4Y2hhbmdlIG9mIG5vZGUgYWRkcmVzc2VzIHdpbGwgYmUgaW1wcm92ZWQuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQWRkaXRpb25hbCB0cmFuc3BvcnRzIChlLmcuIFFVSUMpIGNhbiBiZSBpbXBsZW1lbnRlZCBhbmQgdXNlZCBpbiBwYXJhbGxlbCB3aXRoIHRoZSBleGlzdGluZyBNQ29ubiBwcm90b2NvbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgUDJQIHByb3RvY29sIHdpbGwgbm90IGJlIGJyb2tlbiBpbiB0aGUgaW5pdGlhbCB2ZXJzaW9uLCBpZiBwb3NzaWJsZS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmVnYXRpdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25lZ2F0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOZWdhdGl2ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJGdWxseSBpbXBsZW1lbnRpbmcgdGhlIG5ldyBkZXNpZ24gYXMgaW5kZW5kZWQgaXMgbGlrZWx5IHRvIHJlcXVpcmUgYnJlYWtpbmcgY2hhbmdlcyB0byB0aGUgUDJQIHByb3RvY29sIGF0IHNvbWUgcG9pbnQsIGFsdGhvdWdoIHRoZSBpbml0aWFsIGltcGxlbWVudGF0aW9uIHNob3VsZG4ndC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJHcmFkdWFsbHkgbWlncmF0aW5nIHRoZSBleGlzdGluZyBzdGFjayBhbmQgbWFpbnRhaW5pbmcgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2lsbCBiZSBtb3JlIGxhYm9yLWludGVuc2l2ZSB0aGFuIHNpbXBseSByZXBsYWNpbmcgdGhlIGVudGlyZSBzdGFjay4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBIGNvbXBsZXRlIG92ZXJoYXVsIG9mIFAyUCBpbnRlcm5hbHMgaXMgbGlrZWx5IHRvIGNhdXNlIHRlbXBvcmFyeSBwZXJmb3JtYW5jZSByZWdyZXNzaW9ucyBhbmQgYnVncyBhcyB0aGUgaW1wbGVtZW50YXRpb24gbWF0dXJlcy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJIaWRpbmcgcGVlciBtYW5hZ2VtZW50IGluZm9ybWF0aW9uIGluc2lkZSB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUGVlck1hbmFnZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBtYXkgcHJldmVudCBjZXJ0YWluIGZ1bmN0aW9uYWxpdHkgb3IgcmVxdWlyZSBhZGRpdGlvbmFsIGRlbGliZXJhdGUgaW50ZXJmYWNlcyBmb3IgaW5mb3JtYXRpb24gZXhjaGFuZ2UsIGFzIGEgdHJhZGVvZmYgdG8gc2ltcGxpZnkgdGhlIGRlc2lnbiwgcmVkdWNlIGNvdXBsaW5nLCBhbmQgYXZvaWQgcmFjZSBjb25kaXRpb25zIGFuZCBsb2NrIGNvbnRlbnRpb24uIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFyb3VuZCBlLmcuIHBlZXIgbWFuYWdlbWVudCwgbWVzc2FnZSBzY2hlZHVsaW5nLCBhbmQgcGVlciBhbmQgZW5kcG9pbnQgYWR2ZXJ0aXNlbWVudCBhcmUgbm90IHlldCBkZXRlcm1pbmVkLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZmVyZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGkiLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvYXJjaGl0ZWN0dXJlL2Fkci0wNjEtcDJwLXJlZmFjdG9yLXNjb3BlLmh0bWwiIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJBRFIgMDYxOiBQMlAgUmVmYWN0b3IgU2NvcGUiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy81NjcwIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCIjNTY3MCBwMnA6IGludGVybmFsIHJlZmFjdG9yIGFuZCBhcmNoaXRlY3R1cmUgcmVkZXNpZ24iKSwKICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}