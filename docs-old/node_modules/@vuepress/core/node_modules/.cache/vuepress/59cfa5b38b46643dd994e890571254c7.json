{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-077-block-retention.md?vue&type=template&id=d1d3bc30&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-077-block-retention.md","mtime":1673295761176},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA3Ny1jb25maWd1cmFibGUtYmxvY2stcmV0ZW50aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhZHItMDc3LWNvbmZpZ3VyYWJsZS1ibG9jay1yZXRlbnRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQURSIDA3NzogQ29uZmlndXJhYmxlIEJsb2NrIFJldGVudGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjAtMDMtMjM6IEluaXRpYWwgZHJhZnQgKEBlcmlrZ3JpbmFrZXIpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIyMDIwLTAzLTI1OiBVc2UgbG9jYWwgY29uZmlnIGZvciBzbmFwc2hvdCBpbnRlcnZhbCAoQGVyaWtncmluYWtlcikiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjIwMjAtMDMtMzE6IFVzZSBBQkNJIGNvbW1pdCByZXNwb25zZSBmb3IgYmxvY2sgcmV0ZW50aW9uIGhpbnQiCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjAtMDQtMDI6IFJlc29sdmVkIG9wZW4gcXVlc3Rpb25zIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIjIwMjEtMDItMTE6IE1pZ3JhdGUgdG8gdGVuZGVybWludCByZXBvIChPcmlnaW5hbGx5ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvc3BlYy9wdWxsLzg0IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJSRkMgMDAxIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIikiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYXV0aG9yLXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2F1dGhvci1zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBdXRob3IocykiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiRXJpayBHcmluYWtlciAoQGVyaWtncmluYWtlcikiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGV4dCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udGV4dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb250ZXh0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkN1cnJlbnRseSwgYWxsIFRlbmRlcm1pbnQgbm9kZXMgY29udGFpbiB0aGUgY29tcGxldGUgc2VxdWVuY2Ugb2YgYmxvY2tzIGZyb20gZ2VuZXNpcyB1cCB0byBzb21lIGhlaWdodCAodHlwaWNhbGx5IHRoZSBsYXRlc3QgY2hhaW4gaGVpZ2h0KS4gVGhpcyB3aWxsIG5vIGxvbmdlciBiZSB0cnVlIHdoZW4gdGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgcmVsZWFzZWQ6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzM2NTIiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCbG9jayBwcnVuaW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjogcmVtb3ZlcyBoaXN0b3JpY2FsIGJsb2NrcyBhbmQgYXNzb2NpYXRlZCBkYXRhIChlLmcuIHZhbGlkYXRvciBzZXRzKSB1cCB0byBzb21lIGhlaWdodCwga2VlcGluZyBvbmx5IHRoZSBtb3N0IHJlY2VudCBibG9ja3MuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvODI4IiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiU3RhdGUgc3luYyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IGJvb3RzdHJhcHMgYSBuZXcgbm9kZSBieSBzeW5jaW5nIHN0YXRlIG1hY2hpbmUgc25hcHNob3RzIGF0IGEgZ2l2ZW4gaGVpZ2h0LCBidXQgbm90IGhpc3RvcmljYWwgYmxvY2tzIGFuZCBhc3NvY2lhdGVkIGRhdGEuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIG1haW50YWluIHRoZSBpbnRlZ3JpdHkgb2YgdGhlIGNoYWluLCB0aGUgdXNlIG9mIHRoZXNlIGZlYXR1cmVzIG11c3QgYmUgY29vcmRpbmF0ZWQgc3VjaCB0aGF0IG5lY2Vzc2FyeSBoaXN0b3JpY2FsIGJsb2NrcyB3aWxsIG5vdCBiZWNvbWUgdW5hdmFpbGFibGUgb3IgbG9zdCBmb3JldmVyLiBJbiBwYXJ0aWN1bGFyOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTb21lIG5vZGVzIHNob3VsZCBoYXZlIGNvbXBsZXRlIGJsb2NrIGhpc3RvcmllcywgZm9yIGF1ZGl0YWJpbGl0eSwgcXVlcnlpbmcsIGFuZCBib290c3RyYXBwaW5nLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBtYWpvcml0eSBvZiBub2RlcyBzaG91bGQgcmV0YWluIGJsb2NrcyBsb25nZXIgdGhhbiB0aGUgQ29zbW9zIFNESyB1bmJvbmRpbmcgcGVyaW9kLCBmb3IgbGlnaHQgY2xpZW50IHZlcmlmaWNhdGlvbi4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTb21lIG5vZGVzIG11c3QgdGFrZSBhbmQgc2VydmUgc3RhdGUgc3luYyBzbmFwc2hvdHMgd2l0aCBzbmFwc2hvdCBpbnRlcnZhbHMgbGVzcyB0aGFuIHRoZSBibG9jayByZXRlbnRpb24gcGVyaW9kcywgdG8gYWxsb3cgbmV3IG5vZGVzIHRvIHN0YXRlIHN5bmMgYW5kIHRoZW4gcmVwbGF5IGJsb2NrcyB0byBjYXRjaCB1cC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBcHBsaWNhdGlvbnMgbWF5IG5vdCBwZXJzaXN0IHRoZWlyIHN0YXRlIG9uIGNvbW1pdCwgYW5kIHJlcXVpcmUgYmxvY2sgcmVwbGF5IG9uIHJlc3RhcnQuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiT25seSBhIG1pbm9yaXR5IG9mIG5vZGVzIGNhbiBiZSBzdGF0ZSBzeW5jZWQgd2l0aGluIHRoZSB1bmJvbmRpbmcgcGVyaW9kLCBmb3IgbGlnaHQgY2xpZW50IHZlcmlmaWNhdGlvbiBhbmQgdG8gc2VydmUgYmxvY2sgaGlzdG9yaWVzIGZvciBjYXRjaC11cC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG93ZXZlciwgaXQgaXMgdW5jbGVhciBpZiBhbmQgaG93IHdlIHNob3VsZCBlbmZvcmNlIHRoaXMuIEl0IG1heSBub3QgYmUgcG9zc2libGUgdG8gdGVjaG5pY2FsbHkgZW5mb3JjZSBhbGwgb2YgdGhlc2Ugd2l0aG91dCBrbm93aW5nIHRoZSBzdGF0ZSBvZiB0aGUgZW50aXJlIG5ldHdvcmssIGJ1dCBpdCBtYXkgYWxzbyBiZSB1bnJlYWxpc3RpYyB0byBleHBlY3QgdGhpcyB0byBiZSBlbmZvcmNlZCBlbnRpcmVseSB0aHJvdWdoIHNvY2lhbCBjb29yZGluYXRpb24uIFRoaXMgaXMgZXNwZWNpYWxseSB1bmZvcnR1bmF0ZSBzaW5jZSB0aGUgY29uc2VxdWVuY2VzIG9mIG1pc2NvbmZpZ3VyYXRpb24gY2FuIGJlIHBlcm1hbmVudCBjaGFpbi13aWRlIGRhdGEgbG9zcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicHJvcG9zYWwiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb3Bvc2FsIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcm9wb3NhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWRkIGEgbmV3IGZpZWxkICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmV0YWluX2hlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gdGhlIEFCQ0kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJSZXNwb25zZUNvbW1pdCIpXSksCiAgICAgICAgX3ZtLl92KCIgbWVzc2FnZToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAicHJvdG8iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiYzJWeWRtbGpaU0JCUWtOSlFYQndiR2xqWVhScGIyNGdld29nSUhKd1l5QkRiMjF0YVhRb1VtVnhkV1Z6ZEVOdmJXMXBkQ2tnY21WMGRYSnVjeUFvVW1WemNHOXVjMlZEYjIxdGFYUXBPd3A5Q2dwdFpYTnpZV2RsSUZKbGNYVmxjM1JEYjIxdGFYUWdlMzBLQ20xbGMzTmhaMlVnVW1WemNHOXVjMlZEYjIxdGFYUWdld29nSUM4dklISmxjMlZ5ZG1VZ01Rb2dJR0o1ZEdWeklDQmtZWFJoSUNBZ0lDQWdJQ0FnSUQwZ01qc2dMeThnZEdobElFMWxjbXRzWlNCeWIyOTBJR2hoYzJnS0lDQjFhVzUwTmpRZ2NtVjBZV2x1WDJobGFXZG9kQ0E5SURNN0lDOHZJSFJvWlNCdmJHUmxjM1FnWW14dlkyc2dhR1ZwWjJoMElIUnZJSEpsZEdGcGJncDlDZz09IiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVXBvbiBBQkNJICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ29tbWl0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aGljaCBmaW5hbGl6ZXMgZXhlY3V0aW9uIG9mIGEgYmxvY2sgaW4gdGhlIHN0YXRlIG1hY2hpbmUsIFRlbmRlcm1pbnQgcmVtb3ZlcyBhbGwgZGF0YSBmb3IgaGVpZ2h0cyBsb3dlciB0aGFuICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmV0YWluX2hlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gVGhpcyBhbGxvd3MgdGhlIHN0YXRlIG1hY2hpbmUgdG8gY29udHJvbCBibG9jayByZXRlbnRpb24sIHdoaWNoIGlzIHByZWZlcmFibGUgc2luY2Ugb25seSBpdCBjYW4gZGV0ZXJtaW5lIHRoZSBzaWduaWZpY2FuY2Ugb2YgaGlzdG9yaWNhbCBibG9ja3MuIEJ5IGRlZmF1bHQgKGkuZS4gd2l0aCAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJldGFpbl9oZWlnaHQ9MCIpXSksCiAgICAgICAgX3ZtLl92KCIpIGFsbCBoaXN0b3JpY2FsIGJsb2NrcyBhcmUgcmV0YWluZWQuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlbW92ZWQgZGF0YSBpbmNsdWRlcyBub3Qgb25seSBibG9ja3MsIGJ1dCBhbHNvIGhlYWRlcnMsIGNvbW1pdCBpbmZvLCBjb25zZW5zdXMgcGFyYW1zLCB2YWxpZGF0b3Igc2V0cywgYW5kIHNvIG9uLiBJbiB0aGUgZmlyc3QgaXRlcmF0aW9uIHRoaXMgd2lsbCBiZSBkb25lIHN5bmNocm9ub3VzbHksIHNpbmNlIHRoZSBudW1iZXIgb2YgaGVpZ2h0cyByZW1vdmVkIGZvciBlYWNoIHJ1biBpcyBhc3N1bWVkIHRvIGJlIHNtYWxsIChvZnRlbiAxKSBpbiB0aGUgdHlwaWNhbCBjYXNlLiBJdCBjYW4gYmUgbWFkZSBhc3luY2hyb25vdXMgYXQgYSBsYXRlciB0aW1lIGlmIHRoaXMgaXMgc2hvd24gdG8gYmUgbmVjZXNzYXJ5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiU2luY2UgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZXRhaW5faGVpZ2h0IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGR5bmFtaWMsIGl0IGlzIHBvc3NpYmxlIGZvciBpdCB0byByZWZlciB0byBhIGhlaWdodCB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQuIEZvciBleGFtcGxlLCBjb21taXQgYXQgaGVpZ2h0IDEwMCBtYXkgcmV0dXJuICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmV0YWluX2hlaWdodD05MCIpXSksCiAgICAgICAgX3ZtLl92KCIgd2hpbGUgY29tbWl0IGF0IGhlaWdodCAxMDEgbWF5IHJldHVybiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJldGFpbl9oZWlnaHQ9ODAiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFRoaXMgaXMgYWxsb3dlZCwgYW5kIHdpbGwgYmUgaWdub3JlZCAtIGl0IGlzIHRoZSBhcHBsaWNhdGlvbidzIHJlc3BvbnNpYmlsaXR5IHRvIHJldHVybiBhcHByb3ByaWF0ZSB2YWx1ZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlN0YXRlIHN5bmMgd2lsbCBldmVudHVhbGx5IHN1cHBvcnQgYmFja2ZpbGxpbmcgaGVpZ2h0cywgdmlhIGUuZy4gYSBzbmFwc2hvdCBtZXRhZGF0YSBmaWVsZCAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImJhY2tmaWxsX2hlaWdodCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYnV0IGluIHRoZSBpbml0aWFsIHZlcnNpb24gaXQgd2lsbCBoYXZlIGEgZnVsbHkgdHJ1bmNhdGVkIGJsb2NrIGhpc3RvcnkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvc21vcy1zZGstZXhhbXBsZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29zbW9zLXNkay1leGFtcGxlIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvc21vcyBTREsgRXhhbXBsZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcyBhbiBleGFtcGxlLCB3ZSdsbCBjb25zaWRlciBob3cgdGhlIENvc21vcyBTREsgbWlnaHQgbWFrZSB1c2Ugb2YgdGhpcy4gVGhlIHNwZWNpZmljIGRldGFpbHMgc2hvdWxkIGJlIGRpc2N1c3NlZCBpbiBhIHNlcGFyYXRlIFNESyBwcm9wb3NhbC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSByZXR1cm5lZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJldGFpbl9oZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIHdvdWxkIGJlIHRoZSBsb3dlc3QgaGVpZ2h0IHRoYXQgc2F0aXNmaWVzOiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJVbmJvbmRpbmcgdGltZTogdGhlIHRpbWUgaW50ZXJ2YWwgaW4gd2hpY2ggdmFsaWRhdG9ycyBjYW4gYmUgZWNvbm9taWNhbGx5IHB1bmlzaGVkIGZvciBtaXNiZWhhdmlvci4gQmxvY2tzIGluIHRoaXMgaW50ZXJ2YWwgbXVzdCBiZSBhdWRpdGFibGUgZS5nLiBieSB0aGUgbGlnaHQgY2xpZW50LiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIklBVkwgc25hcHNob3QgaW50ZXJ2YWw6IHRoZSBibG9jayBpbnRlcnZhbCBhdCB3aGljaCB0aGUgdW5kZXJseWluZyBJQVZMIGRhdGFiYXNlIGlzIHBlcnNpc3RlZCB0byBkaXNrLCBlLmcuIGV2ZXJ5IDEwMDAwIGhlaWdodHMuIEJsb2NrcyBzaW5jZSB0aGUgbGFzdCBJQVZMIHNuYXBzaG90IG11c3QgYmUgYXZhaWxhYmxlIGZvciByZXBsYXkgb24gYXBwbGljYXRpb24gcmVzdGFydC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJTdGF0ZSBzeW5jIHNuYXBzaG90czogYmxvY2tzIHNpbmNlIHRoZSAiKSwKICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigib2xkZXN0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgYXZhaWxhYmxlIHNuYXBzaG90IG11c3QgYmUgYXZhaWxhYmxlIGZvciBzdGF0ZSBzeW5jIG5vZGVzIHRvIGNhdGNoIHVwIChvbGRlc3QgYmVjYXVzZSBhIG5vZGUgbWF5IGJlIHJlc3RvcmluZyBhbiBvbGQgc25hcHNob3Qgd2hpbGUgYSBuZXcgc25hcHNob3Qgd2FzIHRha2VuKS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJMb2NhbCBjb25maWc6IGFyY2hpdmUgbm9kZXMgbWF5IHdhbnQgdG8gcmV0YWluIG1vcmUgb3IgYWxsIGJsb2NrcywgZS5nLiB2aWEgYSBsb2NhbCBjb25maWcgb3B0aW9uICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtaW4tcmV0YWluLWJsb2NrcyIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLiBUaGVyZSBtYXkgYWxzbyBiZSBhIG5lZWQgdG8gdmFyeSByZW50ZW50aW9uIGZvciBvdGhlciBub2RlcywgZS5nLiBzZW50cnkgbm9kZXMgd2hpY2ggZG8gbm90IG5lZWQgaGlzdG9yaWNhbCBibG9ja3MuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogImltZy9ibG9jay1yZXRlbnRpb24ucG5nIiwKICAgICAgICAgICAgYWx0OiAiQ29zbW9zIFNESyBibG9jayByZXRlbnRpb24gZGlhZ3JhbSIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzdGF0dXMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3N0YXR1cyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBTdGF0dXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkltcGxlbWVudGVkIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zZXF1ZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnNlcXVlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc2VxdWVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvc2l0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwb3NpdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zaXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQXBwbGljYXRpb24tc3BlY2lmaWVkIGJsb2NrIHJldGVudGlvbiBhbGxvd3MgdGhlIGFwcGxpY2F0aW9uIHRvIHRha2UgYWxsIHJlbGV2YW50IGZhY3RvcnMgaW50byBhY2NvdW50IGFuZCBwcmV2ZW50IG5lY2Vzc2FyeSBibG9ja3MgZnJvbSBiZWluZyBhY2NpZGVudGFsbHkgcmVtb3ZlZC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJOb2RlIG9wZXJhdG9ycyBjYW4gaW5kZXBlbmRlbnRseSBkZWNpZGUgd2hldGhlciB0aGV5IHdhbnQgdG8gcHJvdmlkZSBjb21wbGV0ZSBibG9jayBoaXN0b3JpZXMgKGlmIGxvY2FsIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgaXMgcHJvdmlkZWQpIGFuZCBzbmFwc2hvdHMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5lZ2F0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNuZWdhdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmVnYXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU29jaWFsIGNvb3JkaW5hdGlvbiBpcyByZXF1aXJlZCB0byBydW4gYXJjaGl2YWwgbm9kZXMsIGZhaWx1cmUgdG8gZG8gc28gbWF5IGxlYWQgdG8gcGVybWFuZW50IGxvc3Mgb2YgaGlzdG9yaWNhbCBibG9ja3MuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU29jaWFsIGNvb3JkaW5hdGlvbiBpcyByZXF1aXJlZCB0byBydW4gc25hcHNob3Qgbm9kZXMsIGZhaWx1cmUgdG8gZG8gc28gbWF5IGxlYWQgdG8gaW5hYmlsaXR5IHRvIHJ1biBzdGF0ZSBzeW5jLCBhbmQgaW5hYmlsaXR5IHRvIGJvb3RzdHJhcCBuZXcgbm9kZXMgYXQgYWxsIGlmIG5vIGFyY2hpdmFsIG5vZGVzIGFyZSBvbmxpbmUuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJSZWR1Y2VkIGJsb2NrIHJldGVudGlvbiByZXF1aXJlcyBhcHBsaWNhdGlvbiBjaGFuZ2VzLCBhbmQgY2Fubm90IGJlIGNvbnRyb2xsZWQgZGlyZWN0bHkgaW4gVGVuZGVybWludC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBcHBsaWNhdGlvbi1zcGVjaWZpZWQgYmxvY2sgcmV0ZW50aW9uIG1heSBzZXQgYSBsb3dlciBib3VuZCBvbiBkaXNrIHNwYWNlIHJlcXVpcmVtZW50cyBmb3IgYWxsIG5vZGVzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZWZlcmVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWZlcmVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWZlcmVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIlN0YXRlIHN5bmMgQURSOiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9kb2NzL2FyY2hpdGVjdHVyZS9hZHItMDUzLXN0YXRlLXN5bmMtcHJvdG90eXBlLm1kIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA1My1zdGF0ZS1zeW5jLXByb3RvdHlwZS5tZCIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJTdGF0ZSBzeW5jIGlzc3VlOiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy84MjgiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzgyOCIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQmxvY2sgcHJ1bmluZyBpc3N1ZTogIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvMzY1MiIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvMzY1MiIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}