{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-014-semantic-versioning.md?vue&type=template&id=611792bc&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-014-semantic-versioning.md","mtime":1673295761289},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmZjLTAxNC1zZW1hbnRpYy12ZXJzaW9uaW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZmMtMDE0LXNlbWFudGljLXZlcnNpb25pbmciIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUkZDIDAxNDogU2VtYW50aWMgVmVyc2lvbmluZyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjEtMTEtMTk6IEluaXRpYWwgRHJhZnQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiMjAyMS0wMi0xMTogTWlncmF0ZSBSRkMgdG8gdGVuZGVybWludCByZXBvIChPcmlnaW5hbGx5ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvc3BlYy9wdWxsLzM2NSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiUkZDIDAwNiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIpIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImF1dGhvci1zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhdXRob3ItcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQXV0aG9yKHMpIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIkNhbGx1bSBXYXRlcnMgQGNtd2F0ZXJzIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbnRleHQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnRleHQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ29udGV4dCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZSB1c2UgdmVyc2lvbmluZyBhcyBhbiBpbnN0cnVtZW50IHRvIGhvbGQgYSBzZXQgb2YgcHJvbWlzZXMgdG8gdXNlcnMgYW5kIHNpZ25hbCB3aGVuIHN1Y2ggYSBzZXQgY2hhbmdlcyBhbmQgaG93LiBJbiB0aGUgY29udmVudGlvbmFsIHNlbnNlIG9mIGEgR28gbGlicmFyeSwgbWFqb3IgdmVyc2lvbnMgc2lnbmFsIHRoYXQgdGhlIHB1YmxpYyBHbyBBUEnigJlzIGhhdmUgY2hhbmdlZCBpbiBhIGJyZWFraW5nIHdheSBhbmQgdGh1cyByZXF1aXJlIHRoZSB1c2VycyBvZiBzdWNoIGxpYnJhcmllcyB0byBjaGFuZ2UgdGhlaXIgdXNhZ2UgYWNjb3JkaW5nbHkuIFRlbmRlcm1pbnQgaXMgYSBiaXQgZGlmZmVyZW50IGluIHRoYXQgdGhlcmUgYXJlIG11bHRpcGxlIHVzZXJzOiBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzIChib3RoIGluLXByb2Nlc3MgYW5kIG91dC1vZi1wcm9jZXNzKSwgbm9kZSBvcGVyYXRvcnMsIGFuZCBleHRlcm5hbCBjbGllbnRzLiBNb3JlIGltcG9ydGFudGx5LCBib3RoIGhvdyB0aGVzZSB1c2VycyBpbnRlcmFjdCB3aXRoIFRlbmRlcm1pbnQgYW5kIHdoYXQncyBpbXBvcnRhbnQgdG8gdGhlc2UgdXNlcnMgZGlmZmVycyBmcm9tIGhvdyB1c2VycyBpbnRlcmFjdCBhbmQgd2hhdCB0aGV5IGZpbmQgaW1wb3J0YW50IGluIGEgbW9yZSBjb252ZW50aW9uYWwgbGlicmFyeS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBkb2N1bWVudCBhdHRlbXB0cyB0byBlbmNhcHN1bGF0ZSB0aGUgZGlzY3Vzc2lvbnMgYXJvdW5kIHZlcnNpb25pbmcgaW4gVGVuZGVybWludCBhbmQgZHJhd3MgdXBvbiB0aGVtIHRvIHByb3Bvc2UgYSBndWlkZSB0byBob3cgVGVuZGVybWludCB1c2VzIHZlcnNpb25pbmcgdG8gbWFrZSBwcm9taXNlcyB0byBpdHMgdXNlcnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBhIHZlcnNpb25pbmcgcG9saWN5IHRvIG1ha2Ugc2Vuc2UsIHdlIG11c3QgYWxzbyBhZGRyZXNzIHRoZSBpbnRlbmRlZCBmcmVxdWVuY3kgb2YgYnJlYWtpbmcgY2hhbmdlcy4gVGhlIHN0cmljdGVzdCBndWFyYW50ZWVzIGluIHRoZSB3b3JsZCB3aWxsIG5vdCBoZWxwIHVzZXJzIGlmIHdlIHBsYW4gdG8gYnJlYWsgdGhlbSB3aXRoIGV2ZXJ5IHJlbGVhc2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0ZpbmFsbHkgSSB3b3VsZCBsaWtlIHRvIHJlbWFyayB0aGF0IHRoaXMgUkZDIG9ubHkgYWRkcmVzc2VzIHRoZSAid2hhdCIsIGFzIGluIHdoYXQgYXJlIHRoZSBydWxlcyBmb3IgdmVyc2lvbmluZy4gVGhlICJob3ciIG9mIFRlbmRlcm1pbnQgaW1wbGVtZW50aW5nIHRoZSB2ZXJzaW9uaW5nIHJ1bGVzIHdlIGNob29zZSwgd2lsbCBiZSBhZGRyZXNzZWQgaW4gYSBsYXRlciBSRkMgb24gU29mdCBVcGdyYWRlcy4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGlzY3Vzc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGlzY3Vzc2lvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGlzY3Vzc2lvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZSBmaXJzdCBiZWdpbiB3aXRoIGEgcm91bmQgdXAgb2YgdGhlIHZhcmlvdXMgdXNlcnMgYW5kIGEgc2V0IG9mIGFzc3VtcHRpb25zIG9uIHdoYXQgdGhlc2UgdXNlcnMgZXhwZWN0IGZyb20gVGVuZGVybWludCBpbiByZWdhcmRzIHRvIHZlcnNpb25pbmc6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQXBwbGljYXRpb24gRGV2ZWxvcGVycyIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCB0aG9zZSB0aGF0IHVzZSB0aGUgQUJDSSB0byBidWlsZCBhcHBsaWNhdGlvbnMgb24gdG9wIG9mIFRlbmRlcm1pbnQsIGFyZSBjaGllZmx5IGNvbmNlcm5lZCB3aXRoIHRoYXQgQVBJLiBCcmVha2luZyBjaGFuZ2VzIHdpbGwgZm9yY2UgZGV2ZWxvcGVycyB0byBtb2RpZnkgbGFyZ2UgcG9ydGlvbnMgb2YgdGhlaXIgY29kZWJhc2UgdG8gYWNjb21tb2RhdGUgZm9yIHRoZSBjaGFuZ2VzLiBTb21lIEFCQ0kgY2hhbmdlcyBzdWNoIGFzIGludHJvZHVjaW5nIHByaW9yaXR5IGZvciB0aGUgbWVtcG9vbCBkb24ndCByZXF1aXJlIGFueSBlZmZvcnQgYW5kIGNhbiBiZSBsYXppbHkgYWRvcHRlZCB3aGlsc3QgY2hhbmdlcyBsaWtlIEFCQ0krKyBtYXkgZm9yY2UgYXBwbGljYXRpb25zIHRvIHJlZGVzaWduIHRoZWlyIGVudGlyZSBleGVjdXRpb24gc3lzdGVtLiBJdCdzIGFsc28gd29ydGggY29uc2lkZXJpbmcgdGhhdCB0aGUgQVBJJ3MgZm9yIGdvIGRldmVsb3BlcnMgZGlmZmVyIHRvIGRldmVsb3BlcnMgb2Ygb3RoZXIgbGFuZ3VhZ2VzLiBUaGUgZm9ybWVyIGhlcmUgY2FuIHVzZSB0aGUgZW50aXJlIFRlbmRlcm1pbnQgbGlicmFyeSwgbW9zdCBub3RhYmx5IHRoZSBsb2NhbCBSUEMgbWV0aG9kcywgYW5kIHNvIHRoZSB0ZWFtIG11c3QgYmUgd2FyeSBvZiBhbGwgcHVibGljIEdvIEFQSSdzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm9kZSBPcGVyYXRvcnMiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiwgdGhvc2UgcnVubmluZyBub2RlIGluZnJhc3RydWN0dXJlLCBhcmUgcHJlZG9taW5hbnRseSBjb25jZXJuZWQgd2l0aCBkb3dudGltZSwgY29tcGxleGl0eSBhbmQgZnJlcXVlbmN5IG9mIHVwZ3JhZGluZywgYW5kIGF2b2lkaW5nIGRhdGEgbG9zcy4gVGhleSBtYXkgYmUgYWxzbyBjb25jZXJuZWQgYWJvdXQgY2hhbmdlcyB0aGF0IG1heSBicmVhayB0aGUgc2NyaXB0cyBhbmQgdG9vbGluZyB0aGV5IHVzZSB0byBzdXBlcnZpc2UgdGhlaXIgbm9kZXMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFeHRlcm5hbCBDbGllbnRzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgYXJlIHRob3NlIHRoYXQgcGVyZm9ybSBhbnkgb2YgdGhlIGZvbGxvd2luZzoiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImNvbnN1bWUgdGhlIFJQQyBlbmRwb2ludHMgb2Ygbm9kZXMgbGlrZSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi9ibG9jayIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigic3Vic2NyaWJlIHRvIHRoZSBldmVudCBzdHJlYW0iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigibWFrZSBxdWVyaWVzIHRvIHRoZSBpbmRleGVyIildKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGlzIHNldCBhcmUgY29uY2VybmVkIHdpdGggY2hhaW4gdXBncmFkZXMgd2hpY2ggd2lsbCBpbXBhY3QgdGhlaXIgYWJpbGl0eSB0byBxdWVyeSBzdGF0ZSBhbmQgYmxvY2sgZGF0YSBhcyB3ZWxsIGFzIGJyb2FkY2FzdCB0cmFuc2FjdGlvbnMuIEV4YW1wbGVzIGluY2x1ZGUgd2FsbGV0cyBhbmQgYmxvY2sgZXhwbG9yZXJzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSUJDIG1vZHVsZSBhbmQgcmVsYXllcnMiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi4gVGhlIGRldmVsb3BlcnMgb2YgSUJDIGFuZCBjb25zdW1lcnMgb2YgdGhlaXIgc29mdHdhcmUgYXJlIGNvbmNlcm5lZCBhYm91dCBjaGFuZ2VzIHRoYXQgbWF5IGFmZmVjdCBhIGNoYWluJ3MgYWJpbGl0eSB0byBzZW5kIGFyYml0cmFyeSBtZXNzYWdlcyB0byBhbm90aGVyIGNoYWluLiBTcGVjaWZpY2FsbHksIHRoZXNlIHVzZXJzIGFyZSBhZmZlY3RlZCBieSBhbnkgYnJlYWtpbmcgY2hhbmdlcyB0byB0aGUgbGlnaHQgY2xpZW50IHZlcmlmaWNhdGlvbiBhbGdvcml0aG0uIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFsdGhvdWdoIHdlIHByZXNlbnQgdGhlbSBoZXJlIGFzIGhhdmluZyBkaWZmZXJlbnQgY29uY2VybnMsIGluIGEgYnJvYWRlciBzZW5zZSB0aGVzZSB1c2VyIGdyb3VwcyBzaGFyZSBhIGNvbmNlcm4gZm9yIHRoZSBlbmQgdXNlcnMgb2YgYXBwbGljYXRpb25zLiBBIGNydWNpYWwgcHJpbmNpcGxlIGd1aWRpbmcgdGhpcyBSRkMgaXMgdGhhdCAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAidGhlIGFiaWxpdHkgZm9yIGNoYWlucyB0byBwcm92aWRlIGNvbnRpbnVhbCBzZXJ2aWNlIGlzIG1vcmUgaW1wb3J0YW50IHRoYW4gdGhlIGFjdHVhbCB1cGdyYWRlIGJ1cmRlbiBwdXQgb24gdGhlIGRldmVsb3BlcnMgb2YgdGhlc2UgY2hhaW5zIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBUaGlzIG1lYW5zIHNvbWUgZXh0cmEgYnVyZGVuIGZvciBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzIGlzIHRvbGVyYWJsZSBpZiBpdCBtaW5pbWl6ZXMgb3Igc3Vic3RhbnRpYWxseSByZWR1Y2VzIGRvd250aW1lIGZvciB0aGUgZW5kIHVzZXIuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1vZGVzLW9mLWludGVycHJvY2Vzcy1jb21tdW5pY2F0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtb2Rlcy1vZi1pbnRlcnByb2Nlc3MtY29tbXVuaWNhdGlvbiIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBNb2RlcyBvZiBJbnRlcnByb2Nlc3MgQ29tbXVuaWNhdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUZW5kZXJtaW50IGhhcyB0d28gcHJpbWFyeSBtZWNoYW5pc21zIHRvIGNvbW11bmljYXRlIHdpdGggb3RoZXIgcHJvY2Vzc2VzOiBSUEMgYW5kIFAyUC4gVGhlIGRpdmlzaW9uIG1hcmtzIHRoZSBib3VuZGFyeSBiZXR3ZWVuIHRoZSBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgY29tcG9uZW50cyBvZiB0aGUgbmV0d29yazoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIFAyUCBsYXllciBpcyB1c2VkIGluIGFsbCBjYXNlcyB0aGF0IG5vZGVzIChvZiBhbnkgdHlwZSkgbmVlZCB0byBjb21tdW5pY2F0ZSB3aXRoIG9uZSBhbm90aGVyLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVGhlIFJQQyBpbnRlcmZhY2UgaXMgZm9yIGFueSBvdXRzaWRlIHByb2Nlc3MgdGhhdCB3YW50cyB0byBjb21tdW5pY2F0ZSB3aXRoIGEgbm9kZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIGRlc2lnbiBwcmluY2lwbGUgaGVyZSBpcyB0aGF0ICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjb21tdW5pY2F0aW9uIHZpYSBSUEMgaXMgdG8gYSB0cnVzdGVkIHNvdXJjZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhbmQgdGh1cyB0aGUgUlBDIHNlcnZpY2UgcHJpb3JpdGl6ZXMgaW5zcGVjdGlvbiByYXRoZXIgdGhhbiB2ZXJpZmljYXRpb24uIFRoZSBQMlAgaW50ZXJmYWNlIGlzIHRoZSBwcmltYXJ5IG1lZGl1bSBmb3IgdmVyaWZpY2F0aW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcyBhbiBleGFtcGxlLCBhbiBpbi1icm93c2VyIGxpZ2h0IGNsaWVudCB3b3VsZCB2ZXJpZnkgaGVhZGVycyAoYW5kIHBlcmhhcHMgYXBwbGljYXRpb24gc3RhdGUpIHZpYSB0aGUgcDJwIGxheWVyLCBhbmQgdGhlbiBwYXNzIGFsb25nIGluZm9ybWF0aW9uIG9uIHRvIHRoZSBjbGllbnQgdmlhIFJQQyAob3IgcG90ZW50aWFsbHkgZGlyZWN0bHkgdmlhIGEgc2VwYXJhdGUgQVBJKS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIG1haW4gZXhjZXB0aW9ucyB0byB0aGlzIGFyZSB0aGUgSUJDIG1vZHVsZSBhbmQgcmVsYXllcnMsIHdoaWNoIGFyZSBleHRlcm5hbCB0byB0aGUgbm9kZSBidXQgYWxzbyByZXF1aXJlIHZlcmlmaWFibGUgZGF0YS4gQnJlYWtpbmcgY2hhbmdlcyB0byB0aGUgbGlnaHQgY2xpZW50IHZlcmlmaWNhdGlvbiBwYXRoIG1lYW4gdGhhdCBhbGwgbmVpZ2hib3VyaW5nIGNoYWlucyB0aGF0IGFyZSBjb25uZWN0ZWQgd2lsbCBubyBsb25nZXIgYmUgYWJsZSB0byB2ZXJpZnkgc3RhdGUgdHJhbnNpdGlvbnMgYW5kIHRodXMgcGFzcyBtZXNzYWdlcyBiYWNrIGFuZCBmb3J3YXJkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wb3NhbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcG9zYWwiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb3Bvc2FsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUZW5kZXJtaW50IHZlcnNpb24gbGFiZWxzIHdpbGwgZm9sbG93IHRoZSBzeW50YXggb2YgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc2VtdmVyLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU2VtYW50aWMgVmVyc2lvbnMgMi4wLjAiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2l0aCBhIG1ham9yLCBtaW5vciBhbmQgcGF0Y2ggdmVyc2lvbi4gVGhlIHZlcnNpb24gY29tcG9uZW50cyB3aWxsIGJlIGludGVycHJldGVkIGFjY29yZGluZyB0byB0aGVzZSBydWxlczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkZvciB0aGUgZW50aXJlIGN5Y2xlIG9mIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIm1ham9yIHZlcnNpb24iKV0pLAogICAgICAgIF92bS5fdigiIGluIFRlbmRlcm1pbnQ6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkFsbCBibG9ja3MgYW5kIHN0YXRlIGRhdGEgaW4gYSBibG9ja2NoYWluIGNhbiBiZSBxdWVyaWVkLiBBbGwgaGVhZGVycyBjYW4gYmUgdmVyaWZpZWQgZXZlbiBhY3Jvc3MgbWlub3IgdmVyc2lvbiBjaGFuZ2VzLiBOb2RlcyBjYW4gYm90aCBibG9jayBzeW5jIGFuZCBzdGF0ZSBzeW5jIGZyb20gZ2VuZXNpcyB0byB0aGUgaGVhZCBvZiB0aGUgY2hhaW4uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOb2RlcyBpbiBhIG5ldHdvcmsgYXJlIGFibGUgdG8gY29tbXVuaWNhdGUgYW5kIHBlcmZvcm0gQkZUIHN0YXRlIG1hY2hpbmUgcmVwbGljYXRpb24gc28gbG9uZyBhcyB0aGUgYWdyZWVkIG5ldHdvcmsgdmVyc2lvbiBpcyB0aGUgbG93ZXN0IG9mIGFsbCBub2RlcyBpbiBhIG5ldHdvcmsuIEZvciBleGFtcGxlLCBub2RlcyB1c2luZyB2ZXJzaW9uIDEuNS54IGFuZCAxLjIueCBjYW4gb3BlcmF0ZSB0b2dldGhlciBzbyBsb25nIGFzIHRoZSBuZXR3b3JrIHZlcnNpb24gaXMgMS4yIG9yIGxvd2VyIChidXQgc3RpbGwgd2l0aGluIHRoZSAxLnggcmFuZ2UpLiBUaGlzIHJ1bGUgZXNzZW50aWFsbHkgY2FwdHVyZXMgdGhlIGNvbmNlcHQgb2YgbmV0d29yayBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5vZGUgUlBDIGVuZHBvaW50cyB3aWxsIHJlbWFpbiBjb21wYXRpYmxlIHdpdGggZXhpc3RpbmcgZXh0ZXJuYWwgY2xpZW50czpcbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTmV3IGVuZHBvaW50cyBtYXkgYmUgYWRkZWQsIGJ1dCBvbGQgZW5kcG9pbnRzIG1heSBub3QgYmUgcmVtb3ZlZC4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIk9sZCBlbmRwb2ludHMgbWF5IGJlIGV4dGVuZGVkIHRvIGFkZCBuZXcgcmVxdWVzdCBhbmQgcmVzcG9uc2UgZmllbGRzLCBidXQgcmVxdWVzdHMgbm90IHVzaW5nIHRob3NlIGZpZWxkcyBtdXN0IGZ1bmN0aW9uIGFzIGJlZm9yZSB0aGUgY2hhbmdlLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk1pZ3JhdGlvbnMgc2hvdWxkIGJlIGF1dG9tYXRpYy4gVXBncmFkaW5nIG9mIG9uZSBub2RlIGNhbiBoYXBwZW4gYXN5bmNocm9ub3VzbHkgd2l0aCByZXNwZWN0IHRvIG90aGVyIG5vZGVzIChhbHRob3VnaCBhZ3JlZW1lbnQgb2YgYSBuZXR3b3JrLXdpZGUgdXBncmFkZSBtdXN0IHN0aWxsIG9jY3VyIHN5bmNocm9ub3VzbHkgdmlhIGNvbnNlbnN1cykuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkZvciB0aGUgZW50aXJlIGN5Y2xlIG9mIGEgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIm1pbm9yIHZlcnNpb24iKV0pLAogICAgICAgIF92bS5fdigiIGluIFRlbmRlcm1pbnQ6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiUHVibGljIEdvIEFQSSdzLCBmb3IgZXhhbXBsZSBpbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWJjaSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcGFja2FnZXMgd2lsbCBub3QgY2hhbmdlIGluIGEgd2F5IHRoYXQgcmVxdWlyZXMgYW55IGNvbnN1bWVyIChub3QganVzdCBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzKSB0byBtb2RpZnkgdGhlaXIgY29kZS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5vIGJyZWFraW5nIGNoYW5nZXMgdG8gdGhlIGJsb2NrIHByb3RvY29sLiBUaGlzIG1lYW5zIHRoYXQgYWxsIGJsb2NrIHJlbGF0ZWQgZGF0YSBzdHJ1Y3R1cmVzIHNob3VsZCBub3QgY2hhbmdlIGluIGEgd2F5IHRoYXQgYnJlYWtzIGFueSBvZiB0aGUgaGFzaGVzLCB0aGUgY29uc2Vuc3VzIGVuZ2luZSBvciBsaWdodCBjbGllbnQgdmVyaWZpY2F0aW9uLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVXBncmFkZXMgYmV0d2VlbiBtaW5vciB2ZXJzaW9ucyBtYXkgbm90IHJlc3VsdCBpbiBhbnkgZG93bnRpbWUgKGkuZS4sIG5vIG1pZ3JhdGlvbnMgYXJlIHJlcXVpcmVkKSwgbm9yIHJlcXVpcmUgYW55IGNoYW5nZXMgdG8gdGhlIGNvbmZpZyBmaWxlcyB0byBjb250aW51ZSB3aXRoIHRoZSBleGlzdGluZyBiZWhhdmlvci4gQSBtaW5vciB2ZXJzaW9uIHVwZ3JhZGUgd2lsbCByZXF1aXJlIG9ubHkgc3RvcHBpbmcgdGhlIGV4aXN0aW5nIHByb2Nlc3MsIHN3YXBwaW5nIHRoZSBiaW5hcnksIGFuZCBzdGFydGluZyB0aGUgbmV3IHByb2Nlc3MuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkEgbmV3ICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJwYXRjaCB2ZXJzaW9uIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIG9mIFRlbmRlcm1pbnQgd2lsbCBvbmx5IGNvbnRhaW4gYnVnIGZpeGVzIGFuZCB1cGRhdGVzIHRoYXQgaW1wYWN0IHRoZSBzZWN1cml0eSBhbmQgc3RhYmlsaXR5IG9mIFRlbmRlcm1pbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGVzZSBndWFyYW50ZWVzIHdpbGwgY29tZSBpbnRvIGVmZmVjdCBhdCByZWxlYXNlIDEuMC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3RhdHVzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3RhdHVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJQcm9wb3NlZCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2VxdWVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zZXF1ZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnNlcXVlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwb3NpdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9zaXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBvc2l0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNsZWFyZXIgY29tbXVuaWNhdGlvbiBvZiB3aGF0IHZlcnNpb25pbmcgbWVhbnMgdG8gdXMgYW5kIHRoZSBlZmZlY3QgdGhleSBoYXZlIG9uIG91ciB1c2Vycy4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZWdhdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmVnYXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5lZ2F0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNhbiBwb3RlbnRpYWxseSBpbmN1ciBncmVhdGVyIGVuZ2luZWVyaW5nIGVmZm9ydCB0byB1cGhvbGQgYW5kIGZvbGxvdyB0aGVzZSBndWFyYW50ZWVzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZWZlcmVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWZlcmVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWZlcmVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc2VtdmVyLm9yZy8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlNlbVZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzU2ODAiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRlbmRlcm1pbnQgVHJhY2tpbmcgSXNzdWUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}