{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-021-socket-protocol.md?vue&type=template&id=31a969b6&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-021-socket-protocol.md","mtime":1673295761290},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmZjLTAyMS10aGUtZnV0dXJlLW9mLXRoZS1zb2NrZXQtcHJvdG9jb2wiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3JmYy0wMjEtdGhlLWZ1dHVyZS1vZi10aGUtc29ja2V0LXByb3RvY29sIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJGQyAwMjE6IFRoZSBGdXR1cmUgb2YgdGhlIFNvY2tldCBQcm90b2NvbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjE5LU1heS0yMDIyOiBJbml0aWFsIGRyYWZ0IChAY3JlYWNoYWRhaXIpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIjE5LUp1bC0yMDIyOiBDb252ZXJ0ZWQgZnJvbSBBRFIgdG8gUkZDIChAY3JlYWNoYWRhaXIpIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFic3RyYWN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhYnN0cmFjdCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWJzdHJhY3QiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBSRkMgY2FwdHVyZXMgc29tZSB0ZWNobmljYWwgZGlzY3Vzc2lvbiBhYm91dCB0aGUgQUJDSSBzb2NrZXQgcHJvdG9jb2wgdGhhdFxud2FzIG9yaWdpbmFsbHkgZG9jdW1lbnRlZCB0byBzb2xpY2l0IGFuIGFyY2hpdGVjdHVyYWwgZGVjaXNpb24uICBUaGlzIHRvcGljIHdhc1xubm90IGhpZ2gtZW5vdWdoIHByaW9yaXR5IGFzIG9mIHRoaXMgd3JpdGluZyB0byBqdXN0aWZ5IG1ha2luZyBhIGZpbmFsIGRlY2lzaW9uLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgdGhhdCByZWFzb24sIHRoZSB0ZXh0IG9mIHRoaXMgUkZDIGhhcyB0aGUgZ2VuZXJhbCBzdHJ1Y3R1cmUgb2YgYW4gQURSLCBidXRcbnNob3VsZCBiZSB2aWV3ZWQgcHJpbWFyaWx5IGFzIGEgcmVjb3JkIG9mIHRoZSBpc3N1ZSBmb3IgZnV0dXJlIHJlZmVyZW5jZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYmFja2dyb3VuZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYmFja2dyb3VuZCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmFja2dyb3VuZCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L3RyZWUvbWFpbi9zcGVjL2FiY2kiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIkFwcGxpY2F0aW9uIEJsb2NrY2hhaW4gSW50ZXJmYWNlIChBQkNJKSIpLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyBhIGNsaWVudC1zZXJ2ZXIgcHJvdG9jb2xcbnVzZWQgYnkgdGhlIFRlbmRlcm1pbnQgY29uc2Vuc3VzIGVuZ2luZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBhcHBsaWNhdGlvbiBvblxud2hvc2UgYmVoYWxmIGl0IHBlcmZvcm1zIHN0YXRlIHJlcGxpY2F0aW9uLiBUaGVyZSBhcmUgY3VycmVudGx5IHRocmVlIHRyYW5zcG9ydFxub3B0aW9ucyBhdmFpbGFibGUgZm9yIEFCQ0kgYXBwbGljYXRpb25zOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkluLXByb2Nlc3MiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJzogQXBwbGljYXRpb25zIHdyaXR0ZW4gaW4gR28gY2FuIGJlIGxpbmtlZCBkaXJlY3RseSBpbnRvIHRoZVxuc2FtZSBiaW5hcnkgYXMgdGhlIGNvbnNlbnN1cyBub2RlLiBTdWNoIGFwcGxpY2F0aW9ucyB1c2UgYSAibG9jYWwiIEFCQ0lcbmNvbm5lY3Rpb24sIHdoaWNoIGV4cG9zZXMgYXBwbGljYXRpb24gbWV0aG9kcyB0byB0aGUgbm9kZSBhcyBkaXJlY3QgZnVuY3Rpb25cbmNhbGxzLicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiU29ja2V0IHByb3RvY29sIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IE91dC1vZi1wcm9jZXNzIGFwcGxpY2F0aW9ucyBtYXkgZXhwb3J0IHRoZSBBQkNJIHNlcnZpY2VcbnZpYSBhIGN1c3RvbSBzb2NrZXQgcHJvdG9jb2wgdGhhdCBzZW5kcyByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIG92ZXIgYVxuVW5peC1kb21haW4gb3IgVENQIHNvY2tldCBjb25uZWN0aW9uIGFzIGxlbmd0aC1wcmVmaXhlZCBwcm90b2NvbCBidWZmZXJzLlxuSW4gVGVuZGVybWludCwgdGhpcyBpcyBoYW5kbGVkIGJ5IHRoZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vYWJjaS9jbGllbnQvc29ja2V0X2NsaWVudC5nbyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoInNvY2tldCBjbGllbnQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJnUlBDIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IE91dC1vZi1wcm9jZXNzIGFwcGxpY2F0aW9ucyBtYXkgZXhwb3J0IHRoZSBBQkNJIHNlcnZpY2UgdmlhIGdSUEMuXG5JbiBUZW5kZXJtaW50LCB0aGlzIGlzIGhhbmRsZWQgYnkgdGhlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9hYmNpL2NsaWVudC9ncnBjX2NsaWVudC5nbyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoImdSUEMgY2xpZW50IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCb3RoIHRoZSBvdXQtb2YtcHJvY2VzcyBvcHRpb25zICgyKSBhbmQgKDMpIGhhdmUgYSBsb25nIGhpc3RvcnkgaW4gVGVuZGVybWludC5cblRoZSBiZWdpbm5pbmdzIG9mIHRoZSBnUlBDIGNsaWVudCB3ZXJlIGFkZGVkIGluICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC9hYmNpL2NvbW1pdC8xYWIzYzc0NzE4MmFhYTM4NDE4MjU4Njc5YzY2NzA5MGMyYmIxZTBkIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIk1heSAyMDE2IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIHdoZW5cbkFCQ0kgd2FzIHN0aWxsIGhvc3RlZCBpbiBhIHNlcGFyYXRlIHJlcG9zaXRvcnksIGFuZCB0aGUgc29ja2V0IGNsaWVudCAoZm9ybWVybHlcbmNhbGxlZCB0aGUgInJlbW90ZSBjbGllbnQiKSB3YXMgcGFydCBvZiBBQkNJIGZyb20gaXRzIGluY2VwdGlvbiBpbiBOb3ZlbWJlclxuMjAxNS4nCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXQgdGhhdCB0aW1lIHdoZW4gQUJDSSB3YXMgZmlyc3QgYmVpbmcgZGV2ZWxvcGVkLCB0aGUgZ1JQQyBwcm9qZWN0IHdhcyB2ZXJ5IG5ld1xuKGl0IGxhdW5jaGVkIFE0IDIwMTUpIGFuZCBpdCB3YXMgbm90IGFuIG9idmlvdXMgY2hvaWNlIGZvciB1c2UgaW4gVGVuZGVybWludC5cbkl0IHRvb2sgYSB3aGlsZSBiZWZvcmUgdGhlIGxhbmd1YWdlIGNvdmVyYWdlIGFuZCBxdWFsaXR5IG9mIGdSUEMgcmVhY2hlZCBhXG5wb2ludCB3aGVyZSBpdCBjb3VsZCBiZSBhIHZpYWJsZSBzb2x1dGlvbiBmb3Igb3V0LW9mLXByb2Nlc3MgYXBwbGljYXRpb25zLiAgRm9yXG50aGF0IHJlYXNvbiwgaXQgbWFkZSBzZW5zZSBmb3IgdGhlIGluaXRpYWwgZGVzaWduIG9mIEFCQ0kgdG8gZm9jdXMgb24gYSBjdXN0b21cbnByb3RvY29sIGZvciBvdXQtb2YtcHJvY2VzcyBhcHBsaWNhdGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInByb2JsZW0tc3RhdGVtZW50IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcm9ibGVtLXN0YXRlbWVudCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcm9ibGVtIFN0YXRlbWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgcHJhY3RpY2FsIHJlYXNvbnMsIEFCQ0kgbmVlZHMgYW4gaW50ZXJwcm9jZXNzIGNvbW11bmljYXRpb24gb3B0aW9uIHRvXG5zdXBwb3J0IGFwcGxpY2F0aW9ucyBub3Qgd3JpdHRlbiBpbiBHby4gVGhlIHR3byBwcmFjdGljYWwgb3B0aW9ucyBhcmUgUlBDIGFuZFxuRkZJLCBhbmQgZm9yIG9wZXJhdGlvbmFsIHJlYXNvbnMgYW4gUlBDIG1lY2hhbmlzbSBtYWtlcyBtb3JlIHNlbnNlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgc29ja2V0IHByb3RvY29sIGhhcyBub3QgY2hhbmdlZCBhbGwgdGhhdCBzdWJzdGFudGlhbGx5IHNpbmNlIGl0cyBvcmlnaW5hbFxuZGVzaWduLCBhbmQgaGFzIHRoZSBhZHZhbnRhZ2Ugb2YgYmVpbmcgc2ltcGxlIHRvIGltcGxlbWVudCBpbiBhbG1vc3QgYW55XG5yZWFzb25hYmxlIGxhbmd1YWdlLiAgSG93ZXZlciwgaXRzIHNpbXBsaWNpdHkgaW5jbHVkZXMgc29tZSBsaW1pdGF0aW9ucyB0aGF0XG5oYXZlIGhhZCBhIG5lZ2F0aXZlIGltcGFjdCBvbiB0aGUgc3RhYmlsaXR5IGFuZCBwZXJmb3JtYW5jZSBvZiBvdXQtb2YtcHJvY2Vzc1xuYXBwbGljYXRpb25zIHVzaW5nIGl0LiBJbiBwYXJ0aWN1bGFyOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgcHJvdG9jb2wgbGFja3MgcmVxdWVzdCBpZGVudGlmaWVycywgc28gdGhlIGNsaWVudCBhbmQgc2VydmVyIG11c3QgcmV0dXJuXG5yZXNwb25zZXMgaW4gc3RyaWN0IEZJRk8gb3JkZXIuIEV2ZW4gaWYgdGhlIGNsaWVudCBpc3N1ZXMgcmVxdWVzdHMgdGhhdCBoYXZlXG5ubyBkZXBlbmRlbmN5IG9uIGVhY2ggb3RoZXIsIHRoZSBwcm90b2NvbCBoYXMgbm8gd2F5IGV4Y2VwdCBvcmRlciBvZiBpc3N1ZSB0b1xubWFwIHJlc3BvbnNlcyB0byByZXF1ZXN0cy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhpcyByZWR1Y2VzIChpbiBzb21lIGNhc2VzIHN1YnN0YW50aWFsbHkpIHRoZSBjb25jdXJyZW5jeSBhbiBhcHBsaWNhdGlvbiBjYW5cbmV4cGxvaXQsIHNpbmNlIHRoZSBwYXJhbGxlbGlzbSBvZiByZXF1ZXN0cyBpbiBmbGlnaHQgaXMgZ2F0ZWQgYnkgdGhlIHNsb3dlc3RcbmFjdGl2ZSByZXF1ZXN0IGF0IGFueSBtb21lbnQuICBUaGVyZSBoYXZlIGJlZW4gY29tcGxhaW50cyBmcm9tIHNvbWUgbmV0d29ya1xub3BlcmF0b3JzIG9uIHRoYXQgYmFzaXMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIHByb3RvY29sIGxhY2tzIG1ldGhvZCBpZGVudGlmaWVycywgc28gdGhlIG9ubHkgd2F5IGZvciB0aGUgY2xpZW50IGFuZFxuc2VydmVyIHRvIHVuZGVyc3RhbmQgd2hpY2ggb3BlcmF0aW9uIGlzIHJlcXVlc3RlZCBpcyB0byBkaXNwYXRjaCBvbiB0aGUgdHlwZVxub2YgdGhlIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHBheWxvYWRzLiBGb3IgcmVzcG9uc2VzLCB0aGlzIG1lYW5zIHRoYXQgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL2FiY2kvY2xpZW50L3NvY2tldF9jbGllbnQuZ28jTDE0OSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImFueVxuZXJyb3IgY29uZGl0aW9uIGlzIHRlcm1pbmFsIG5vdCBvbmx5IHRvIHRoZSByZXF1ZXN0LCBidXQgdG8gdGhlIGVudGlyZSBBQkNJXG5jbGllbnQiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgaGlzdG9yaWNhbCBpbnRlbnQgb2YgdGVybWluYXRpbmcgZm9yIGFueSBlcnJvciBzZWVtcyB0byBoYXZlIGJlZW4gdGhhdFxuYWxsIEFCQ0kgZXJyb3JzIGFyZSB1bnJlY292ZXJhYmxlIGFuZCBoZW5jZSBwcm90b2NvbCBmYXRhbCAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiXG4oc2VlICIpLAogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNub3RlMSIgfSB9LCBbX3ZtLl92KCJOb3RlIDEiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIikuICBJbiBwcmFjdGljZSwgaG93ZXZlciwgdGhpcyBncmVhdGx5IGNvbXBsaWNhdGVzXG5kZWJ1Z2dpbmcgYSBmYXVsdHkgbm9kZSwgc2luY2UgdGhlIG9ubHkgd2F5IHRvIHJlc3BvbmQgdG8gZXJyb3JzIGlzIHRvIHBhbmljXG50aGUgbm9kZSB3aGljaCBsb3NlcyB2YWx1YWJsZSBjb250ZXh0IHRoYXQgY291bGQgaGF2ZSBiZWVuIGxvZ2dlZC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGVyZSBhcmUgc3VidGxlIGNvbmN1cnJlbmN5IG1hbmFnZW1lbnQgZGVwZW5kZW5jaWVzIGJldHdlZW4gdGhlIGNsaWVudCBhbmRcbnRoZSBzZXJ2ZXIgdGhhdCBhcmUgbm90IGNsZWFybHkgZG9jdW1lbnRlZCBhbnl3aGVyZSwgYW5kIGl0IGlzIHZlcnkgZWFzeSBmb3JcbnNtYWxsIGNoYW5nZXMgaW4gYm90aCB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyIHRvIGxlYWQgdG8gdHJpY2t5IGRlYWRsb2NrcyxcbnBhbmljcywgcmFjZSBjb25kaXRpb25zLCBhbmQgc2xvd2Rvd25zLiBBcyBhIHJlY2VudCBleGFtcGxlIG9mIHRoaXMsIHNlZVxuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvcHVsbC84NTgxIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L3B1bGwvODU4MSIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVzZSBsaW1pdGF0aW9ucyBhcmUgZml4YWJsZSwgYnV0IG9uZSBpbXBvcnRhbnQgcXVlc3Rpb24gaXMgd2hldGhlciBpdCBpc1xud29ydGh3aGlsZSB0byBmaXggdGhlbS4gIFdlIGNhbiBhZGQgcmVxdWVzdCBhbmQgbWV0aG9kIGlkZW50aWZpZXJzLCBmb3JcbmV4YW1wbGUsIGJ1dCBkb2luZyBzbyB3b3VsZCBiZSBhIGJyZWFraW5nIGNoYW5nZSB0byB0aGUgcHJvdG9jb2wgcmVxdWlyaW5nXG5ldmVyeSBhcHBsaWNhdGlvbiB1c2luZyBpdCB0byB1cGRhdGUuICBJZiBhcHBsaWNhdGlvbnMgaGF2ZSB0byBtaWdyYXRlIGFueXdheSxcbnRoZSBzdGFiaWxpdHkgYW5kIGxhbmd1YWdlIGNvdmVyYWdlIG9mIGdSUEMgaGF2ZSBpbXByb3ZlZCBhIGxvdCwgYW5kIHRvZGF5IGl0XG5pcyBwcm9iYWJseSBzaW1wbGVyIHRvIHNldCB1cCBhbmQgbWFpbnRhaW4gYW4gYXBwbGljYXRpb24gdXNpbmcgZ1JQQyB0cmFuc3BvcnRcbnRoYW4gdG8gcmVpbXBsZW1lbnQgdGhlIFRlbmRlcm1pbnQgc29ja2V0IHByb3RvY29sLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJNb3Jlb3ZlciwgZ1JQQyBhZGRyZXNzZXMgYWxsIHRoZSBhYm92ZSBpc3N1ZXMgb3V0LW9mLXRoZS1ib3gsIGFuZCByZXF1aXJlc1xuKG11Y2gpIGxlc3MgY3VzdG9tIGNvZGUgZm9yIGJvdGggdGhlIHNlcnZlciAoaS5lLiwgdGhlIGFwcGxpY2F0aW9uKSBhbmQgdGhlXG5jbGllbnQuIFRoZSBwcm9qZWN0IGlzIHdlbGwtZnVuZGVkIGFuZCB3aWRlbHktdXNlZCwgd2hpY2ggbWFrZXMgaXQgYSBzYWZlIGJldFxuZm9yIGEgZGVwZW5kZW5jeS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGVjaXNpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RlY2lzaW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEZWNpc2lvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlcmUgaXMgYSBzZXQgb2YgcmVsYXRlZCBhbHRlcm5hdGl2ZXMgdG8gY29uc2lkZXI6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJRdWVzdGlvbiAxOiBEZXNpZ25hdGUgYSBzaW5nbGUgSVBDIHN0YW5kYXJkIGZvciBvdXQtb2YtcHJvY2VzcyBhcHBsaWNhdGlvbnM/IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkNsYWltOiBXZSBzaG91bGQgY29udmVyZ2Ugb24gb25lIChhbmQgb25seSBvbmUpIElQQyBvcHRpb24gZm9yIG91dC1vZi1wcm9jZXNzXG5hcHBsaWNhdGlvbnMuIFdlIHNob3VsZCBjaG9vc2UgYW4gb3B0aW9uIHRoYXQsIGFmdGVyIGEgc3VpdGFibGUgcGVyaW9kIG9mXG5kZXByZWNhdGlvbiBmb3IgYWx0ZXJuYXRpdmVzLCB3aWxsIGFkZHJlc3MgbW9zdCBvciBhbGwgdGhlIGhpZ2hlc3QtaW1wYWN0XG51c2VzIG9mIFRlbmRlcm1pbnQuICBNYWludGFpbmluZyBtdWx0aXBsZSBvcHRpb25zIGluY3JlYXNlcyB0aGUgc3VyZmFjZSBhcmVhXG5mb3IgYnVncyBhbmQgdnVsbmVyYWJpbGl0aWVzLCBhbmQgd2Ugc2hvdWxkIG5vdCBoYXZlIG11bHRpcGxlIG9wdGlvbnMgZm9yXG5iYXNpYyBpbnRlcmZhY2VzIHdpdGhvdXQgYSBjbGVhciBhbmQgd2VsbC1kb2N1bWVudGVkIHJlYXNvbi4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJRdWVzdGlvbiAyYTogQ2hvb3NlIGdSUEMgYW5kIGRlcHJlY2F0ZS9yZW1vdmUgdGhlIHNvY2tldCBwcm90b2NvbD8iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQ2xhaW06IE1haW50YWluaW5nIGFuZCBpbXByb3ZpbmcgYSBjdXN0b20gUlBDIHByb3RvY29sIGlzIGEgc3Vic3RhbnRpYWxcbnByb2plY3QgYW5kIG5vdCBkaXJlY3RseSByZWxldmFudCB0byB0aGUgcmVxdWlyZW1lbnRzIG9mIGNvbnNlbnN1cy4gV2Ugd291bGRcbmJlIGJldHRlciBzZXJ2ZWQgYnkgZGVwZW5kaW5nIG9uIGEgd2VsbC1tYWludGFpbmVkIG9wZW4tc291cmNlIGxpYnJhcnkgbGlrZVxuZ1JQQy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJRdWVzdGlvbiAyYjogSW1wcm92ZSB0aGUgc29ja2V0IHByb3RvY29sIGFuZCBkZXByZWNhdGUvcmVtb3ZlIGdSUEM/IgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkNsYWltOiBJZiB3ZSBmaW5kIG1lYW5pbmdmdWwgYWR2YW50YWdlcyB0byBtYWludGFpbmluZyBvdXIgb3duIGN1c3RvbSBSUENcbnByb3RvY29sIGluIFRlbmRlcm1pbnQsIHdlIHNob3VsZCB0cmVhdCBpdCBhcyBhIGZpcnN0LWNsYXNzIHByb2plY3Qgd2l0aGluXG50aGUgY29yZSBhbmQgaW52ZXN0IGluIG1ha2luZyBpdCBnb29kIGVub3VnaCB0aGF0IHdlIGRvIG5vdCByZXF1aXJlIG90aGVyXG5vcHRpb25zLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPbmUgaW1wb3J0YW50IGNvbnNpZGVyYXRpb24iKV0pLAogICAgICAgIF92bS5fdigiIHdoZW4gZGlzY3Vzc2luZyB0aGVzZSBxdWVzdGlvbnMgaXMgdGhhdCAiKSwKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJhbnlcbm91dGNvbWUgd2hpY2ggaW5jbHVkZXMga2VlcGluZyB0aGUgc29ja2V0IHByb3RvY29sIHdpbGwgaGF2ZSBldmVudHVhbCBtaWdyYXRpb25cbmltcGFjdHMgZm9yIG91dC1vZi1wcm9jZXNzIGFwcGxpY2F0aW9ucyIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiByZWdhcmRsZXNzLiBUbyBmaXggdGhlIGxpbWl0YXRpb25zIG9mXG50aGUgc29ja2V0IHByb3RvY29sIGFzIGl0IGlzIGN1cnJlbnRseSBkZXNpZ25lZCB3aWxsIHJlcXVpcmUgbWFraW5nICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImJyZWFraW5nXG5jaGFuZ2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRvIHRoZSBwcm90b2NvbC4gIFNvLCB3aGlsZSB3ZSBtYXkgcHV0IG9mZiBhIG1pZ3JhdGlvbiBjb3N0IGZvclxub3V0LW9mLXByb2Nlc3MgYXBwbGljYXRpb25zIGJ5IHJldGFpbmluZyB0aGUgc29ja2V0IHByb3RvY29sIGluIHRoZSBzaG9ydCB0ZXJtLFxud2Ugd2lsbCBldmVudHVhbGx5IGhhdmUgdG8gcGF5IHRob3NlIGNvc3RzIHRvIGZpeCB0aGUgcHJvYmxlbXMgaW4gaXRzIGN1cnJlbnRcbmRlc2lnbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGV0YWlsZWQtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXRhaWxlZC1kZXNpZ24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERldGFpbGVkIERlc2lnbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJZiB3ZSBjaG9vc2UgdG8gc3RhbmRhcmRpemUgb24gZ1JQQywgdGhlIG1haW4gd29yayBpbiBUZW5kZXJtaW50IGNvcmUgd2lsbFxuYmUgcmVtb3ZpbmcgYW5kIGNsZWFuaW5nIHVwIHRoZSBjb2RlIGZvciB0aGUgc29ja2V0IGNsaWVudCBhbmQgc2VydmVyLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJCZXNpZGVzIHRoZSBjb2RlIGNsZWFudXAsIHdlIHdpbGwgYWxzbyBuZWVkIHRvIGNsZWFybHkgZG9jdW1lbnQgYVxuZGVwcmVjYXRpb24gc2NoZWR1bGUsIGFuZCBpbnZlc3QgdGltZSBpbiBtYWtpbmcgdGhlIG1pZ3JhdGlvbiBlYXNpZXIgZm9yXG5hcHBsaWNhdGlvbnMgY3VycmVudGx5IHVzaW5nIHRoZSBzb2NrZXQgcHJvdG9jb2wuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUG9pbnQgZm9yIGRpc2N1c3Npb246IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIE1pZ3JhdGluZyBmcm9tIHRoZSBzb2NrZXQgcHJvdG9jb2wgdG8gZ1JQQ1xuc2hvdWxkIG1vc3RseSBiZSBhIHBsdW1iaW5nIGNoYW5nZSwgYXMgbG9uZyBhcyB3ZSBkbyBpdCBkdXJpbmcgYSByZWxlYXNlXG5pbiB3aGljaCB3ZSBhcmUgbm90IG1ha2luZyBvdGhlciBicmVha2luZyBjaGFuZ2VzIHRvIEFCQ0kuIEhvd2V2ZXIsIHRoZVxuZWZmb3J0IG1heSBiZSBtb3JlIG9yIGxlc3MgZGVwZW5kaW5nIG9uIGhvdyBnUlBDIGludGVncmF0aW9uIHdvcmtzIGluIHRoZVxuYXBwbGljYXRpb24ncyBpbXBsZW1lbnRhdGlvbiBsYW5ndWFnZSwgYW5kIHdvdWxkIGhhdmUgdG8gYmUgc3VyZSBuZXR3b3Jrc1xuaGF2ZSBwbGVudHkgb2YgdGltZSBub3Qgb25seSB0byBtYWtlIHRoZSBjaGFuZ2UgYnV0IHRvIHZlcmlmeSB0aGF0IGl0XG5wcmVzZXJ2ZXMgdGhlIGZ1bmN0aW9uIG9mIHRoZSBuZXR3b3JrLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJXaGF0IHF1ZXN0aW9ucyBzaG91bGQgd2UgYmUgYXNraW5nIG5vZGUgb3BlcmF0b3JzIGFuZCBhcHBsaWNhdGlvblxuZGV2ZWxvcGVycyB0byB1bmRlcnN0YW5kIHRoZSBtaWdyYXRpb24gY29zdHMgYmV0dGVyPyIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIklmIHdlIGNob29zZSB0byBrZWVwIG9ubHkgdGhlIHNvY2tldCBwcm90b2NvbCwgd2Ugd2lsbCBuZWVkIHRvIGZvbGxvdyB1cFxud2l0aCBhIG1vcmUgZGV0YWlsZWQgZGVzaWduIGZvciBleHRlbmRpbmcgYW5kIHVwZ3JhZGluZyB0aGUgcHJvdG9jb2wgdG8gZml4XG50aGUgZXhpc3RpbmcgcGVyZm9ybWFuY2UgYW5kIG9wZXJhdGlvbmFsIGlzc3VlcyB3aXRoIHRoZSBwcm90b2NvbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiTW9yZW92ZXIsIHNpbmNlIHRoZSBnUlBDIGludGVyZmFjZSBoYXMgYmVlbiBhcm91bmQgZm9yIGEgbG9uZyB0aW1lIHdlIHdpbGxcbmFsc28gbmVlZCBhIGRlcHJlY2F0aW9uIHBsYW4gZm9yIGl0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIklmIHdlIGNob29zZSB0byBrZWVwIGJvdGggb3B0aW9ucywgd2Ugd2lsbCBzdGlsbCBuZWVkIHRvIGRvIGFsbCB0aGUgd29yayBvZlxuKDIpLCBidXQgdGhlIGdSUEMgaW1wbGVtZW50YXRpb24gc2hvdWxkIG5vdCByZXF1aXJlIGFueSBpbW1lZGlhdGUgY2hhbmdlcy4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYWx0ZXJuYXRpdmVzLWNvbnNpZGVyZWQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FsdGVybmF0aXZlcy1jb25zaWRlcmVkIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFsdGVybmF0aXZlcyBDb25zaWRlcmVkIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRkZJIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIuIEFub3RoZXIgYXBwcm9hY2ggd2UgY291bGQgdGFrZSBpcyB0byB1c2UgYSBDLWJhc2VkIEZGSSBpbnRlcmZhY2Ugc29cbnRoYXQgYXBwbGljYXRpb25zIHdyaXR0ZW4gaW4gb3RoZXIgbGFuZ3VhZ2VzIGFyZSBsaW5rZWQgZGlyZWN0bHkgd2l0aCB0aGVcbmNvbnNlbnN1cyBub2RlLCBhbiBvcHRpb24gY3VycmVudGx5IG9ubHkgYXZhaWxhYmxlIGZvciBHbyBhcHBsaWNhdGlvbnMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkFuIEZGSSBpbnRlcmZhY2UgaXMgcG9zc2libGUgZm9yIGEgbG90IG9mIGxhbmd1YWdlcywgYnV0IEZGSSBzdXBwb3J0IHZhcmllc1xud2lkZWx5IGluIGNvdmVyYWdlIGFuZCBxdWFsaXR5IGFjcm9zcyBsYW5ndWFnZXMgYW5kIHRoZSBwb2ludHMgb2YgZnJpY3Rpb25cbmNhbiBiZSB0cmlja3kgdG8gd29yayBhcm91bmQuICBNb3Jlb3ZlciwgaXQncyBtdWNoIGhhcmRlciB0byBhZGQgRkZJIHN1cHBvcnRcbnRvIGEgbGFuZ3VhZ2Ugd2hlcmUgaXQncyBtaXNzaW5nIGFmdGVyLXRoZS1mYWN0IGZvciBhbiBhcHBsaWNhdGlvbiBkZXZlbG9wZXIuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkFsdGhvdWdoIGEgYmFzaWMgRkZJIGludGVyZmFjZSBpcyBub3QgdG9vIGRpZmZpY3VsdCBvbiB0aGUgR28gc2lkZSwgdGhlIENcbnNoaW1zIGZvciBhbiBGRkkgY2FuIGdldCBjb21wbGljYXRlZCBpZiB0aGVyZSdzIGEgbG90IG9mIHZhcmlhYmlsaXR5IGluIHRoZVxucnVudGltZSBlbnZpcm9ubWVudCBvbiB0aGUgb3RoZXIgZW5kLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJJZiB3ZSB3YW50IHRvIGhhdmUgb25lIGFuc3dlciBmb3Igbm9uLUdvIGFwcGxpY2F0aW9ucywgd2UgYXJlIGJldHRlciBvZmZcbnBpY2tpbmcgYW4gSVBDLWJhc2VkIHNvbHV0aW9uICh3aGV0aGVyIHRoYXQncyBnUlBDIG9yIGFuIGV4dGVuc2lvbiBvZiBvdXJcbmN1c3RvbSBzb2NrZXQgcHJvdG9jb2wgb3Igc29tZXRoaW5nIGVsc2UpLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zZXF1ZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnNlcXVlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc2VxdWVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTdGFuZGFyZGl6ZSBvbiBnUlBDIildKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4pyFIEFkZHJlc3NlcyBleGlzdGluZyBwZXJmb3JtYW5jZSBhbmQgb3BlcmF0aW9uYWwgaXNzdWVzLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4pyFIFJlcGxhY2VzIGN1c3RvbSBjb2RlIHdpdGggYSB3ZWxsLW1haW50YWluZWQgd2lkZWx5LXVzZWQgbGlicmFyeS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKchSBBbGlnbnMgd2l0aCBDb3Ntb3MgU0RLLCB3aGljaCBhbHJlYWR5IHVzZXMgZ1JQQyBleHRlbnNpdmVseS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKchSBBbGlnbnMgd2l0aCBwcml2IHZhbGlkYXRvciBpbnRlcmZhY2UsIGZvciB3aGljaCB0aGUgc29ja2V0IHByb3RvY29sIGlzIGFscmVhZHkgZGVwcmVjYXRlZCBmb3IgZ1JQQy4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKdkyBBcHBsaWNhdGlvbnMgd2lsbCBiZSBoYXJkIHRvIGltcGxlbWVudCBpbiBhIGxhbmd1YWdlIHdpdGhvdXQgZ1JQQyBzdXBwb3J0LiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4puUIEFsbCB1c2VycyBvZiB0aGUgc29ja2V0IHByb3RvY29sIGhhdmUgdG8gbWlncmF0ZSB0byBnUlBDLCBhbmQgd2UgYmVsaWV2ZSBtb3N0IGN1cnJlbnQgb3V0LW9mLXByb2Nlc3MgYXBwbGljYXRpb25zIHVzZSB0aGUgc29ja2V0IHByb3RvY29sLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTdGFuZGFyZGl6ZSBvbiBzb2NrZXQgcHJvdG9jb2wiKV0pXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLinIUgTGVzcyBpbW1lZGlhdGUgaW1wYWN0IGZvciBleGlzdGluZyB1c2VycyAoYnV0IHNlZSBiZWxvdykuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigi4pyFIFNpbXBsaWZpZXMgQUJDSSBBUEkgc3VyZmFjZSBieSByZW1vdmluZyBnUlBDLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4p2TIFVzZXJzIG9mIHRoZSBzb2NrZXQgcHJvdG9jb2wgd2lsbCBoYXZlIGEgKHNtYWxsZXIpIG1pZ3JhdGlvbi4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKdkyBQb3RlbnRpYWxseSBlYXNpZXIgdG8gaW1wbGVtZW50IGZvciBsYW5ndWFnZXMgdGhhdCBkbyBub3QgaGF2ZSBzdXBwb3J0LiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi4puUIE5lZWQgdG8gZG8gYWxsIHRoZSB3b3JrIHRvIGZpeCB0aGUgc29ja2V0IHByb3RvY29sICh3aGljaCB3aWxsIHJlcXVpcmUgZXhpc3RpbmcgdXNlcnMgdG8gdXBkYXRlIGFueXdheSBsYXRlcikuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLim5QgT25nb2luZyBtYWludGVuYW5jZSBidXJkZW4gZm9yIHBlci1sYW5ndWFnZSBzZXJ2ZXIgaW1wbGVtZW50YXRpb25zLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJLZWVwIGJvdGggb3B0aW9ucyIpXSldKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKchSBMZXNzIGltbWVkaWF0ZSBpbXBhY3QgZm9yIGV4aXN0aW5nIHVzZXJzIChidXQgc2VlIGJlbG93KS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKdkyBVc2VycyBvZiB0aGUgc29ja2V0IHByb3RvY29sIHdpbGwgaGF2ZSBhIChzbWFsbGVyKSBtaWdyYXRpb24uIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLim5QgU3RpbGwgbmVlZCB0byBkbyBhbGwgdGhlIHdvcmsgdG8gZml4IHRoZSBzb2NrZXQgcHJvdG9jb2wgKHdoaWNoIHdpbGwgcmVxdWlyZSBleGlzdGluZyB1c2VycyB0byB1cGRhdGUgYW55d2F5IGxhdGVyKS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIuKblCBSZXF1aXJlcyBvbmdvaW5nIG1haW50ZW5hbmNlIGFuZCBzdXBwb3J0IG9mIGJvdGggZ1JQQyBhbmQgc29ja2V0IHByb3RvY29sIGludGVncmF0aW9ucy4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVmZXJlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVmZXJlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L3RyZWUvbWFpbi9zcGVjL2FiY2kiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFwcGxpY2F0aW9uIEJsb2NrY2hhaW4gSW50ZXJmYWNlIChBQkNJKSIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9hYmNpL2NsaWVudC9zb2NrZXRfY2xpZW50LmdvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJUZW5kZXJtaW50IEFCQ0kgc29ja2V0IGNsaWVudCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL2FiY2kvY2xpZW50L2dycGNfY2xpZW50LmdvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJUZW5kZXJtaW50IEFCQ0kgZ1JQQyBjbGllbnQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC9hYmNpL2NvbW1pdC8xYWIzYzc0NzE4MmFhYTM4NDE4MjU4Njc5YzY2NzA5MGMyYmIxZTBkIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJJbml0aWFsIGNvbW1pdCBvZiBnUlBDIGNsaWVudCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJub3RlcyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbm90ZXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTm90ZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBpZDogIm5vdGUxIiB9IH0pLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTm90ZSAxIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IFRoZSBjaG9pY2UgdG8gbWFrZSBhbGwgQUJDSSBlcnJvcnMgcHJvdG9jb2wtZmF0YWxcbndhcyBpbnRlbmRlZCB0byBhdm9pZCB0aGUgcmlzayB0aGF0IHJlY292ZXJpbmcgYW4gYXBwbGljYXRpb24gZXJyb3IgY291bGRcbmNhdXNlIGFwcGxpY2F0aW9uIHN0YXRlIHRvIGRpdmVyZ2UuICBEaXZlcmdlbmNlIGNhbiBicmVhayBjb25zZW5zdXMsIHNvIGl0J3NcbmVzc2VudGlhbCB0byBhdm9pZCBpdC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnVGhpcyBpcyBhIHNvdW5kIHByaW5jaXBsZSwgYnV0IGNvbmZsYXRlcyBwcm90b2NvbCBlcnJvcnMgd2l0aCAibWVjaGFuaWNhbCJcbmVycm9ycyBzdWNoIGFzIHRpbWVvdXRzLCByZXNvdXJlcyBleGhhdXN0aW9uLCBmYWlsZWQgY29ubmVjdGlvbnMsIGFuZCBzbyBvbi5cbkJlY2F1c2UgdGhlIHByb3RvY29sIGhhcyBubyB3YXkgdG8gZGlzdGluZ3Vpc2ggdGhlc2UgY29uZGl0aW9ucywgdGhlIG9ubHkgd2F5XG5mb3IgYW4gYXBwbGljYXRpb24gdG8gcmVwb3J0IGFuIGVycm9yIGlzIHRvIHBhbmljIG9yIGNyYXNoLicKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJXaGV0aGVyIGEgbm9kZSBpcyBydW5uaW5nIGluIHRoZSBzYW1lIHByb2Nlc3MgYXMgdGhlIGFwcGxpY2F0aW9uIG9yIGFzIGFcbnNlcGFyYXRlIHByb2Nlc3MsIGFwcGxpY2F0aW9uIGVycm9ycyBzaG91bGQgbm90IGJlIHN1cHByZXNzZWQgb3IgaGlkZGVuLlxuSG93ZXZlciwgaXQncyBpbXBvcnRhbnQgdG8gZW5zdXJlIHRoYXQgZXJyb3JzIGFyZSBoYW5kbGVkIGF0IGEgY29uc2lzdGVudCBhbmRcbndlbGwtZGVmaW5lZCBwb2ludCBpbiB0aGUgcHJvdG9jb2w6IEhhdmluZyB0aGUgYXBwbGljYXRpb24gcGFuaWMgb3IgY3Jhc2hcbnJhdGhlciB0aGFuIHJlcG9ydGluZyBhbiBlcnJvciBtZWFucyB0aGUgbm9kZSBzZWVzIGRpZmZlcmVudCByZXN1bHRzXG5kZXBlbmRpbmcgb24gd2hldGhlciB0aGUgYXBwbGljYXRpb24gcnVucyBpbi1wcm9jZXNzIG9yIG91dC1vZi1wcm9jZXNzLCBldmVuXG5pZiB0aGUgYXBwbGljYXRpb24gbG9naWMgaXMgb3RoZXJ3aXNlIGlkZW50aWNhbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiYXBwZW5kaXgta25vd24taW1wbGVtZW50YXRpb25zLW9mLWFiY2ktc29ja2V0LXByb3RvY29sIiwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNhcHBlbmRpeC1rbm93bi1pbXBsZW1lbnRhdGlvbnMtb2YtYWJjaS1zb2NrZXQtcHJvdG9jb2wiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBBcHBlbmRpeDogS25vd24gSW1wbGVtZW50YXRpb25zIG9mIEFCQ0kgU29ja2V0IFByb3RvY29sIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgaXMgYSBsaXN0IG9mIGtub3duIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgVGVuZGVybWludCBjdXN0b20gc29ja2V0XG5wcm90b2NvbC4gTm90ZSB0aGF0IGluIG1vc3QgY2FzZXMgSSBoYXZlIG5vdCBjaGVja2VkIGhvdyBjb21wbGV0ZSBvciBjb3JyZWN0XG50aGVzZSBpbXBsZW1lbnRhdGlvbnMgYXJlOyB0aGVzZSBhcmUgYmFzZWQgb24gc2VhcmNoIHJlc3VsdHMgYW5kIGEgY3Vyc29yeVxudmlzdWFsIGluc3BlY3Rpb24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGVuZGVybWludCBDb3JlIChHbyk6ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vYWJjaS9jbGllbnQvc29ja2V0X2NsaWVudC5nbyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiY2xpZW50IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9hYmNpL3NlcnZlci9zb2NrZXRfc2VydmVyLmdvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkluZm9ybWFsIFN5c3RlbXMgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vaW5mb3JtYWxzeXN0ZW1zL3RlbmRlcm1pbnQtcnMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInRlbmRlcm1pbnQtcnMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChSdXN0KTogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vaW5mb3JtYWxzeXN0ZW1zL3RlbmRlcm1pbnQtcnMvYmxvYi9tYXN0ZXIvYWJjaS9zcmMvY2xpZW50LnJzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJjbGllbnQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9pbmZvcm1hbHN5c3RlbXMvdGVuZGVybWludC1ycy9ibG9iL21hc3Rlci9hYmNpL3NyYy9zZXJ2ZXIucnMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInNlcnZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGVuZGVybWludCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L2pzLWFiY2kiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImpzLWFiY2kiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChKUyk6ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvanMtYWJjaS9ibG9iL21hc3Rlci9zcmMvc2VydmVyLmpzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vSG90bW9rYS9ob3Rtb2thIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJIb3Rtb2thIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBBQkNJIChKYXZhKTogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vSG90bW9rYS9ob3Rtb2thL2Jsb2IvbWFzdGVyL2lvLWhvdG1va2EtdGVuZGVybWludC1hYmNpL3NyYy9tYWluL2phdmEvaW8vaG90bW9rYS90ZW5kZXJtaW50X2FiY2kvU2VydmVyLmphdmEiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInNlcnZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9wZW51bWJyYS16b25lL3Rvd2VyLWFiY2kiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRvd2VyIEFCQ0kiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChSdXN0KTogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vcGVudW1icmEtem9uZS90b3dlci1hYmNpL2Jsb2IvbWFpbi9zcmMvc2VydmVyLnJzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJzZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vZGF0b3BpYS9hYmNpLWhvc3QiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImFiY2ktaG9zdCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKENsb2p1cmUpOiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9kYXRvcGlhL2FiY2ktaG9zdC9ibG9iL21hc3Rlci9zcmMvYWJjaS9ob3N0LmNsaiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic2VydmVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL0tyenlzaWVrSi9hYmNpX3NlcnZlciIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiYWJjaV9zZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChFcmxhbmcpOiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9Lcnp5c2lla0ovYWJjaV9zZXJ2ZXIvYmxvYi9tYXN0ZXIvc3JjL2FiY2lfc2VydmVyLmVybCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic2VydmVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2RhdmVicnlzb24vcHktYWJjaSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigicHktYWJjaSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKFB5dGhvbik6ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2RhdmVicnlzb24vcHktYWJjaS9ibG9iL21hc3Rlci9zcmMvYWJjaS9zZXJ2ZXIucHkiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInNlcnZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9pbnRlY2hzYS9zY2FsYS10ZW5kZXJtaW50LXNlcnZlciIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic2NhbGEtdGVuZGVybWludC1zZXJ2ZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChTY2FsYSk6ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL0luVGVjaFNBL3NjYWxhLXRlbmRlcm1pbnQtc2VydmVyL2Jsb2IvbWFzdGVyL3NyYy9tYWluL3NjYWxhL2x1L2ludGVjaC90ZW5kZXJtaW50L1NlcnZlci5zY2FsYSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigic2VydmVyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Ytby1hLW0va2VwbGVyIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJrZXBsZXIiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChSdXN0KTogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vZi1vLWEtbS9rZXBsZXIvYmxvYi9tYXN0ZXIvaHMtYWJjaS1zZXJ2ZXIvc3JjL05ldHdvcmsvQUJDSS9TZXJ2ZXIuaHMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInNlcnZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}