{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-052-tendermint-mode.md?vue&type=template&id=6649cf8f&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-052-tendermint-mode.md","mtime":1673295761174},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA1Mi10ZW5kZXJtaW50LW1vZGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fkci0wNTItdGVuZGVybWludC1tb2RlIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFEUiAwNTI6IFRlbmRlcm1pbnQgTW9kZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjI3LTExLTIwMTk6IEluaXRpYWwgZHJhZnQgZnJvbSBBRFItMDUxIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIjEzLTAxLTIwMjA6IFNlcGFyYXRlIEFEUiBUZW5kZXJtaW50IE1vZGUgZnJvbSBBRFItMDUxIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiMjktMDMtMjAyMTogVXBkYXRlIGluZm8gcmVnYXJkaW5nIGRlZmF1bHRzIildKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGV4dCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udGV4dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb250ZXh0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkZ1bGwgbW9kZTogZnVsbCBtb2RlIGRvZXMgbm90IGhhdmUgdGhlIGNhcGFiaWxpdHkgdG8gYmVjb21lIGEgdmFsaWRhdG9yLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVmFsaWRhdG9yIG1vZGUgOiB0aGlzIG1vZGUgaXMgZXhhY3RseSBzYW1lIGFzIGV4aXN0aW5nIHN0YXRlIG1hY2hpbmUgYmVoYXZpb3IuIHN5bmMgd2l0aG91dCB2b3Rpbmcgb24gY29uc2Vuc3VzLCBhbmQgcGFydGljaXBhdGUgY29uc2Vuc3VzIHdoZW4gZnVsbHkgc3luY2VkIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTZWVkIG1vZGUgOiBsaWdodHdlaWdodCBzZWVkIG5vZGUgbWFpbnRhaW5pbmcgYW4gYWRkcmVzcyBib29rLCBwMnAgbGlrZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRsYWIuY29tL3BvbHljaGFpbmxhYnMvdGVuZGVyc2VlZCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiVGVuZGVyU2VlZCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZWNpc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGVjaXNpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlY2lzaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIHdvdWxkIGxpa2UgdG8gc3VnZ2VzdCBhIHNpbXBsZSBUZW5kZXJtaW50IG1vZGUgYWJzdHJhY3Rpb24uIFRoZXNlIG1vZGVzIHdpbGwgbGl2ZSB1bmRlciBvbmUgYmluYXJ5LCBhbmQgd2hlbiBpbml0aWFsaXppbmcgYSBub2RlIHRoZSB1c2VyIHdpbGwgYmUgYWJsZSB0byBzcGVjaWZ5IHdoaWNoIG5vZGUgdGhleSB3b3VsZCBsaWtlIHRvIGNyZWF0ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJXaGljaCByZWFjdG9yLCBjb21wb25lbnQgdG8gaW5jbHVkZSBmb3IgZWFjaCBub2RlXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiZnVsbFxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigic3dpdGNoLCB0cmFuc3BvcnQiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigicmVhY3RvcnNcbiIpLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigibWVtcG9vbCIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiY29uc2Vuc3VzIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJldmlkZW5jZSIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiYmxvY2tjaGFpbiIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigicDJwL3BleCIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigic3RhdGVzeW5jIildKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigicnBjIChzYWZlIGNvbm5lY3Rpb25zIG9ubHkpIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInMiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJubyBwcml2VmFsaWRhdG9yKHByaXZfdmFsaWRhdG9yX2tleS5qc29uLCBwcml2X3ZhbGlkYXRvcl9zdGF0ZS5qc29uKSIKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigidmFsaWRhdG9yXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJzd2l0Y2gsIHRyYW5zcG9ydCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJyZWFjdG9yc1xuIiksCiAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJtZW1wb29sIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJjb25zZW5zdXMiKV0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImV2aWRlbmNlIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJibG9ja2NoYWluIildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJwMnAvcGV4IildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJzdGF0ZXN5bmMiKV0pLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJycGMgKHNhZmUgY29ubmVjdGlvbnMgb25seSkiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAid2l0aCBwcml2VmFsaWRhdG9yKHByaXZfdmFsaWRhdG9yX2tleS5qc29uLCBwcml2X3ZhbGlkYXRvcl9zdGF0ZS5qc29uKSIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoInNlZWRcbiIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoInN3aXRjaCwgdHJhbnNwb3J0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInJlYWN0b3JcbiIpLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigicDJwL3BleCIpXSldKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ29uZmlndXJhdGlvbiwgY2xpIGNvbW1hbmRcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJXZSB3b3VsZCBsaWtlIHRvIHN1Z2dlc3QgYnkgaW50cm9kdWNpbmcgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtb2RlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBwYXJhbWV0ZXIgaW4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25maWcudG9tbCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kIGNsaSIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignbW9kZSA9ICJ7eyAuQmFzZUNvbmZpZy5Nb2RlIH19IicpXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaW4gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25maWcudG9tbCIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidGVuZGVybWludCBzdGFydCAtLW1vZGUgdmFsaWRhdG9yIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAgaW4gY2xpIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiZnVsbCB8IHZhbGlkYXRvciB8IHNlZWRub2RlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVGhlcmUgd2lsbCBiZSBubyBkZWZhdWx0LiBVc2VycyB3aWxsIG5lZWQgdG8gc3BlY2lmeSB3aGVuIHRoZXkgcnVuICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidGVuZGVybWludCBpbml0IildKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJQQyBtb2RpZmljYXRpb25cbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJob3N0OjI2NjU3L3N0YXR1cyIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoInJldHVybiBlbXB0eSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2YWxpZGF0b3JfaW5mbyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHdoZW4gaW4gZnVsbCBtb2RlIiksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJubyBycGMgc2VydmVyIGluIHNlZWRub2RlIildKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiV2hlcmUgdG8gbW9kaWZ5IGluIGNvZGViYXNlXG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiQWRkICBzd2l0Y2ggZm9yICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29uZmlnLk1vZGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIG9uICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZS9ub2RlLmdvOkRlZmF1bHROZXdOb2RlIildKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbmZpZy5Nb2RlPT12YWxpZGF0b3IiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiLCBjYWxsIGRlZmF1bHQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOZXdOb2RlIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoY3VycmVudCBsb2dpYykiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJJZiAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbmZpZy5Nb2RlPT1mdWxsIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgY2FsbCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5ld05vZGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIHdpdGggIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuaWwiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicHJpdlZhbGlkYXRvciIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKGRvIG5vdCBsb2FkIG9yIGdlbmVyYXRpb24pXG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiTmVlZCB0byBhZGQgZXhjZXB0aW9uIHJvdXRpbmUgZm9yICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5pbCIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByaXZWYWxpZGF0b3IiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiB0byByZWxhdGVkIGZ1bmN0aW9ucyIpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiSWYgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb25maWcuTW9kZT09c2VlZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsIGNhbGwgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJOZXdTZWVkTm9kZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKHNlZWQgbm9kZSB2ZXJzaW9uIG9mICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZS9ub2RlLmdvOk5ld05vZGUiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKVxuIiksCiAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIk5lZWQgdG8gYWRkIGV4Y2VwdGlvbiByb3V0aW5lIGZvciAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuaWwiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyZWFjdG9yIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNvbXBvbmVudCIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIHRvIHJlbGF0ZWQgZnVuY3Rpb25zIiksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic3RhdHVzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdGF0dXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3RhdHVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJbXBsZW1lbnRlZCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2VxdWVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zZXF1ZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnNlcXVlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwb3NpdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9zaXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBvc2l0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk5vZGUgb3BlcmF0b3JzIGNhbiBjaG9vc2UgbW9kZSB3aGVuIHRoZXkgcnVuIHN0YXRlIG1hY2hpbmUgYWNjb3JkaW5nIHRvIHRoZSBwdXJwb3NlIG9mIHRoZSBub2RlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTW9kZSBjYW4gcHJldmVudCBtaXN0YWtlcyBiZWNhdXNlIHVzZXJzIGhhdmUgdG8gc3BlY2lmeSB3aGljaCBtb2RlIHRoZXkgd2FudCB0byBydW4gdmlhIGZsYWcuIChlZy4gSWYgYSB1c2VyIHdhbnQgdG8gcnVuIGEgdmFsaWRhdG9yIG5vZGUsIHNoZS9oZSBzaG91bGQgZXhwbGljaXRseSB3cml0ZSBkb3duIHZhbGlkYXRvciBhcyBtb2RlKSIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRGlmZmVyZW50IG1vZGUgbmVlZHMgZGlmZmVyZW50IHJlYWN0b3JzLCByZXN1bHRpbmcgaW4gZWZmaWNpZW50IHJlc291cmNlIHVzYWdlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5lZ2F0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNuZWdhdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmVnYXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiVXNlcnMgbmVlZCB0byBzdHVkeSBob3cgZWFjaCBtb2RlIG9wZXJhdGUgYW5kIHdoaWNoIGNhcGFiaWxpdHkgaXQgaGFzLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5ldXRyYWwiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25ldXRyYWwiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTmV1dHJhbCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZWZlcmVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWZlcmVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWZlcmVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSXNzdWUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2lzc3Vlcy8yMjM3IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjMjIzNyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCcgOiBUZW5kZXJtaW50ICJtb2RlIicpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0bGFiLmNvbS9wb2x5Y2hhaW5sYWJzL3RlbmRlcnNlZWQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRlbmRlclNlZWQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIDogQSBsaWdodHdlaWdodCBUZW5kZXJtaW50IFNlZWQgTm9kZS4iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}