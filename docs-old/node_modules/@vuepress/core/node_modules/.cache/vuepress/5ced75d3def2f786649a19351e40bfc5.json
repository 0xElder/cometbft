{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-069-flexible-node-initialization.md?vue&type=template&id=453c861e&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-069-flexible-node-initialization.md","mtime":1673295761175},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA2OS1mbGV4aWJsZS1ub2RlLWluaXRpYWxpemF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhZHItMDY5LWZsZXhpYmxlLW5vZGUtaW5pdGlhbGl6YXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQURSIDA2OTogRmxleGlibGUgTm9kZSBJbml0aWFsaXphdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2xvZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2hhbmdsb2ciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoYW5nbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfYygicCIsIFtfdm0uX3YoIjIwMjEtMDYtMDk6IEluaXRpYWwgRHJhZnQgKEB0eWNob2lzaCkiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJwIiwgW192bS5fdigiMjAyMS0wNy0yMTogTWFqb3IgUmV2aXNpb24gKEB0eWNob2lzaCkiKV0pXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0YXR1cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0YXR1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiUHJvcG9zZWQuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250ZXh0IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb250ZXh0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnRleHQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJJbiBhbiBlZmZvcnQgdG8gc3VwcG9ydCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvYXJjaGl0ZWN0dXJlL2Fkci0wNjAtZ28tYXBpLXN0YWJpbGl0eS5odG1sIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkdvLUFQSS1TdGFiaWxpdHkiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsXG5kdXJpbmcgdGhlIDAuMzUgZGV2ZWxvcG1lbnQgY3ljbGUsIHdlIGhhdmUgYXR0ZW1wdGVkIHRvIHJlZHVjZSB0aGUgdGhlIEFQSVxuc3VyZmFjZSBhcmVhIGJ5IG1vdmluZyBtb3N0IG9mIHRoZSBpbnRlcmZhY2Ugb2YgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5vZGUiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHBhY2thZ2UgaW50b1xudW5leHBvcnRlZCBmdW5jdGlvbnMsIGFzIHdlbGwgYXMgbW92aW5nIHRoZSByZWFjdG9ycyB0byBhbiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJpbnRlcm5hbCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbnBhY2thZ2UuIEhhdmluZyB0aGlzIGNvaW5jaWRlIHdpdGggdGhlIDAuMzUgcmVsZWFzZSBtYWRlIGEgbG90IG9mIHNlbnNlXG5iZWNhdXNlIHRoZXNlIGludGVyZmFjZXMgd2VyZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiYWxyZWFkeSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjaGFuZ2luZyBhcyBhIHJlc3VsdCBvZiB0aGUgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInAycCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvYXJjaGl0ZWN0dXJlL2Fkci0wNjEtcDJwLXJlZmFjdG9yLXNjb3BlLmh0bWwiIH0gfSwKICAgICAgICAgICAgW192bS5fdigicmVmYWN0b3IiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHNvIGl0IG1hZGUgc2Vuc2UgdG8gdGhpbmsgYSBiaXRcbm1vcmUgYWJvdXQgaG93IHRlbmRlcm1pbnQgZXhwb3NlcyB0aGlzIEFQSS4iCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoaWxlIHRoZSBpbnRlcmZhY2VzIG9mIHRoZSBQMlAgbGF5ZXIgYW5kIG1vc3Qgb2YgdGhlIG5vZGUgcGFja2FnZSBhcmUgYWxyZWFkeVxuaW50ZXJuYWxpemVkLCB0aGlzIHByZWNsdWRlcyBzb21lIG9wZXJhdGlvbmFsIHBhdHRlcm5zIHRoYXQgYXJlIGltcG9ydGFudCB0b1xudXNlcnMgd2hvIHVzZSB0ZW5kZXJtaW50IGFzIGEgbGlicmFyeS4gU3BlY2lmaWNhbGx5LCBpbnRyb3NwZWN0aW5nIHRoZVxudGVuZGVybWludCBub2RlIHNlcnZpY2UgYW5kIHJlcGxhY2luZyBjb21wb25lbnRzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGxhdGVzdFxudmVyc2lvbiBvZiB0aGUgY29kZSwgYW5kIHNvbWUgb2YgdGhlc2UgdXNlIGNhc2VzIHdvdWxkIHJlcXVpcmUgbWFpbnRhaW5pbmcgYVxudmVuZG9yIGNvcHkgb2YgdGhlIGNvZGUuIEFkZGluZyB0aGVzZSBmZWF0dXJlcyByZXF1aXJlcyByYXRoZXIgZXh0ZW5zaXZlXG4oaW50ZXJuYWwvaW1wbGVtZW50YXRpb24pIGNoYW5nZXMgdG8gdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicnBjIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBhY2thZ2VzLCBhbmQgdGhpc1xuQURSIGRlc2NyaWJlcyBhIG1vZGVsIGZvciBjaGFuZ2luZyB0aGUgd2F5IHRoYXQgdGVuZGVybWludCBub2RlcyBpbml0aWFsaXplLCBpblxuc2VydmljZSBvZiBwcm92aWRpbmcgdGhpcyBraW5kIG9mIGZ1bmN0aW9uYWxpdHkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIGNvbnNpZGVyIG5vZGUgaW5pdGlhbGl6YXRpb24sIGJlY2F1c2UgdGhlIGN1cnJlbnQgaW1wbGVtZW50aW9uXG5wcm92aWRlcyBzdHJvbmcgY29ubmVjdGlvbnMgYmV0d2VlbiBhbGwgY29tcG9uZW50cywgYXMgd2VsbCBhcyBiZXR3ZWVuXG50aGUgY29tcG9uZW50cyBvZiB0aGUgbm9kZSBhbmQgdGhlIFJQQyBsYXllciwgYW5kIGJlaW5nIGFibGUgdG8gdGhpbmtcbmFib3V0IHRoZSBpbnRlcmFjdGlvbnMgb2YgdGhlc2UgY29tcG9uZW50cyB3aWxsIGhlbHAgZW5hYmxlIHRoZXNlXG5mZWF0dXJlcyBhbmQgaGVscCBkZWZpbmUgdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgbm9kZSBwYWNrYWdlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhbHRlcm5hdGl2ZS1hcHByb2FjaGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhbHRlcm5hdGl2ZS1hcHByb2FjaGVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFsdGVybmF0aXZlIEFwcHJvYWNoZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlc2UgYWx0ZXJuYXRpdmVzIGFyZSBwcmVzZW50ZWQgdG8gZnJhbWUgdGhlIGRlc2lnbiBzcGFjZSBhbmQgdG9cbmNvbnRleHR1YWxpemUgdGhlIGRlY2lzaW9uIGluIHRlcm1zIG9mIHByb2R1Y3QgcmVxdWlyZW1lbnRzLiBUaGVzZVxuaWRlYXMgYXJlIG5vdCBpbmhlcmVudGx5IGJhZCwgYW5kIG1heSBldmVuIGJlIHBvc3NpYmxlIG9yIGRlc2lyZWFibGVcbmluIHRoZSAoZGlzdGFudCkgZnV0dXJlLCBhbmQgbWVyZWx5IHByb3ZpZGUgYWRkaXRpb25hbCBjb250ZXh0IGZvciBob3dcbndlLCBpbiB0aGUgbW9tZW50IGNhbWUgdG8gb3VyIGRlY2lzaW9uKHMpLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkby1ub3RoaW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkby1ub3RoaW5nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEbyBOb3RoaW5nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGlzIGZ1bmN0aW9uYWwgYW5kIHN1ZmZpY2llbnQgZm9yIHRoZSB2YXN0XG5tYWpvcml0eSBvZiB1c2UgY2FzZXMgKGUuZy4sIGFsbCB1c2VycyBvZiB0aGUgQ29zbW9zLVNESyBhcyB3ZWxsIGFzXG5hbnlvbmUgd2hvIHJ1bnMgdGVuZGVybWludCBhbmQgdGhlIEFCQ0kgYXBwbGljYXRpb24gaW4gc2VwYXJhdGVcbnByb2Nlc3NlcykuIEluIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uLCBhbmQgZXZlbiBwcmV2aW91cyB2ZXJzaW9ucyxcbm1vZGlmeWluZyBub2RlIGluaXRpYWxpemF0aW9uIG9yIGluamVjdGluZyBjdXN0b20gY29tcG9uZW50cyByZXF1aXJlZFxuY29weWluZyBtb3N0IG9mIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5vZGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcGFja2FnZSwgd2hpY2ggcmVxdWlyZWQgc3VjaCB1c2Vyc1xudG8gbWFpbnRhaW4gYSB2ZW5kb3JlZCBjb3B5IG9mIHRlbmRlcm1pbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoaWxlIHRoaXMgaXMgKGxpa2VseSkgbm90IHRlbmFibGUgaW4gdGhlIGxvbmcgdGVybSwgYXMgdXNlcnMgZG8gd2FudFxubW9yZSBtb2R1bGFyaXR5LCBhbmQgdGhlIGN1cnJlbnQgc2VydmljZSBpbXBsZW1lbnRhdGlvbiBpcyBicml0dGxlIGFuZFxuZGlmZmljdWx0IHRvIG1haW50YWluLCBpbiB0aGUgc2hvcnQgdGVybSBpdCBtYXkgYmUgcG9zc2libGUgdG8gZGVsYXlcbmltcGxlbWVudGF0aW9uIHNvbWV3aGF0LiBFdmVudHVhbGx5LCBob3dldmVyLCB3ZSB3aWxsIG5lZWQgdG8gbWFrZSB0aGVcbiIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSIpXSksCiAgICAgICAgX3ZtLl92KCIgcGFja2FnZSBlYXNpZXIgdG8gbWFpbnRhaW4gYW5kIHJlYXNvbiBhYm91dC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZ2VuZXJpYy1zZXJ2aWNlLXBsdWdnYWJpbGl0eSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZ2VuZXJpYy1zZXJ2aWNlLXBsdWdnYWJpbGl0eSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHZW5lcmljIFNlcnZpY2UgUGx1Z2dhYmlsaXR5IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uZSBwb3NzaWJsZSBzeXN0ZW0gZGVzaWduIHdvdWxkIGV4cG9ydCBpbnRlcmZhY2VzIChpbiB0aGUgR29sYW5nXG5zZW5zZSkgZm9yIGFsbCBjb21wb25lbnRzIG9mIHRoZSBzeXN0ZW0sIHRvIHBlcm1pdCBydW50aW1lIGRlcGVuZGVuY3lcbmluamVjdGlvbiBvZiBhbGwgY29tcG9uZW50cyBpbiB0aGUgc3lzdGVtLCBzbyB0aGF0IHVzZXJzIGNhbiBjb21wb3NlXG50ZW5kZXJtaW50IG5vZGVzIG9mIGFyYml0cmFyeSB1c2VyLXN1cHBsaWVkIGNvbXBvbmVudHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFsdGhvdWdoIHRoaXMgbGV2ZWwgb2YgY3VzdG9taXphdGlvbiB3b3VsZCBwcm92aWRlIGJlbmVmaXRzLCBpdCB3b3VsZCBiZSBhIGh1Z2VcbnVuZGVydGFraW5nIChwYXJ0aWN1bGFybHkgd2l0aCByZWdhcmRzIHRvIEFQSSBkZXNpZ24gd29yaykgdGhhdCB3ZSBkbyBub3QgaGF2ZVxuc2NvcGUgZm9yIGF0IHRoZSBtb21lbnQuICBFdmVudHVhbGx5IHByb3ZpZGluZyBzdXBwb3J0IGZvciBzb21lIGtpbmRzIG9mXG5wbHVnZ2FiaWxpdHkgbWF5IGJlIHVzZWZ1bCwgc28gdGhlIGN1cnJlbnQgc29sdXRpb24gZG9lcyBub3QgZXhwbGljaXRseVxuZm9yZWNsb3NlIHRoZSBwb3NzaWJpbGl0eSBvZiB0aGlzIGFsdGVybmF0aXZlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImFic3RyYWN0LWRlcGVuZGVuY3ktYmFzZWQtc3RhcnR1cC1hbmQtc2h1dGRvd24iIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNhYnN0cmFjdC1kZXBlbmRlbmN5LWJhc2VkLXN0YXJ0dXAtYW5kLXNodXRkb3duIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgQWJzdHJhY3QgRGVwZW5kZW5jeSBCYXNlZCBTdGFydHVwIGFuZCBTaHV0ZG93biIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbWFpbiBwcm9wb3NhbCBpbiB0aGlzIGRvY3VtZW50IG1ha2VzIHRlbmRlcm1pbnQgbm9kZSBpbml0aWFsaXphdGlvbiBzaW1wbGVyXG5hbmQgbW9yZSBhYnN0cmFjdCwgYnV0IHRoZSBzeXN0ZW0gbGFja3MgYSBudW1iZXIgb2ZcbmZlYXR1cmVzIHdoaWNoIGRhZW1vbi9zZXJ2aWNlIGluaXRpYWxpemF0aW9uIGNvdWxkIHByb3ZpZGUsIHN1Y2ggYXMgYVxuc3lzdGVtIGFsbG93aW5nIHRoZSBhdXRob3JzIG9mIHNlcnZpY2VzIHRvIGNvbnRyb2wgaW5pdGlhbGl6YXRpb24gYW5kIHNodXRkb3duIG9yZGVyXG5vZiBjb21wb25lbnRzIHVzaW5nIGRlcGVuZGVuY3kgcmVsYXRpb25zaGlwcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU3VjaCBhIHN5c3RlbSBjb3VsZCB3b3JrIGJ5IGFsbG93aW5nIHNlcnZpY2VzIHRvIGRlY2xhcmVcbmluaXRpYWxpemF0aW9uIG9yZGVyIGRlcGVuZGVuY2llcyB0byBvdGhlciByZWFjdG9ycyAoYnkgSUQsIHBlcmhhcHMpXG5zbyB0aGF0IHRoZSBub2RlIGNvdWxkIGRlY2lkZSB0aGUgaW5pdGlhbGl6YXRpb24gYmFzZWQgb24gdGhlXG5kZXBlbmRlbmNpZXMgZGVjbGFyZWQgYnkgc2VydmljZXMgcmF0aGVyIHRoYW4gcmVxdWlyaW5nIHRoZSBub2RlIHRvXG5lbmNvZGUgdGhpcyBsb2dpYyBkaXJlY3RseS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBsZXZlbCBvZiBjb25maWd1cmF0aW9uIGlzIHByb2JhYmx5IG1vcmUgY29tcGxpY2F0ZWQgdGhhbiBpcyBuZWVkZWQuICBHaXZlblxudGhhdCB0aGUgYXV0aG9ycyBvZiBjb21wb25lbnRzIGluIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRlbmRlcm1pbnRcbmFscmVhZHkgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgbmVlZCB0byBrbm93IGFib3V0IG90aGVyIGNvbXBvbmVudHMsIGEgZGVwZW5kZW5jeS1iYXNlZCBzeXN0ZW1cbndvdWxkIHByb2JhYmx5IGJlIG92ZXJseS1hYnN0cmFjdCBhdCB0aGlzIHN0YWdlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZWNpc2lvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RlY2lzaW9ucyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGVjaXNpb25zIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRvIHRoZSBncmVhdGVzdCBleHRlbnQgcG9zc2libGUsIGZhY3RvciB0aGUgY29kZSBiYXNlIHNvIHRoYXRcbnBhY2thZ2VzIGFyZSByZXNwb25zaWJsZSBmb3IgdGhlaXIgb3duIGluaXRpYWxpemF0aW9uLCBhbmQgbWluaW1pemVcbnRoZSBhbW91bnQgb2YgY29kZSBpbiB0aGUgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5vZGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBwYWNrYWdlIGl0c2VsZi4iKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkFzIGEgZGVzaWduIGdvYWwsIHJlZHVjZSBkaXJlY3QgY291cGxpbmcgYW5kIGRlcGVuZGVuY2llcyBiZXR3ZWVuXG5jb21wb25lbnRzIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQmVnaW4gaXRlcmF0aW5nIG9uIGEgbW9yZS1mbGV4aWJsZSBpbnRlcm5hbCBmcmFtZXdvcmsgZm9yXG5pbml0aWFsaXppbmcgdGVuZGVybWludCBub2RlcyB0byBtYWtlIHRoZSBpbml0YXRpbGl6YXRpb24gcHJvY2Vzc1xubGVzcyBoYXJkLWNvZGVkIGJ5IHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgbm9kZSBvYmplY3RzLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUmVhY3RvcnMgc2hvdWxkIG5vdCBuZWVkIHRvIGV4cG9zZSB0aGVpciBpbnRlcmZhY2VzICIpLAogICAgICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigid2l0aGluIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIHRoZVxuaW1wbGVtZW50YXRpb24gb2YgdGhlIG5vZGUgdHlwZSIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVGhpcyByZWZhY3RvcmluZyBzaG91bGQgYmUgZW50aXJlbHkgb3BhcXVlIHRvIHVzZXJzLiIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlRoZXNlIG5vZGUgaW5pdGlhbGl6YXRpb24gY2hhbmdlcyBzaG91bGQgbm90IHJlcXVpcmUgYVxucmVldmFsdWF0aW9uIG9mIHRoZSAiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZXJ2aWNlLlNlcnZpY2UiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIG9yIGEgZ2VuZXJpYyBpbml0aWFsaXphdGlvblxub3JjaGVzdHJhdGlvbiBmcmFtZXdvcmsuIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEbyBub3QgcHJvYWN0aXZlbHkgcHJvdmlkZSBhIHN5c3RlbSBmb3IgaW5qZWN0aW5nXG5jb21wb25lbnRzL3NlcnZpY2VzIHdpdGhpbiBhIHRlbmR0ZXJtaW50IG5vZGUsIHRob3VnaCBtYWtlIGl0XG5wb3NzaWJsZSB0byByZXRyb2ZpdCB0aGlzIGtpbmQgb2YgcGx1Z2FiaWxpdHkgaW4gdGhlIGZ1dHVyZSBpZlxubmVlZGVkLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlByaW9yaXRpemUgaW1wbGVtZW50YXRpb24gb2YgcDJwLWJhc2VkIHN0YXRlc3luYyByZWFjdG9yIHRvIG9idmlhdGVcbm5lZWQgZm9yIHVzZXJzIHRvIGluamVjdCBhIGN1c3RvbSBzdGF0ZS1zeW5jIHByb3ZpZGVyLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZXRhaWxlZC1kZXNpZ24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RldGFpbGVkLWRlc2lnbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGV0YWlsZWQgRGVzaWduIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL25vZGUvbm9kZS5nbyNMNDciLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiY3VycmVudFxubm9kZUltcGwiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbmluY2x1ZGVzIGRpcmVjdCByZWZlcmVuY2VzIHRvIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgZWFjaCBvZiB0aGVcbnJlYWN0b3JzLCB3aGljaCBzaG91bGQgYmUgcmVwbGFjZWQgYnkgcmVmZXJlbmNlcyB0byAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlcnZpY2UuU2VydmljZSIpXSksCiAgICAgICAgX3ZtLl92KCJcbm9iamVjdHMuIFRoaXMgd2lsbCByZXF1aXJlIG1vdmluZyBjb25zdHJ1Y3Rpb24gb2YgdGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9ub2RlL25vZGUuZ28jTDc3MSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJycGNcbnNlcnZpY2UiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiXG5pbnRvIHRoZSBjb25zdHJ1Y3RvciBvZlxuIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL25vZGUvbm9kZS5nbyNMMTI2IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIm1ha2VOb2RlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBPbmVcbnBvc3NpYmxlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgd291bGQgYmUgdG8gZWxpbWluYXRlIHRoZSBjdXJyZW50XG4iCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNvbmZpZ3VyZVJQQyIpXSksCiAgICAgICAgX3ZtLl92KCIgbWV0aG9kIG9uIHRoZSBub2RlIHBhY2thZ2UgYW5kIGluc3RlYWQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvcHVsbC82Nzk4L2ZpbGVzI2RpZmYtMzc1ZDU3ZTM4NmYyMGVhYTVmMDlmMDJiYjlkMjhiZmM0OGFjM2RjYTE4ZDAzMjVmNTk0OTIyMDgyMTllNTYxOFI0NDEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiY29uZmlndXJlIGl0XG5oZXJlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRvIGF2b2lkIGFkZGluZyBjb21wbGV4aXR5IHRvIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5vZGUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcGFja2FnZSwgd2Ugd2lsbCBhZGQgYVxuY29tcG9zaXRlIHNlcnZpY2UgaW1wbGVtZW50YXRpb24gdG8gdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VydmljZSIpXSksCiAgICAgICAgX3ZtLl92KCIgcGFja2FnZVxudGhhdCBpbXBsZW1lbnRzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VydmljZS5TZXJ2aWNlIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgaXMgY29tcG9zZWQgb2YgYSBzZXF1ZW5jZSBvZlxudW5kZXJseWluZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlcnZpY2UuU2VydmljZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvYmplY3RzIGFuZCBoYW5kbGVzIHRoZWlyXG5zdGFydHVwL3NodXRkb3duIGluIHRoZSBzcGVjaWZpZWQgc2VxdWVudGlhbCBvcmRlci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkNvbnNlbnN1cywgYmxvY2tzeW5jICgiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJuw6llIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZhc3Qgc3luYyksIGFuZCBzdGF0ZXN5bmMgYWxsIGRlcGVuZCBvblxuZWFjaCBvdGhlciwgYW5kIGhhdmUgc2lnbmlmaWNhbnQgaW5pdGlhbGl6YXRpb24gZGVwZW5kZW5jaWVzIHRoYXQgYXJlXG5wcmVzZW50bHkgZW5jb2RlZCBpbiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJub2RlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBhY2thZ2UuIEFzIHBhcnQgb2YgdGhpcyBjaGFuZ2UsIGFcbm5ldyBwYWNrYWdlL2NvbXBvbmVudCAobGlrZWx5IG5hbWVkICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYmxvY2tzIildKSwKICAgICAgICBfdm0uX3YoIiBsb2NhdGVkIGF0XG4iKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImludGVybmFsL2Jsb2NrcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikgd2lsbCBlbmNhcHN1bGF0ZSB0aGUgaW5pdGlhbGl6YXRpb24gb2YgdGhlc2UgYmxvY2tcbm1hbmFnZW1lbnQgYXJlYXMgb2YgdGhlIGNvZGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImluamVjdGFibGUtY29tcG9uZW50LW9wdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaW5qZWN0YWJsZS1jb21wb25lbnQtb3B0aW9uIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEluamVjdGFibGUgQ29tcG9uZW50IE9wdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIHNlY3Rpb24gYnJpZWZseSBkZXNjcmliZXMgYSBwb3NzaWJsZSBpbXBsZW1lbnRhdGlvbiBmb3JcbnVzZXItc3VwcGxpZWQgc2VydmljZXMgcnVubmluZyB3aXRoaW4gYSBub2RlLiBUaGlzIHNob3VsZCBub3QgYmVcbmltcGxlbWVudGVkIHVubGVzcyB1c2VyLXN1cHBsaWVkIGNvbXBvbmVudHMgYXJlIGEgaGFyZCByZXF1aXJlbWVudCBmb3JcbmEgdXNlci4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gb3JkZXIgdG8gYWxsb3cgY29tcG9uZW50cyB0byBiZSByZXBsYWNlZCwgYSBuZXcgcHVibGljIGZ1bmN0aW9uXG53aWxsIGJlIGFkZGVkIHRvIHRoZSBwdWJsaWMgaW50ZXJmYWNlIG9mICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm9kZSIpXSksCiAgICAgICAgX3ZtLl92KCIgd2l0aCBhIHNpZ25hdHVyZSB0aGF0XG5yZXNlbWJsZXMgdGhlIGZvbGxvd2luZzoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiWm5WdVl5Qk9aWGRYYVhSb1UyVnlkbWxqWlhNb1kyOXVaaUFxWTI5dVptbG5Ma052Ym1acFp5d0tDV3h2WjJkbGNpQnNiMmN1VEc5bloyVnlMQW9KWTJZZ2NISnZlSGt1UTJ4cFpXNTBRM0psWVhSdmNpd0tDV2RsYmlBcWRIbHdaWE11UjJWdVpYTnBjMFJ2WXl3S0NYTnlkbk1nVzExelpYSjJhV05sTGxObGNuWnBZMlVzQ2lrZ0tITmxjblpwWTJVdVUyVnlkbWxqWlN3Z1pYSnliM0lwSUhzSyIsCiAgICAgICAgfSwKICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlcnZpY2UuU2VydmljZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvYmplY3RzIHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIG9yZGVyIHN1cHBsaWVkLCBhZnRlclxuYWxsIHByZS1jb25maWd1cmVkL2RlZmF1bHQgc2VydmljZXMgaGF2ZSBzdGFydGVkIChhbmQgc2h1dCBkb3duIGluIHJldmVyc2Vcbm9yZGVyKS4gIFRoZSBnaXZlbiBzZXJ2aWNlcyBtYXkgaW1wbGVtZW50IGFkZGl0aW9uYWwgaW50ZXJmYWNlcywgYWxsb3dpbmcgdGhlbVxudG8gcmVwbGFjZSBzcGVjaWZpYyBkZWZhdWx0IHNlcnZpY2VzLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5ld1dpdGhTZXJ2aWNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgd2lsbCB2YWxpZGF0ZSBpbnB1dFxuc2VydmljZSBsaXN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgcnVsZXM6IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5vbmUgb2YgdGhlIHNlcnZpY2VzIG1heSBhbHJlYWR5IGJlIHJ1bm5pbmcuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgY2FsbGVyIG1heSBub3Qgc3VwcGx5IG1vcmUgdGhhbiBvbmUgcmVwbGFjZW1lbnQgcmVhY3RvciBmb3IgYSBnaXZlblxuZGVmYXVsdCBzZXJ2aWNlIHR5cGUuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIklmIGNhbGxlcnMgdmlvbGF0ZSBhbnkgb2YgdGhlc2UgcnVsZXMsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTmV3V2l0aFNlcnZpY2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdpbGwgcmV0dXJuXG5hbiBlcnJvci4gVG8gcmV0cmFjdCBzdXBwb3J0IGZvciB0aGlzIGtpbmQgb2Ygb3BlcmF0aW9uIGluIHRoZSBmdXR1cmUsXG50aGUgZnVuY3Rpb24gY2FuIGJlIG1vZGlmaWVkIHRvICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImFsd2F5cyIpXSksCiAgICAgICAgX3ZtLl92KCIgcmV0dXJuIGFuIGVycm9yLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zZXF1ZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnNlcXVlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc2VxdWVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvc2l0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwb3NpdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zaXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJUaGUgbm9kZSBwYWNrYWdlIHdpbGwgYmVjb21lIGVhc2llciB0byBtYWludGFpbi4iKV0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkl0IHdpbGwgYmVjb21lIGVhc2llciB0byBhZGQgYWRkaXRpb25hbCBzZXJ2aWNlcyB3aXRoaW4gdGVuZGVybWludFxubm9kZXMuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSXQgd2lsbCBiZWNvbWUgcG9zc2libGUgdG8gcmVwbGFjZSBkZWZhdWx0IGNvbXBvbmVudHMgaW4gdGhlIG5vZGVcbnBhY2thZ2Ugd2l0aG91dCB2ZW5kb3JpbmcgdGhlIHRlbmRlcm1pbnQgcmVwbyBhbmQgbW9kaWZ5aW5nIGludGVybmFsXG5jb2RlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBjdXJyZW50IGVuZC10by1lbmQgKGUyZSkgdGVzdCBzdWl0ZSB3aWxsIGJlIGFibGUgdG8gcHJldmVudCBhbnlcbnJlZ3Jlc3Npb25zLCBhbmQgdGhlIG5ldyBmdW5jdGlvbmFsaXR5IGNhbiBiZSB0aG9yb3VnaGx5IHVuaXQgdGVzdGVkLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlRoZSBzY29wZSBvZiB0aGlzIHByb2plY3QgaXMgdmVyeSBuYXJyb3csIHdoaWNoIG1pbmltaXplcyByaXNrLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZWdhdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmVnYXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5lZ2F0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIlRoaXMgaW5jcmVhc2VzIG91ciByZWxpYW5jZSBvbiB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VydmljZS5TZXJ2aWNlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgaW50ZXJmYWNlIHdoaWNoXG5pcyBwcm9iYWJseSBub3QgYW4gaW50ZXJmYWNlIHRoYXQgd2Ugd2FudCB0byBmdWxseSBjb21taXQgdG8uIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhpcyBwcm9wb3NhbCBpbXBsZW1lbnRzIGEgZmFpcmx5IG1pbmltYWwgc2V0IG9mIGZ1bmN0aW9uYWxpdHkgYW5kXG5sZWF2ZXMgb3BlbiB0aGUgcG9zc2liaWxpdHkgZm9yIG1hbnkgYWRkaXRpb25hbCBmZWF0dXJlcyB3aGljaCBhcmVcbm5vdCBpbmNsdWRlZCBpbiB0aGUgc2NvcGUgb2YgdGhpcyBwcm9wb3NhbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmV1dHJhbCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmV1dHJhbCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBOZXV0cmFsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJOL0EiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm9wZW4tcXVlc3Rpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNvcGVuLXF1ZXN0aW9ucyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgT3BlbiBRdWVzdGlvbnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVG8gd2hhdCBleHRlbnQgZG9lcyB0aGlzIG5ldyBpbml0aWFsaXphdGlvbiBmcmFtZXdvcmsgbmVlZCB0byBhY2NvbW1vZGF0ZVxudGhlIGxlZ2FjeSBwMnAgc3RhY2s/IFdvdWxkIGl0IGJlIHBvc3NpYmxlIHRvIGRlbGF5IGEgZ3JlYXQgZGVhbCBvZiB0aGlzXG53b3JrIHRvIHRoZSAwLjM2IGN5Y2xlIHRvIGF2b2lkIHRoaXMgY29tcGxleGl0eT8iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBbnN3ZXI6ICIpLAogICAgICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImRlcGVuZHMgb24gdGltaW5nIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiLCBhbmQgdGhlIHJlcXVpcmVtZW50IHRvIHNoaXAgcGx1Z2dhYmxlIHJlYWN0b3JzIGluIDAuMzUuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV2hlcmUgc2hvdWxkIGFkZGl0aW9uYWwgcHVibGljIHR5cGVzIGJlIGV4cG9ydGVkIGZvciB0aGUgMC4zNVxucmVsZWFzZT8iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiUmVsYXRlZCB0byB0aGUgZ2VuZXJhbCBwcm9qZWN0IG9mIEFQSSBzdGFiaWxpemF0aW9uIHdlIHdhbnQgdG8gZGVwcmVjYXRlXG50aGUgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInR5cGVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgcGFja2FnZSwgYW5kIG1vdmUgaXRzIGNvbnRlbnRzIGludG8gYSBuZXcgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGtnIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgaGllcmFyY2h5O1xuaG93ZXZlciwgdGhlIGRlc2lnbiBvZiB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicGtnIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgaW50ZXJmYWNlIGlzIGN1cnJlbnRseSB1bmRlcnNwZWNpZmllZC5cbklmICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInR5cGVzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgaXMgZ29pbmcgdG8gcmVtYWluIGZvciB0aGUgMC4zNSByZWxlYXNlLCB0aGVuIHdlIHNob3VsZCBjb25zaWRlclxudGhlIGltcGFjdCBvZiB1c2luZyBtdWx0aXBsZSBvcmdhbml6aW5nIG1vZGFsaXRpZXMgZm9yIHRoaXMgY29kZSB3aXRoaW4gYVxuc2luZ2xlIHJlbGVhc2UuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZ1dHVyZS13b3JrIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmdXR1cmUtd29yayIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnV0dXJlIFdvcmsiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiSW1wcm92ZSBvciBzaW1wbGlmeSB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VydmljZS5TZXJ2aWNlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgaW50ZXJmYWNlLiBUaGVyZSBhcmUgc29tZVxucHJldHR5IGNsZWFyIGxpbWl0YXRpb25zIHdpdGggdGhpcyBpbnRlcmZhY2UgYXMgd3JpdHRlbiAodGhlcmUncyBub1xud2F5IHRvIHRpbWVvdXQgc2xvdyBzdGFydHVwIG9yIHNodXQgZG93biwgdGhlIGN5Y2xlIGJldHdlZW4gdGhlXG4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VydmljZS5CYXNlU2VydmljZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZXJ2aWNlLlNlcnZpY2UiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBpbXBsZW1lbnRhdGlvbnMgaXNcbnRyb3VibGluZywgdGhlIGRlZmF1bHQgcGFuaWMgaW4gIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiT25SZXNldCIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHNlZW1zIHRyb3VibGluZy4pIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJBcyBwYXJ0IG9mIHRoZSByZWZhY3RvciBvZiAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZXJ2aWNlLlNlcnZpY2UiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBoYXZlIGFsbCBzZXJ2aWNlcy9ub2Rlc1xucmVzcGVjdCB0aGUgbGlmZXRpbWUgb2YgYSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb250ZXh0LkNvbnRleHQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBvYmplY3QsIGFuZCBhdm9pZCB0aGVcbmN1cnJlbnQgcHJhY3RpY2Ugb2YgY3JlYXRpbmcgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29udGV4dC5Db250ZXh0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgb2JqZWN0cyBpbiBwMnAgYW5kXG5yZWFjdG9yIGNvZGUuIFRoaXMgd291bGQgYmUgcmVxdWlyZWQgZm9yIGluLXByb2Nlc3MgbXVsdGktdGVuYW5jeS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJTdXBwb3J0IGV4cGxpY2l0IGRlcGVuZGVuY2llcyBiZXR3ZWVuIGNvbXBvbmVudHMgYW5kIGFsbG93IGZvclxucGFyYWxsZWwgc3RhcnR1cCwgc28gdGhhdCBkaWZmZXJlbnQgcmVhY3RvcnMgY2FuIHN0YXJ0dXAgYXQgdGhlIHNhbWVcbnRpbWUsIHdoZXJlIHBvc3NpYmxlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZWZlcmVuY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNyZWZlcmVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZWZlcmVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vcGV0ZXIuYm91cmdvbi5vcmcvZ28tZm9yLWluZHVzdHJpYWwtcHJvZ3JhbW1pbmcvI3RoZS1jb21wb25lbnQtZ3JhcGgiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInRoZSBjb21wb25lbnRcbmdyYXBoIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIlxuYXMgYSBmcmFtaW5nIGZvciBpbnRlcm5hbCBzZXJ2aWNlIGNvbnN0cnVjdGlvbi4iKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYXBwZW5kaXgiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FwcGVuZGl4IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBcHBlbmRpeCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkZXBlbmRlbmNpZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RlcGVuZGVuY2llcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGVwZW5kZW5jaWVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlJ3MgYSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgYmxvY2tjaGFpbiBhbmQgY29uc2Vuc3VzIHJlYWN0b3JcbmRlc2NyaWJlZCBieSB0aGUgZm9sbG93aW5nIGRlcGVuZGVuY3kgZ3JhcGggbWFrZXMgcmVwbGFjaW5nIHNvbWUgb2ZcbnRoZXNlIGNvbXBvbmVudHMgbW9yZSBkaWZmaWN1bHQgcmVsYXRpdmUgdG8gb3RoZXIgcmVhY3RvcnMgb3JcbmNvbXBvbmVudHMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvY29uc2Vuc3VzX2Jsb2NrY2hhaW4ucG5nIiksCiAgICAgICAgICAgIGFsdDogImNvbnNlbnN1cyBibG9ja2NoYWluIGRlcGVuZGVuY3kgZ3JhcGgiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}