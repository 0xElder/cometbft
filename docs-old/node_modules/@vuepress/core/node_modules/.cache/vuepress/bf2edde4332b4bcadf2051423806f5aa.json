{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-023-semi-permanent-testnet.md?vue&type=template&id=3cb06d88&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-023-semi-permanent-testnet.md","mtime":1673295761290},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}