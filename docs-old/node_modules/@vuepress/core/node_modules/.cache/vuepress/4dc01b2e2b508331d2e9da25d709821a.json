{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-023-ABCI-propose-tx.md?vue&type=template&id=4c648dac&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-023-ABCI-propose-tx.md","mtime":1673295761172},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}