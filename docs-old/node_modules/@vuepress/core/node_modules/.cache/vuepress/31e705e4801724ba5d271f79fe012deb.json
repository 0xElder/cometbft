{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-078-nonzero-genesis.md?vue&type=template&id=858e63d6&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-078-nonzero-genesis.md","mtime":1673295761176},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA3OC1ub24temVyby1nZW5lc2lzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhZHItMDc4LW5vbi16ZXJvLWdlbmVzaXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQURSIDA3ODogTm9uLVplcm8gR2VuZXNpcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjAtMDctMjY6IEluaXRpYWwgZHJhZnQgKEBlcmlrZ3JpbmFrZXIpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIjIwMjAtMDctMjg6IFVzZSB3ZWFrIGNoYWluIGxpbmtpbmcsIGkuZS4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByZWRlY2Vzc29yIildKSwKICAgICAgICAgIF92bS5fdigiIGZpZWxkIChAZXJpa2dyaW5ha2VyKSIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIjIwMjAtMDctMzE6IERyb3AgY2hhaW4gbGlua2luZyAoQGVyaWtncmluYWtlcikiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiMjAyMC0wOC0wMzogQWRkICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTdGF0ZS5Jbml0aWFsSGVpZ2h0IildKSwKICAgICAgICAgIF92bS5fdigiIChAZXJpa2dyaW5ha2VyKSIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiMjAyMS0wMi0xMTogTWlncmF0ZSB0byB0ZW5kZXJtaW50IHJlcG8gKE9yaWdpbmFsbHkgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC9zcGVjL3B1bGwvMTE5IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJSRkMgMDAyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIikiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYXV0aG9yLXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2F1dGhvci1zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBdXRob3IocykiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiRXJpayBHcmluYWtlciAoQGVyaWtncmluYWtlcikiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGV4dCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29udGV4dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb250ZXh0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSByZWNvbW1lbmRlZCB1cGdyYWRlIHBhdGggZm9yIGJsb2NrIHByb3RvY29sLWJyZWFraW5nIHVwZ3JhZGVzIGlzIGN1cnJlbnRseSB0byBoYXJkIGZvcmsgdGhlXG5jaGFpbiAoc2VlIGUuZy4gIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYmxvZy5jb3Ntb3MubmV0d29yay9jb3Ntb3MtaHViLTMtdXBncmFkZS1hbm5vdW5jZW1lbnQtMzljOWRhOTQxYWVlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb3Ntb3NodWItMyIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHVwZ3JhZGUiKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuXG5UaGlzIGlzIGRvbmUgYnkgaGFsdGluZyBhbGwgdmFsaWRhdG9ycyBhdCBhIHByZWRldGVybWluZWQgaGVpZ2h0LCBleHBvcnRpbmcgdGhlIGFwcGxpY2F0aW9uXG5zdGF0ZSB2aWEgYXBwbGljYXRpb24tc3BlY2lmaWMgdG9vbGluZywgYW5kIGNyZWF0aW5nIGFuIGVudGlyZWx5IG5ldyBjaGFpbiB1c2luZyB0aGUgZXhwb3J0ZWRcbmFwcGxpY2F0aW9uIHN0YXRlLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcyBmYXIgYXMgVGVuZGVybWludCBpcyBjb25jZXJuZWQsIHRoZSB1cGdyYWRlZCBjaGFpbiBpcyBhIGNvbXBsZXRlbHkgc2VwYXJhdGUgY2hhaW4sIHdpdGggZS5nLlxuYSBuZXcgY2hhaW4gSUQgYW5kIGdlbmVzaXMgZmlsZS4gTm90YWJseSwgdGhlIG5ldyBjaGFpbiBzdGFydHMgYXQgaGVpZ2h0IDEsIGFuZCBoYXMgbm9uZSBvZiB0aGVcbm9sZCBjaGFpbidzIGJsb2NrIGhpc3RvcnkuIFRoaXMgY2F1c2VzIHByb2JsZW1zIGZvciBpbnRlZ3JhdG9ycywgZS5nLiBjb2luIGV4Y2hhbmdlcyBhbmRcbndhbGxldHMsIHRoYXQgYXNzdW1lIGEgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGhlaWdodCBmb3IgYSBnaXZlbiBibG9ja2NoYWluLiBVc2VycyBhbHNvIGZpbmRcbml0IGNvbmZ1c2luZyB0aGF0IGEgZ2l2ZW4gaGVpZ2h0IGNhbiBub3cgcmVmZXIgdG8gZGlzdGluY3Qgc3RhdGVzIGRlcGVuZGluZyBvbiB0aGUgY2hhaW5cbnZlcnNpb24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFuIGlkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIGFsd2F5cyByZXRhaW4gYmxvY2sgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgaW4gc3VjaCBhIHdheSB0aGF0IGNoYWluXG5oaXN0b3J5IGlzIG5ldmVyIGxvc3Qgb24gdXBncmFkZXMuIEhvd2V2ZXIsIHRoaXMgbWF5IHJlcXVpcmUgYSBzaWduaWZpY2FudCBhbW91bnQgb2YgZW5naW5lZXJpbmdcbndvcmsgdGhhdCBpcyBub3QgdmlhYmxlIGZvciB0aGUgcGxhbm5lZCBTdGFyZ2F0ZSByZWxlYXNlIChUZW5kZXJtaW50IDAuMzQpLCBhbmQgbWF5IHByb3ZlIHRvb1xucmVzdHJpY3RpdmUgZm9yIGZ1dHVyZSBkZXZlbG9wbWVudC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXMgYSBmaXJzdCBzdGVwLCBhbGxvd2luZyB0aGUgbmV3IGNoYWluIHRvIHN0YXJ0IGZyb20gYW4gaW5pdGlhbCBoZWlnaHQgc3BlY2lmaWVkIGluIHRoZSBnZW5lc2lzXG5maWxlIHdvdWxkIGF0IGxlYXN0IHByb3ZpZGUgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGhlaWdodHMuIFRoZXJlIHdhcyBhIHByb3Bvc2FsIHRvIGluY2x1ZGUgdGhlXG5sYXN0IGJsb2NrIGhlYWRlciBvZiB0aGUgcHJldmlvdXMgY2hhaW4gYXMgd2VsbCwgYnV0IHNpbmNlIHRoZSBnZW5lc2lzIGZpbGUgaXMgbm90IHZlcmlmaWVkIGFuZFxuaGFzaGVkIChvbmx5IHNwZWNpZmljIGZpZWxkcyBhcmUpIHRoaXMgd291bGQgbm90IGJlIHRydXN0d29ydGh5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFeHRlcm5hbCB0b29saW5nIHdpbGwgYmUgcmVxdWlyZWQgdG8gbWFwIGhpc3RvcmljYWwgaGVpZ2h0cyBvbnRvIGUuZy4gYXJjaGl2ZSBub2RlcyB0aGF0IGNvbnRhaW5cbmJsb2NrcyBmcm9tIHByZXZpb3VzIGNoYWluIHZlcnNpb24uIFRlbmRlcm1pbnQgd2lsbCBub3QgaW5jbHVkZSBhbnkgc3VjaCBmdW5jdGlvbmFsaXR5LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wb3NhbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcG9zYWwiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb3Bvc2FsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRlbmRlcm1pbnQgd2lsbCBhbGxvdyBjaGFpbnMgdG8gc3RhcnQgZnJvbSBhbiBhcmJpdHJhcnkgaW5pdGlhbCBoZWlnaHQ6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkEgbmV3IGZpZWxkICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImluaXRpYWxfaGVpZ2h0IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgYWRkZWQgdG8gdGhlIGdlbmVzaXMgZmlsZSwgZGVmYXVsdGluZyB0byAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIxIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIEl0IGNhbiBiZSBzZXQgdG8gYW55XG5ub24tbmVnYXRpdmUgaW50ZWdlciwgYW5kICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjAiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBpcyBjb25zaWRlcmVkIGVxdWl2YWxlbnQgdG8gIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiQSBuZXcgZmllbGQgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSW5pdGlhbEhlaWdodCIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGlzIGFkZGVkIHRvIHRoZSBBQkNJICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlcXVlc3RJbml0Q2hhaW4iKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBtZXNzYWdlLCB3aXRoIHRoZSBzYW1lIHZhbHVlXG5hbmQgc2VtYW50aWNzIGFzIHRoZSBnZW5lc2lzIGZpZWxkLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIkEgbmV3IGZpZWxkICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkluaXRpYWxIZWlnaHQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBpcyBhZGRlZCB0byB0aGUgIiksCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3RhdGUuU3RhdGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBzdHJ1Y3QsIHdoZXJlICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjAiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyBjb25zaWRlcmVkIGludmFsaWQuXG5JbmNsdWRpbmcgdGhlIGZpZWxkIGhlcmUgc2ltcGxpZmllcyBpbXBsZW1lbnRhdGlvbiwgc2luY2UgdGhlIGdlbmVzaXMgdmFsdWUgZG9lcyBub3QgaGF2ZSB0byBiZVxucHJvcGFnYXRlZCB0aHJvdWdob3V0IHRoZSBjb2RlIGJhc2Ugc2VwYXJhdGVseSwgYnV0IGl0IGlzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFCQ0kgYXBwbGljYXRpb25zIG1heSBoYXZlIHRvIGJlIHVwZGF0ZWQgdG8gaGFuZGxlIGFyYml0cmFyeSBpbml0aWFsIGhlaWdodHMsIG90aGVyd2lzZSB0aGUgaW5pdGlhbFxuYmxvY2sgbWF5IGZhaWwuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0YXR1cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0YXR1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSW1wbGVtZW50ZWQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbnNlcXVlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29uc2VxdWVuY2VzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb25zZXF1ZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicG9zaXRpdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Bvc2l0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQb3NpdGl2ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdIZWlnaHRzIGNhbiBiZSB1bmlxdWUgdGhyb3VnaG91dCB0aGUgaGlzdG9yeSBvZiBhICJsb2dpY2FsIiBjaGFpbiwgYWNyb3NzIGhhcmQgZm9yayB1cGdyYWRlcy4nCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZWdhdGl2ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmVnYXRpdmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5lZ2F0aXZlIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiVXBncmFkZXMgc3RpbGwgY2F1c2UgbG9zcyBvZiBibG9jayBoaXN0b3J5LiIpXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSW50ZWdyYXRvcnMgd2lsbCBoYXZlIHRvIG1hcCBoZWlnaHQgcmFuZ2VzIHRvIHNwZWNpZmljIGFyY2hpdmUgbm9kZXMvbmV0d29ya3MgdG8gcXVlcnkgaGlzdG9yeS4iCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmV1dHJhbCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmV1dHJhbCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBOZXV0cmFsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoZXJlIGlzIG5vIGV4cGxpY2l0IGxpbmsgdG8gdGhlIGxhc3QgYmxvY2sgb2YgdGhlIHByZXZpb3VzIGNoYWluLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZmVyZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvMjU0MyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIjMjU0MzogQWxsb3cgZ2VuZXNpcyBmaWxlIHRvIHN0YXJ0IGZyb20gbm9uLXplcm8gaGVpZ2h0IHcvIHByZXYgYmxvY2sgaGVhZGVyIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpLAogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}