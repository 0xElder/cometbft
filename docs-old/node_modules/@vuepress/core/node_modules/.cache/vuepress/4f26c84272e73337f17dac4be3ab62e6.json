{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-081-protobuf-mgmt.md?vue&type=template&id=1c40552a&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-081-protobuf-mgmt.md","mtime":1673295761177},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA4MS1wcm90b2NvbC1idWZmZXJzLW1hbmFnZW1lbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fkci0wODEtcHJvdG9jb2wtYnVmZmVycy1tYW5hZ2VtZW50IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFEUiAwODE6IFByb3RvY29sIEJ1ZmZlcnMgTWFuYWdlbWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIjIwMjItMDItMjg6IEZpcnN0IGRyYWZ0IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0YXR1cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0YXR1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQWNjZXB0ZWQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzgxMjEiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVHJhY2tpbmcgaXNzdWUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250ZXh0IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb250ZXh0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnRleHQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJBdCBwcmVzZW50LCB3ZSBtYW5hZ2UgdGhlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiUHJvdG9jb2wgQnVmZmVycyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIHNjaGVtYSBmaWxlcyAoInByb3RvcyIpIHRoYXQgZGVmaW5lXG5vdXIgd2lyZS1sZXZlbCBkYXRhIGZvcm1hdHMgd2l0aGluIHRoZSBUZW5kZXJtaW50IHJlcG9zaXRvcnkgaXRzZWxmIChzZWUgdGhlXG4nCiAgICAgICAgICApLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3Byb3RvLyIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicHJvdG8iKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBkaXJlY3RvcnkpLiBSZWNlbnRseSwgd2UgaGF2ZSBiZWVuIG1ha2luZyB1c2Ugb2YgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2J1Zi5idWlsZC8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkJ1ZiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLFxuYm90aCBsb2NhbGx5IGFuZCBpbiBDSSwgaW4gb3JkZXIgdG8gZ2VuZXJhdGUgR28gc3R1YnMsIGFuZCBsaW50IGFuZCBjaGVja1xuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnByb3RvIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGVzIGZvciBicmVha2luZyBjaGFuZ2VzLiIpLAogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgdmVyc2lvbiBvZiBCdWYgdXNlZCBhdCB0aGUgdGltZSBvZiB0aGlzIGRlY2lzaW9uIHdhcyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYxYmV0YTEiKV0pLAogICAgICAgIF92bS5fdigiLCBhbmQgaXQgd2FzXG5kaXNjdXNzZWQgaW4gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvcHVsbC83OTc1IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiM3OTc1IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBhbmQgaW4gd2Vla2x5IGNhbGxzIGFzIHRvIHdoZXRoZXIgd2Ugc2hvdWxkIHVwZ3JhZGUgdG9cbiIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidjEiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYW5kIGhhcm1vbml6ZSBvdXIgYXBwcm9hY2ggd2l0aCB0aGF0IHVzZWQgYnkgdGhlIENvc21vcyBTREsuIFRoZSB0ZWFtXG5tYW5hZ2luZyB0aGUgQ29zbW9zIFNESyB3YXMgcHJpbWFyaWx5IGludGVyZXN0ZWQgaW4gaGF2aW5nIG91ciBwcm90b3MgdmVyc2lvbmVkXG5hbmQgZWFzaWx5IGFjY2Vzc2libGUgZnJvbSB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYnVmLmJ1aWxkLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJCdWYiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHJlZ2lzdHJ5LiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHRocmVlIG1haW4gc2V0cyBvZiBzdGFrZWhvbGRlcnMgZm9yIHRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5wcm90byIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmaWxlcyBhbmQgdGhlaXIgbmVlZHMsIGFzXG5jdXJyZW50bHkgdW5kZXJzdG9vZCwgYXJlIGFzIGZvbGxvd3MuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVGVuZGVybWludCBuZWVkcyBHbyBjb2RlIGdlbmVyYXRlZCBmcm9tICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZmlsZXMuIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDb25zdW1lcnMgb2YgVGVuZGVybWludCdzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGZpbGVzLCBzcGVjaWZpY2FsbHkgcHJvamVjdHMgdGhhdCB3YW50IHRvXG5pbnRlcm9wZXJhdGUgd2l0aCBUZW5kZXJtaW50IGFuZCBuZWVkIHRvIGdlbmVyYXRlIGNvZGUgZm9yIHRoZWlyIG93blxucHJvZ3JhbW1pbmcgbGFuZ3VhZ2UsIHdhbnQgdG8gYmUgYWJsZSB0byBhY2Nlc3MgdGhlc2UgZmlsZXMgaW4gYSByZWxpYWJsZSBhbmRcbmVmZmljaWVudCB3YXkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGUgVGVuZGVybWludCBDb3JlIHRlYW0gd2FudHMgdG8gcHJvdmlkZSBzdGFibGUgaW50ZXJmYWNlcyB0aGF0IGFyZSBhcyBlYXN5XG5hcyBwb3NzaWJsZSB0byBtYWludGFpbiwgb24gd2hpY2ggY29uc3VtZXJzIGNhbiBkZXBlbmQsIGFuZCB0byBiZSBhYmxlIHRvXG5ub3RpZnkgdGhvc2UgY29uc3VtZXJzIHByb21wdGx5IHdoZW4gdGhvc2UgaW50ZXJmYWNlcyBjaGFuZ2UuIFRvIHRoaXMgZW5kLCB3ZVxud2FudCB0bzpcbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiUHJldmVudCBhbnkgYnJlYWtpbmcgY2hhbmdlcyBmcm9tIGJlaW5nIGludHJvZHVjZWQgaW4gbWlub3IvcGF0Y2ggcmVsZWFzZXNcbm9mIFRlbmRlcm1pbnQuIE9ubHkgbWFqb3IgdmVyc2lvbiB1cGRhdGVzIHNob3VsZCBiZSBhYmxlIHRvIGNvbnRhaW5cbmJyZWFraW5nIGludGVyZmFjZSBjaGFuZ2VzLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiUHJldmVudCBnZW5lcmF0ZWQgY29kZSBmcm9tIGRpdmVyZ2luZyBmcm9tIHRoZSBQcm90b2J1ZiBzY2hlbWEgZmlsZXMuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZXJlIHdhcyBhbHNvIGRpc2N1c3Npb24gc3Vycm91bmRpbmcgdGhlIG5vdGlvbiBvZiBhdXRvbWF0ZWQgZG9jdW1lbnRhdGlvblxuZ2VuZXJhdGlvbiBhbmQgaG9zdGluZywgYnV0IGl0IGlzIG5vdCBjbGVhciBhdCB0aGlzIHRpbWUgd2hldGhlciB0aGlzIHdvdWxkIGJlXG50aGF0IHZhbHVhYmxlIHRvIGFueSBvZiBvdXIgc3Rha2Vob2xkZXJzLiBXaGF0IHdpbGwsIG9mIGNvdXJzZSwgYmUgdmFsdWFibGUgYXRcbm1pbmltdW0gd291bGQgYmUgYmV0dGVyIGRvY3VtZW50YXRpb24gKGluIGNvbW1lbnRzKSBvZiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgIF92bS5fdigiIGZpbGVzXG50aGVtc2VsdmVzLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhbHRlcm5hdGl2ZS1hcHByb2FjaGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhbHRlcm5hdGl2ZS1hcHByb2FjaGVzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFsdGVybmF0aXZlIEFwcHJvYWNoZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWVldGluZy1zdGFrZWhvbGRlcnMtbmVlZHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21lZXRpbmctc3Rha2Vob2xkZXJzLW5lZWRzIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1lZXRpbmcgc3Rha2Vob2xkZXJzJyBuZWVkcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkdvIHN0dWIgZ2VuZXJhdGlvbiBmcm9tIHByb3Rvcy4gV2UgY291bGQgdXNlOlxuIiksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9idWYuYnVpbGQvIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkJ1ZiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIi4gVGhpcyBhcHByb2FjaCBoYXMgYmVlbiByYXRoZXIgY3VtYmVyc29tZSB1cCB0byB0aGlzIHBvaW50LCBhbmQgaXRcbmlzIG5vdCBjbGVhciB3aGF0IEJ1ZiByZWFsbHkgcHJvdmlkZXMgYmV5b25kIHRoYXQgd2hpY2ggIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm90b2MiKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgcHJvdmlkZXNcbnRvIGp1c3RpZnkgdGhlIGFkZGl0aW9uYWwgY29tcGxleGl0eSBpbiBjb25maWd1cmluZyBCdWYgZm9yIHN0dWJcbmdlbmVyYXRpb24uIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoInByb3RvYyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgLSB0aGUgUHJvdG9jb2wgQnVmZmVycyBjb21waWxlci4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk5vdGlmaWNhdGlvbiBvZiBicmVha2luZyBjaGFuZ2VzOlxuIiksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkJ1ZiBpbiBDSSBmb3IgYWxsIHB1bGwgcmVxdWVzdHMgdG8gIiksCiAgICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigicmVsZWFzZSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYnJhbmNoZXMgb25seSAoYW5kIG5vdCBvblxuIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJtYXN0ZXIiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKS4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkJ1ZiBpbiBDSSBvbiBldmVyeSBwdWxsIHJlcXVlc3QgdG8gZXZlcnkgYnJhbmNoICh0aGlzIHdhcyB0aGUgY2FzZSBhdCB0aGVcbnRpbWUgb2YgdGhpcyBkZWNpc2lvbiwgYW5kIHRoZSB0ZWFtIGRlY2lkZWQgdGhhdCB0aGUgc2lnbmFsLXRvLW5vaXNlIHJhdGlvXG5mb3IgdGhpcyBhcHByb2FjaCB3YXMgdG9vIGxvdyB0byBiZSBvZiB2YWx1ZSkuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgbGludGluZzpcbiIpLAogICAgICAgICAgX2MoIm9sIiwgW19jKCJsaSIsIFtfdm0uX3YoIkJ1ZiBpbiBDSSBvbiBldmVyeSBwdWxsIHJlcXVlc3QiKV0pXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZm9ybWF0dGluZzpcbiIpLAogICAgICAgICAgX2MoIm9sIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vY2xhbmcubGx2bS5vcmcvZG9jcy9DbGFuZ0Zvcm1hdC5odG1sIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoImNsYW5nLWZvcm1hdCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgbG9jYWxseSBhbmQgYSAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvY2xhbmctZm9ybWF0LWdpdGh1Yi1hY3Rpb24iLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiY2xhbmctZm9ybWF0IEdpdEh1YiBBY3Rpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgaW4gQ0kgdG8gY2hlY2tcbnRoYXQgZmlsZXMgYXJlIGZvcm1hdHRlZCBwcm9wZXJseSBvbiBldmVyeSBwdWxsIHJlcXVlc3QuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJTaGFyaW5nIG9mICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZmlsZXMgaW4gYSB2ZXJzaW9uZWQsIHJlbGlhYmxlIG1hbm5lcjpcbiIpLAogICAgICAgICAgX2MoIm9sIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkNvbnN1bWVycyBjb3VsZCBzaW1wbHkgY2xvbmUgdGhlIFRlbmRlcm1pbnQgcmVwb3NpdG9yeSwgY2hlY2sgb3V0IGFcbnNwZWNpZmljIGNvbW1pdCwgdGFnIG9yIGJyYW5jaCBhbmQgbWFudWFsbHkgY29weSBvdXQgYWxsIG9mIHRoZSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5wcm90byIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlxuZmlsZXMgdGhleSBuZWVkLiBUaGlzIHJlcXVpcmVzIG5vIGVmZm9ydCBmcm9tIHRoZSBUZW5kZXJtaW50IENvcmUgdGVhbSBhbmRcbndpbGwgY29udGludWUgdG8gYmUgYW4gb3B0aW9uIGZvciBjb25zdW1lcnMuIFRoZSBkcmF3YmFjayBvZiB0aGlzIGFwcHJvYWNoXG5pcyB0aGF0IGl0IHJlcXVpcmVzIG1hbnVhbCBjb2Rpbmcvc2NyaXB0aW5nIHRvIGltcGxlbWVudCBhbmQgaXMgYnJpdHRsZSBpblxudGhlIGZhY2Ugb2YgYmlnZ2VyIGNoYW5nZXMuIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiVXBsb2FkaW5nIG91ciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5wcm90byIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBmaWxlcyB0byBCdWYncyByZWdpc3RyeSBvbiBldmVyeSByZWxlYXNlLiBUaGlzIGlzXG5ieSBmYXIgdGhlIG1vc3Qgc2VhbWxlc3MgZm9yIGNvbnN1bWVycyBvZiBvdXIgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIucHJvdG8iKV0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgZmlsZXMsIGJ1dCByZXF1aXJlc1xudGhlIGRlcGVuZGVuY3kgb24gQnVmLiBUaGlzIGhhcyB0aGUgYWRkaXRpb25hbCBiZW5lZml0IHRoYXQgdGhlIEJ1ZlxucmVnaXN0cnkgd2lsbCBhdXRvbWF0aWNhbGx5ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RvY3MuYnVmLmJ1aWxkL2Jzci9kb2N1bWVudGF0aW9uIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJnZW5lcmF0ZSBhbmQgaG9zdFxuZG9jdW1lbnRhdGlvbiIpLAogICAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIiksCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZm9yIHRoZXNlIHByb3Rvcy4iKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldlIGNvdWxkIGNyZWF0ZSBhIHByb2Nlc3MgdGhhdCwgdXBvbiByZWxlYXNlLCBjcmVhdGVzIGEgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIuemlwIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBmaWxlXG5jb250YWluaW5nIG91ciAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi5wcm90byIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgZmlsZXMuIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvcHVsYXItYWx0ZXJuYXRpdmVzLXRvLWJ1ZiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcG9wdWxhci1hbHRlcm5hdGl2ZXMtdG8tYnVmIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFBvcHVsYXIgYWx0ZXJuYXRpdmVzIHRvIEJ1ZiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdWJlci9wcm90b3Rvb2wiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUHJvdG90b29sIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdhcyBub3QgY29uc2lkZXJlZCBhcyBpdCBhcHBlYXJzIGRlcHJlY2F0ZWQsIGFuZCB0aGUgZWNvc3lzdGVtIHNlZW1zXG50byBiZSBjb252ZXJnaW5nIG9uIEJ1ZiBhdCB0aGlzIHRpbWUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInRvb2xpbmctY29tcGxleGl0eSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdG9vbGluZy1jb21wbGV4aXR5IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRvb2xpbmcgY29tcGxleGl0eSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbW9yZSB0b29scyB3ZSBoYXZlIGluIG91ciBidWlsZC9DSSBwcm9jZXNzZXMsIHRoZSBtb3JlIGNvbXBsZXggYW5kIGZyYWdpbGVcbnJlcG9zaXRvcnkvQ0kgbWFuYWdlbWVudCBiZWNvbWVzLCBhbmQgdGhlIGxvbmdlciBpdCB0YWtlcyB0byBvbmJvYXJkIG5ldyB0ZWFtXG5tZW1iZXJzLiBNYWludGFpbmFiaWxpdHkgaXMgYSBjb3JlIGNvbmNlcm4gaGVyZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYnVmLXN1c3RhaW5hYmlsaXR5LWFuZC1jb3N0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYnVmLXN1c3RhaW5hYmlsaXR5LWFuZC1jb3N0cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCdWYgc3VzdGFpbmFiaWxpdHkgYW5kIGNvc3RzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uZSBvZiB0aGUgcHJpbWFyeSBjb25zaWRlcmF0aW9ucyByZWdhcmRpbmcgdGhlIHVzYWdlIG9mIEJ1ZiBpcyB3aGV0aGVyLCBmb3JcbmV4YW1wbGUsIGFjY2VzcyB0byBpdHMgcmVnaXN0cnkgd2lsbCBldmVudHVhbGx5IGJlY29tZSBhXG5wYWlkLWZvci9zdWJzY3JpcHRpb24tYmFzZWQgc2VydmljZSBhbmQgd2hldGhlciB0aGlzIGlzIHZhbHVhYmxlIGVub3VnaCBmb3IgdXNcbmFuZCB0aGUgZWNvc3lzdGVtIHRvIHBheSBmb3Igc3VjaCBhIHNlcnZpY2UuIEF0IHRoaXMgdGltZSwgaXQgYXBwZWFycyBhcyB0aG91Z2hcbkJ1ZiB3aWxsIG5ldmVyIGNoYXJnZSBmb3IgaG9zdGluZyBvcGVuIHNvdXJjZSBwcm9qZWN0cycgcHJvdG9zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbm90aGVyIGNvbnNpZGVyYXRpb24gd2FzIEJ1ZidzIHN1c3RhaW5hYmlsaXR5IGFzIGEgcHJvamVjdCAtIHdoYXQgaGFwcGVucyB3aGVuXG50aGVpciByZXNvdXJjZXMgcnVuIG91dD8gV2lsbCB0aGVyZSBiZSBhIHN0cm9uZyBhbmQgYnJvYWQgZW5vdWdoIG9wZW4gc291cmNlXG5jb21tdW5pdHkgdG8gY29udGludWUgbWFpbnRhaW5pbmcgaXQ/IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImxvY2FsLWJ1Zi11c2FnZS1vcHRpb25zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsb2NhbC1idWYtdXNhZ2Utb3B0aW9ucyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMb2NhbCBCdWYgdXNhZ2Ugb3B0aW9ucyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMb2NhbCB1c2FnZSBvZiBCdWYgKGkuZS4gbm90IGluIENJKSBjYW4gYmUgYWNjb21wbGlzaGVkIGluIHR3byB3YXlzOiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJJbnN0YWxsaW5nIHRoZSByZWxldmFudCB0b29scyBpbmRpdmlkdWFsbHkuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkJ5IHdheSBvZiBpdHMgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2h1Yi5kb2NrZXIuY29tL3IvYnVmYnVpbGQvYnVmIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJEb2NrZXIgaW1hZ2UiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMb2NhbCBpbnN0YWxsYXRpb24gb2YgQnVmIHJlcXVpcmVzIGRldmVsb3BlcnMgdG8gbWFudWFsbHkga2VlcCB0aGVpciB0b29sY2hhaW5zXG51cC10by1kYXRlLiBUaGUgRG9ja2VyIG9wdGlvbiBjb21lcyB3aXRoIGEgbnVtYmVyIG9mIGNvbXBsZXhpdGllcywgaW5jbHVkaW5nXG5ob3cgdGhlIGZpbGUgc3lzdGVtIHBlcm1pc3Npb25zIG9mIGNvZGUgZ2VuZXJhdGVkIGJ5IGEgRG9ja2VyIGNvbnRhaW5lciBkaWZmZXJcbmJldHdlZW4gcGxhdGZvcm1zIChlLmcuIG9uIExpbnV4LCBCdWYtZ2VuZXJhdGVkIGNvZGUgZW5kcyB1cCBiZWluZyBvd25lZCBieVxuIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyb290IildKSwKICAgICAgICBfdm0uX3YoIikuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSB0cm91YmxlIHdpdGggdGhlIERvY2tlci1iYXNlZCBhcHByb2FjaCBpcyB0aGF0IHdlIG1ha2UgdXNlIG9mIHRoZVxuIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvZ29nb3Byb3RvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImdvZ29wcm90b2J1ZiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgcGx1Z2luIGZvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInByb3RvYyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gQ29udGludWluZyB0byB1c2UgdGhlIERvY2tlci1iYXNlZCBhcHByb2FjaFxudG8gdXNpbmcgQnVmIHdpbGwgbWVhbiB0aGF0IHdlIHdpbGwgaGF2ZSB0byBjb250aW51ZSBidWlsZGluZyBvdXIgb3duIGN1c3RvbVxuRG9ja2VyIGltYWdlIHdpdGggZW1iZWRkZWQgZ29nb3Byb3RvYnVmLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbG9uZyB0aGVzZSBsaW5lcywgd2UgY291bGQgZXZlbnR1YWxseSBjb25zaWRlciBjb21pbmcgdXAgd2l0aCBhICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL25peG9zLm9yZy8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTml4IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi0gb3JcbiIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3JlZG8ucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJyZWRvIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLWJhc2VkIGFwcHJvYWNoIHRvIGRldmVsb3BlciB0b29saW5nIHRvIGVuc3VyZSB0b29saW5nIGNvbnNpc3RlbmN5IGFjcm9zc1xudGhlIHRlYW0gYW5kIGZvciBhbnlvbmUgd2hvIHdhbnRzIHRvIGJlIGFibGUgdG8gY29udHJpYnV0ZSB0byBUZW5kZXJtaW50LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJkZWNpc2lvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGVjaXNpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlY2lzaW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIldlIHdpbGwgYWRvcHQgQnVmIGZvciBub3cgZm9yIHByb3RvIGdlbmVyYXRpb24sIGxpbnRpbmcsIGJyZWFrYWdlIGNoZWNraW5nXG5hbmQgaXRzIHJlZ2lzdHJ5IChtYWlubHkgaW4gQ0ksIHdpdGggb3B0aW9uYWwgdXNhZ2UgbG9jYWxseSkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZhaWxpbmcgQ0kgd2hlbiBjaGVja2luZyBmb3IgYnJlYWtpbmcgY2hhbmdlcyBpbiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnByb3RvIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmaWxlcyB3aWxsIG9ubHlcbmhhcHBlbiB3aGVuIHBlcmZvcm1pbmcgbWlub3IvcGF0Y2ggcmVsZWFzZXMuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkxvY2FsIHRvb2xpbmcgd2lsbCBiZSBmYXZvcmVkIG92ZXIgRG9ja2VyLWJhc2VkIHRvb2xpbmcuIiksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRldGFpbGVkLWRlc2lnbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZGV0YWlsZWQtZGVzaWduIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEZXRhaWxlZCBEZXNpZ24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIldlIGN1cnJlbnRseSBhaW0gdG86IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlVwZGF0ZSB0byBCdWYgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYxIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0byBmYWNpbGl0YXRlIGxpbnRpbmcsIGJyZWFrYWdlIGNoZWNraW5nIGFuZCB1cGxvYWRpbmcgdG9cbnRoZSBCdWYgcmVnaXN0cnkuIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkNvbmZpZ3VyZSBDSSBhcHByb3ByaWF0ZWx5IGZvciBwcm90byBtYW5hZ2VtZW50OlxuIiksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVXBsb2FkaW5nIHByb3RvcyB0byB0aGUgQnVmIHJlZ2lzdHJ5IG9uIGV2ZXJ5IHJlbGVhc2UgKGUuZy4gdGhlXG4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL2Jsb2IvZTY1NzE5MDYwNDNiNjc1MTk1MWE0MmI2NTQ2NDMxYjFjMzhiMDViZC8uZ2l0aHViL3dvcmtmbG93cy9wcm90by1yZWdpc3RyeS55bWwiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiYXBwcm9hY2giKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIHVzZWQgYnkgdGhlIENvc21vcyBTREspLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkxpbnRpbmcgb24gZXZlcnkgcHVsbCByZXF1ZXN0IChlLmcuIHRoZVxuIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay9ibG9iL2U2NTcxOTA2MDQzYjY3NTE5NTFhNDJiNjU0NjQzMWIxYzM4YjA1YmQvLmdpdGh1Yi93b3JrZmxvd3MvcHJvdG8ueW1sI0wxNSIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJhcHByb2FjaCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiB1c2VkIGJ5IHRoZSBDb3Ntb3MgU0RLKS4gVGhlIGxpbnRlclxucGFzc2luZyBzaG91bGQgYmUgY29uc2lkZXJlZCBhIHJlcXVpcmVtZW50IGZvciBhY2NlcHRpbmcgUFJzLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiQ2hlY2tpbmcgZm9yIGJyZWFraW5nIGNoYW5nZXMgaW4gbWlub3IvcGF0Y2ggdmVyc2lvbiByZWxlYXNlcyBhbmQgZmFpbGluZ1xuQ0kgYWNjb3JkaW5nbHkgLSBzZWUgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzgwMDMiLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIzgwMDMiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZCAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvY2xhbmctZm9ybWF0LWdpdGh1Yi1hY3Rpb24iLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiY2xhbmctZm9ybWF0IEdpdEh1YiBBY3Rpb24iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIHRvIGNoZWNrICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnByb3RvIildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGZpbGUgZm9ybWF0dGluZy4gRm9ybWF0XG5jaGVja2luZyBzaG91bGQgYmUgY29uc2lkZXJlZCBhIHJlcXVpcmVtZW50IGZvciBhY2NlcHRpbmcgUFJzLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVXBkYXRlIHRoZSBUZW5kZXJtaW50ICIpLAogICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIuLi8uLi9NYWtlZmlsZSIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWFrZWZpbGUiKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdG8gcHJpbWFyaWx5IGZhY2lsaXRhdGVcbmxvY2FsIFByb3RvYnVmIHN0dWIgZ2VuZXJhdGlvbiwgbGludGluZywgZm9ybWF0dGluZyBhbmQgYnJlYWtpbmcgY2hhbmdlXG5jaGVja2luZy4gTW9yZSBzcGVjaWZpY2FsbHk6XG4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoIm9sIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoaXMgaW5jbHVkZXMgcmVtb3ZpbmcgdGhlIGRlcGVuZGVuY3kgb24gRG9ja2VyIGFuZCBpbnRyb2R1Y2luZyB0aGVcbmRlcGVuZGVuY3kgb24gbG9jYWwgdG9vbGNoYWluIGluc3RhbGxhdGlvbi4gQ0ktYmFzZWQgZXF1aXZhbGVudHMsIHdoZXJlXG5yZWxldmFudCwgd2lsbCByZWx5IG9uIHNwZWNpZmljIEdpdEh1YiBBY3Rpb25zIGluc3RlYWQgb2YgdGhlIE1ha2VmaWxlLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkdvIGNvZGUgZ2VuZXJhdGlvbiB3aWxsIHJlbHkgb24gIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwcm90b2MiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIGRpcmVjdGx5LiIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zZXF1ZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnNlcXVlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc2VxdWVuY2VzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvc2l0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwb3NpdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zaXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiV2Ugd2lsbCBzdGlsbCBvZmZlciBHbyBzdHViIGdlbmVyYXRpb24sIHByb3RvIGxpbnRpbmcgYW5kIGJyZWFrYWdlIGNoZWNraW5nLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQnJlYWthZ2UgY2hlY2tpbmcgd2lsbCBvbmx5IGhhcHBlbiBvbiBtaW5vci9wYXRjaCByZWxlYXNlcyB0byBpbmNyZWFzZSB0aGVcbnNpZ25hbC10by1ub2lzZSByYXRpbyBpbiBDSS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlZlcnNpb25lZCBwcm90b3Mgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZSB2aWEgQnVmJ3MgcmVnaXN0cnkgdXBvbiBldmVyeSByZWxlYXNlLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm5lZ2F0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNuZWdhdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmVnYXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRGV2ZWxvcGVycy9jb250cmlidXRvcnMgd2lsbCBuZWVkIHRvIGluc3RhbGwgdGhlIHJlbGV2YW50IFByb3RvY29sXG5CdWZmZXJzLXJlbGF0ZWQgdG9vbGluZyAoQnVmLCBnb2dvcHJvdG9idWYsIGNsYW5nLWZvcm1hdCkgbG9jYWxseSBpbiBvcmRlciB0b1xuYnVpbGQsIGxpbnQsIGZvcm1hdCBhbmQgY2hlY2sgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLnByb3RvIildKSwKICAgICAgICAgIF92bS5fdigiIGZpbGVzIGZvciBicmVha2luZyBjaGFuZ2VzLiIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJuZXV0cmFsIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNuZXV0cmFsIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIE5ldXRyYWwiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVmZXJlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVmZXJlbmNlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJQcm90b2NvbCBCdWZmZXJzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9idWYuYnVpbGQvIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCdWYiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L3B1bGwvNzk3NSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIzc5NzUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJwcm90b2MiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIC0gVGhlIFByb3RvY29sIEJ1ZmZlcnMgY29tcGlsZXIiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}