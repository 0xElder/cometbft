{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-015-abci++-tx-mutation.md?vue&type=template&id=67bcd228&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-015-abci++-tx-mutation.md","mtime":1673295761290},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAicmZjLTAxNS1hYmNpLXR4LW11dGF0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZmMtMDE1LWFiY2ktdHgtbXV0YXRpb24iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUkZDIDAxNTogQUJDSSsrIFRYIE11dGF0aW9uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNoYW5nZWxvZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2hhbmdlbG9nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDaGFuZ2Vsb2ciKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiMjMtRmViLTIwMjI6IEluaXRpYWwgZHJhZnQgKEB3aWxsaWFtYmFuZmllbGQpLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiMjgtRmViLTIwMjI6IFJldmlzZWQgZHJhZnQgKEB3aWxsaWFtYmFuZmllbGQpLiIpXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFic3RyYWN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhYnN0cmFjdCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWJzdHJhY3QiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBBQkNJKysgc3BlY2lmaWNhdGlvbiBkZXRhaWxlZCBhIG1lY2hhbmlzbSBmb3IgcHJvcG9zZXJzIHRvIHJlcGxhY2UgdHJhbnNhY3Rpb25zXG5pbiB0aGUgcHJvcG9zZWQgYmxvY2suIFRoaXMgc2NoZW1lIHJlcXVpcmVkIHRoZSBwcm9wb3NlciB0byBjb25zdHJ1Y3QgbmV3IHRyYW5zYWN0aW9uc1xuYW5kIG1hcmsgdGhlc2UgbmV3IHRyYW5zYWN0aW9ucyBhcyByZXBsYWNpbmcgb3RoZXIgcmVtb3ZlZCB0cmFuc2FjdGlvbnMuIFRoZSBzcGVjaWZpY2F0aW9uXG53YXMgYW1iaWd1b3VzIGFzIHRvIGhvdyB0aGUgcmVwbGFjZW1lbnQgbWF5IGJlIGNvbW11bmljYXRlZCB0byBwZWVyIG5vZGVzLlxuVGhpcyBSRkMgZGlzY3Vzc2VzIGlzc3VlcyB3aXRoIHRoaXMgbWVjaGFuaXNtIGFuZCBwb3NzaWJsZSBzb2x1dGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImJhY2tncm91bmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2JhY2tncm91bmQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJhY2tncm91bmQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC1pcy10aGUtcHJvcG9zZWQtY2hhbmdlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN3aGF0LWlzLXRoZS1wcm9wb3NlZC1jaGFuZ2UiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCBpcyB0aGUgcHJvcG9zZWQgY2hhbmdlPyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBIHByZXZpb3VzIHZlcnNpb24gb2YgdGhlIEFCQ0krKyBzcGVjaWZpY2F0aW9uIHByb3Bvc2VkIG1lY2hhbmlzbXMgZm9yIGFkZGluZywgcmVtb3ZpbmcsIGFuZCByZXBsYWNpbmdcbnRyYW5zYWN0aW9ucyBpbiBhIHByb3Bvc2VkIGJsb2NrLiBUbyByZXBsYWNlIGEgdHJhbnNhY3Rpb24sIHRoZSBhcHBsaWNhdGlvbiBydW5uaW5nXG4iCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByb2Nlc3NQcm9wb3NhbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjb3VsZCBtYXJrIGEgdHJhbnNhY3Rpb24gYXMgcmVwbGFjZWQgYnkgb3RoZXIgYXBwbGljYXRpb24tc3VwcGxpZWRcbnRyYW5zYWN0aW9ucyBieSByZXR1cm5pbmcgYSBuZXcgdHJhbnNhY3Rpb24gbWFya2VkIHdpdGggdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQURERUQiKV0pLAogICAgICAgIF92bS5fdigiIGZsYWcgc2V0dGluZ1xudGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmV3X2hhc2hlcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmaWVsZCBvZiB0aGUgcmVtb3ZlZCB0cmFuc2FjdGlvbiB0byBjb250YWluIHRoZSBsaXN0IG9mIHRyYW5zYWN0aW9uIGhhc2hlc1xudGhhdCByZXBsYWNlIGl0LiBJbiB0aGF0IHByZXZpb3VzIHNwZWNpZmljYXRpb24gZm9yIEFCQ0krKywgdGhlIGZ1bGwgdXNlIG9mIHRoZVxuIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuZXdfaGFzaGVzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZpZWxkIGlzIGxlZnQgc29tZXdoYXQgYW1iaWd1b3VzLiBBdCBwcmVzZW50LCB0aGVzZSBoYXNoZXMgYXJlIG5vdFxuZ29zc2lwZWQgYW5kIGFyZSBub3QgZXZlbnR1YWxseSBpbmNsdWRlZCBpbiB0aGUgYmxvY2sgdG8gc2lnbmFsIHJlcGxhY2VtZW50IHRvXG5vdGhlciBub2Rlcy4gVGhlIHNwZWNpZmljYXRpb24gZGlkIGluZGljYXRlIHRoYXQgdGhlIHRyYW5zYWN0aW9ucyBzcGVjaWZpZWQgaW5cbnRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5ld19oYXNoZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZmllbGQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIG1lbXBvb2wgYnV0IGl0J3Mgbm90IGNsZWFyIGhvd1xucGVlciBub2RlcyB3aWxsIGxlYXJuIGFib3V0IHRoZW0uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogIndoYXQtc3lzdGVtcy13b3VsZC1iZS1hZmZlY3RlZC1ieS1hZGRpbmctdHJhbnNhY3Rpb24tcmVwbGFjZW1lbnQiLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3doYXQtc3lzdGVtcy13b3VsZC1iZS1hZmZlY3RlZC1ieS1hZGRpbmctdHJhbnNhY3Rpb24tcmVwbGFjZW1lbnQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgV2hhdCBzeXN0ZW1zIHdvdWxkIGJlIGFmZmVjdGVkIGJ5IGFkZGluZyB0cmFuc2FjdGlvbiByZXBsYWNlbWVudD8iCiAgICAgICAgICApLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgJ3RyYW5zYWN0aW9uJyBpcyBhIGNlbnRyYWwgYnVpbGRpbmcgYmxvY2sgb2YgYSBUZW5kZXJtaW50IGJsb2NrY2hhaW4sIHNvIGFkZGluZ1xuYSBtZWNoYW5pc20gZm9yIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50IHdvdWxkIHJlcXVpcmUgY2hhbmdlcyB0byBtYW55IGFzcGVjdHMgb2YgVGVuZGVybWludC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZvbGxvd2luZyBpcyBhIHJvdWdoIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdHkgdGhhdCB0aGlzIG1lY2hhbmlzbSB3b3VsZCBhZmZlY3Q6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInRyYW5zYWN0aW9uLWluZGV4aW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0cmFuc2FjdGlvbi1pbmRleGluZyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUcmFuc2FjdGlvbiBpbmRleGluZyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUZW5kZXJtaW50J3MgaW5kZXhlciBzdG9yZXMgdHJhbnNhY3Rpb25zIGFuZCB0cmFuc2FjdGlvbiByZXN1bHRzIHVzaW5nIHRoZSBoYXNoIG9mIHRoZSBleGVjdXRlZFxudHJhbnNhY3Rpb24gIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi8wZmNmYWE0NTY4Y2I3MDBlMjdjOTU0Mzg5YzFmY2QwYjllNzg2MzMyL2ludGVybmFsL3N0YXRlL2luZGV4ZXIvdHgva3Yva3YuZ28jTDkwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImFzIHRoZSBrZXkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIGFuZCB0aGUgQUJDSSByZXN1bHRzIGFuZCB0cmFuc2FjdGlvbiBieXRlcyBhcyB0aGUgdmFsdWUuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGFsbG93IHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50LCB0aGUgcmVwbGFjZWQgdHJhbnNhY3Rpb25zIHdvdWxkIG5lZWQgdG8gc3RvcmVkIGFzIHdlbGwgaW4gdGhlXG5pbmRleGVyLCBsaWtlbHkgYXMgYSBtYXBwaW5nIG9mIG9yaWdpbmFsIHRyYW5zYWN0aW9uIHRvIGxpc3Qgb2YgdHJhbnNhY3Rpb24gaGFzaGVzIHRoYXQgcmVwbGFjZWRcbnRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAidHJhbnNhY3Rpb24taW5jbHVzaW9uLXByb29mcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHJhbnNhY3Rpb24taW5jbHVzaW9uLXByb29mcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUcmFuc2FjdGlvbiBpbmNsdXNpb24gcHJvb2ZzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSByZXN1bHQgb2YgYSB0cmFuc2FjdGlvbiBxdWVyeSBpbmNsdWRlcyBhIE1lcmtsZSBwcm9vZiBvZiB0aGUgZXhpc3RlbmNlIG9mIHRoZVxudHJhbnNhY3Rpb24gaW4gdGhlIGJsb2NrIGNoYWluLiBUaGlzICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvMGZjZmFhNDU2OGNiNzAwZTI3Yzk1NDM4OWMxZmNkMGI5ZTc4NjMzMi90eXBlcy90eC5nbyNMNjciLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigicHJvb2YgaXMgYnVpbHQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYXMgYSBtZXJrbGUgdHJlZVxub2YgdGhlIGhhc2hlcyBvZiBhbGwgb2YgdGhlIHRyYW5zYWN0aW9ucyBpbiB0aGUgYmxvY2sgd2hlcmUgdGhlIHF1ZXJpZWQgdHJhbnNhY3Rpb24gd2FzIGV4ZWN1dGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBhbGxvdyB0cmFuc2FjdGlvbiByZXBsYWNlbWVudCwgdGhlc2UgcHJvb2ZzIHdvdWxkIG5lZWQgdG8gYmUgdXBkYXRlZCB0byBwcm92ZVxudGhhdCBhIHJlcGxhY2VkIHRyYW5zYWN0aW9uIHdhcyBpbmNsdWRlZCBieSByZXBsYWNlbWVudCBpbiB0aGUgYmxvY2suIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicnBjLWJhc2VkLXRyYW5zYWN0aW9uLXF1ZXJ5LXBhcmFtZXRlcnMtYW5kLXJlc3VsdHMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNycGMtYmFzZWQtdHJhbnNhY3Rpb24tcXVlcnktcGFyYW1ldGVycy1hbmQtcmVzdWx0cyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFJQQy1iYXNlZCB0cmFuc2FjdGlvbiBxdWVyeSBwYXJhbWV0ZXJzIGFuZCByZXN1bHRzIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRlbmRlcm1pbnQncyBSUEMgYWxsb3dzIGNsaWVudHMgdG8gcmV0cmlldmUgaW5mb3JtYXRpb24gYWJvdXQgdHJhbnNhY3Rpb25zIHZpYSB0aGVcbiIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiL3R4X3NlYXJjaCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiL3R4IildKSwKICAgICAgICBfdm0uX3YoIiBSUEMgZW5kcG9pbnRzLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJSUEMgcXVlcnkgcmVzdWx0cyBjb250YWluaW5nIHJlcGxhY2VkIHRyYW5zYWN0aW9ucyB3b3VsZCBuZWVkIHRvIGJlIHVwZGF0ZWQgdG8gaW5jbHVkZVxuaW5mb3JtYXRpb24gb24gcmVwbGFjZWQgdHJhbnNhY3Rpb25zLCBlaXRoZXIgYnkgcmV0dXJuaW5nIHJlc3VsdHMgZm9yIGFsbCBvZiB0aGUgcmVwbGFjZWRcbnRyYW5zYWN0aW9ucywgb3IgYnkgaW5jbHVkaW5nIGEgcmVzcG9uc2Ugd2l0aCBqdXN0IHRoZSBoYXNoZXMgb2YgdGhlIHJlcGxhY2VkIHRyYW5zYWN0aW9uc1xud2hpY2ggY2xpZW50cyBjb3VsZCBwcm9jZWVkIHRvIHF1ZXJ5IGluZGl2aWR1YWxseS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibWVtcG9vbC10cmFuc2FjdGlvbi1yZW1vdmFsIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtZW1wb29sLXRyYW5zYWN0aW9uLXJlbW92YWwiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWVtcG9vbCB0cmFuc2FjdGlvbiByZW1vdmFsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFkZGl0aW9uYWwgbG9naWMgd291bGQgbmVlZCB0byBiZSBhZGRlZCB0byB0aGUgVGVuZGVybWludCBtZW1wb29sIHRvIGNsZWFyIG91dCByZXBsYWNlZFxudHJhbnNhY3Rpb25zIGFmdGVyIGVhY2ggYmxvY2sgaXMgZXhlY3V0ZWQuIFRlbmRlcm1pbnQgY3VycmVudGx5IHJlbW92ZXMgZXhlY3V0ZWQgdHJhbnNhY3Rpb25zXG5mcm9tIHRoZSBtZW1wb29sLCBzbyB0aGlzIHdvdWxkIGJlIGEgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCBjaGFuZ2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2N1c3Npb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Rpc2N1c3Npb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERpc2N1c3Npb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAid2hhdC12YWx1ZS1tYXktYmUtYWRkZWQtdG8tdGVuZGVybWludC1ieS1pbnRyb2R1Y2luZy10cmFuc2FjdGlvbi1yZXBsYWNlbWVudCIsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjd2hhdC12YWx1ZS1tYXktYmUtYWRkZWQtdG8tdGVuZGVybWludC1ieS1pbnRyb2R1Y2luZy10cmFuc2FjdGlvbi1yZXBsYWNlbWVudCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBXaGF0IHZhbHVlIG1heSBiZSBhZGRlZCB0byBUZW5kZXJtaW50IGJ5IGludHJvZHVjaW5nIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50PyIKICAgICAgICAgICksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRyYW5zYWN0aW9uIHJlcGxhY2VtZW50IHdvdWxkIHdvdWxkIGVuYWJsZSBhcHBsaWNhdGlvbnMgdG8gYWdncmVnYXRlIG9yIGRpc2FnZ3JlZ2F0ZSB0cmFuc2FjdGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBhZ2dyZWdhdGlvbiwgYSBzZXQgb2YgdHJhbnNhY3Rpb25zIHRoYXQgYWxsIHJlbGF0ZWQgd29yaywgc3VjaCBhcyB0cmFuc2ZlcnJpbmdcbnRva2VucyBiZXR3ZWVuIHRoZSBzYW1lIHR3byBhY2NvdW50cywgY291bGQgYmUgcmVwbGFjZWQgd2l0aCBhIHNpbmdsZSB0cmFuc2FjdGlvbixcbmkuZS4gb25lIHRoYXQgdHJhbnNmZXJzIGEgc2luZ2xlIHN1bSBmcm9tIG9uZSBhY2NvdW50IHRvIHRoZSBvdGhlci5cbkFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgZnJlcXVlbnQgdXNlIG9mIGFnZ3JlZ2F0aW9uIG1heSBiZSBhYmxlIHRvIGFjaGlldmUgYSBoaWdoZXIgdGhyb3VnaHB1dC5cbkFnZ3JlZ2F0aW9uIHdvdWxkIGRlY3JlYXNlIHRoZSBzcGFjZSBvY2N1cGllZCBieSBhIHNpbmdsZSBjbGllbnQtc3VibWl0dGVkIHRyYW5zYWN0aW9uIGluIHRoZSBibG9jaywgYWxsb3dpbmdcbm1vcmUgY2xpZW50LXN1Ym1pdHRlZCB0cmFuc2FjdGlvbnMgdG8gYmUgZXhlY3V0ZWQgcGVyIGJsb2NrLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgZGlzYWdncmVnYXRpb24sIGEgdmVyeSBjb21wbGV4IHRyYW5zYWN0aW9uIGNvdWxkIGJlIHNwbGl0IGludG8gbXVsdGlwbGUgc21hbGxlciB0cmFuc2FjdGlvbnMuXG5UaGlzIG1heSBiZSB1c2VmdWwgaWYgYW4gYXBwbGljYXRpb24gd2lzaGVzIHRvIHBlcmZvcm0gbW9yZSBmaW5lLWdyYWluZWQgaW5kZXhpbmcgb24gaW50ZXJtZWRpYXRlIHBhcnRzXG5vZiBhIG11bHRpLXBhcnQgdHJhbnNhY3Rpb24uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImRyYXdiYWNrcy10by10cmFuc2FjdGlvbi1yZXBsYWNlbWVudCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZHJhd2JhY2tzLXRvLXRyYW5zYWN0aW9uLXJlcGxhY2VtZW50IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERyYXdiYWNrcyB0byB0cmFuc2FjdGlvbiByZXBsYWNlbWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUcmFuc2FjdGlvbiByZXBsYWNlbWVudCB3b3VsZCByZXF1aXJlIHVwZGF0aW5nIGFuZCBzaGltbWluZyBtYW55IG9mIHRoZSBwbGFjZXMgdGhhdFxuVGVuZGVybWludCByZWNvcmRzIGFuZCBleHBvc2VzIGluZm9ybWF0aW9uIGFib3V0IGV4ZWN1dGVkIHRyYW5zYWN0aW9ucy4gV2hpbGVcbnN5c3RlbXMgd2l0aGluIFRlbmRlcm1pbnQgY291bGQgYmUgdXBkYXRlZCB0byBhY2NvdW50IGZvciB0cmFuc2FjdGlvbiByZXBsYWNlbWVudCxcbnN1Y2ggYSBzeXN0ZW0gd291bGQgbGVhdmUgbmV3IGlzc3VlcyBhbmQgcm91Z2ggZWRnZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAibm8td2F5LW9mLWd1YXJhbnRlZWluZy1jb3JyZWN0LXJlcGxhY2VtZW50IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNuby13YXktb2YtZ3VhcmFudGVlaW5nLWNvcnJlY3QtcmVwbGFjZW1lbnQiIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBObyB3YXkgb2YgZ3VhcmFudGVlaW5nIGNvcnJlY3QgcmVwbGFjZW1lbnQiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgYSB1c2VyIGlzc3VlcyBhIHRyYW5zYWN0aW9uIHRvIHRoZSBuZXR3b3JrIGFuZCB0aGUgdHJhbnNhY3Rpb24gaXMgcmVwbGFjZWQsIHRoZVxudXNlciBoYXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIHJlcGxhY2VtZW50IHdhcyBjb3JyZWN0LiBGb3IgZXhhbXBsZSwgc3VwcG9zZSBhIHNldCBvZiB1c2VycyBpc3N1ZVxudHJhbnNhY3Rpb25zIEEsIEIsIGFuZCBDIGFuZCB0aGV5IGFyZSBhbGwgYWdncmVnYXRlZCBpbnRvIGEgbmV3IHRyYW5zYWN0aW9uLCBELlxuVGhlcmUgaXMgbm90aGluZyBndWFyYW50ZWVpbmcgdGhhdCBEIHdhcyBjb25zdHJ1Y3RlZCBjb3JyZWN0bHkgZnJvbSB0aGUgaW5wdXRzLlxuVGhlIG9ubHkgd2F5IGZvciB1c2VycyB0byBlbnN1cmUgRCBpcyBjb3JyZWN0IHdvdWxkIGJlIGlmIEQgY29udGFpbmVkIGFsbCBvZiB0aGVcbmluZm9ybWF0aW9uIG9mIGl0cyBjb25zdGl0dWVudCB0cmFuc2FjdGlvbnMsIGluIHdoaWNoIGNhc2UsIG5vdGhpbmcgaXMgcmVhbGx5IGdhaW5lZCBieSB0aGUgcmVwbGFjZW1lbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicmVwbGFjZW1lbnQtdHJhbnNhY3Rpb25zLW5vdC1zaWduZWQtYnktc3VibWl0dGVyIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjcmVwbGFjZW1lbnQtdHJhbnNhY3Rpb25zLW5vdC1zaWduZWQtYnktc3VibWl0dGVyIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgUmVwbGFjZW1lbnQgdHJhbnNhY3Rpb25zIG5vdCBzaWduZWQgYnkgc3VibWl0dGVyIiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFic3RyYWN0bHksIFRlbmRlcm1pbnQgc2ltcGx5IHZpZXdzIHRyYW5zYWN0aW9ucyBhcyBhIGJhbGwgb2YgYnl0ZXMgYW5kIHRoZXJlZm9yZVxuc2hvdWxkIGJlIGZpbmUgd2l0aCByZXBsYWNpbmcgb25lIGZvciBhbm90aGVyLiBIb3dldmVyLCBtYW55IGFwcGxpY2F0aW9ucyByZXF1aXJlXG50aGF0IHRyYW5zYWN0aW9ucyBzdWJtaXR0ZWQgdG8gdGhlIGNoYWluIGJlIHNpZ25lZCBieSBzb21lIHByaXZhdGUga2V5IHRvIGF1dGhlbnRpY2F0ZVxuYW5kIGF1dGhvcml6ZSB0aGUgdHJhbnNhY3Rpb24uIFJlcGxhY2VkIHRyYW5zYWN0aW9ucyBjb3VsZCBub3QgYmUgc2lnbmVkIGJ5IHRoZVxuc3VibWl0dGVyLCBvbmx5IGJ5IHRoZSBhcHBsaWNhdGlvbiBub2RlLiBUaGVyZWZvcmUsIGFueSB1c2Ugb2YgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnRcbmNvdWxkIG5vdCBjb250YWluIGF1dGhvcml6YXRpb24gZnJvbSB0aGUgc3VibWl0dGVyIGFuZCB3b3VsZCBlaXRoZXIgbmVlZCB0byBncmFudFxuYXBwbGljYXRpb24tc3VibWl0dGVkIHRyYW5zYWN0aW9ucyBwb3dlciB0byBwZXJmb3JtIGFwcGxpY2F0aW9uIGxvZ2ljIG9uIGJlaGFsZlxub2YgYSB1c2VyIHdpdGhvdXQgdGhlaXIgY29uc2VudC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiR3JhbnRpbmcgdGhpcyBwb3dlciB0byBhcHBsaWNhdGlvbi1zdWJtaXR0ZWQgdHJhbnNhY3Rpb25zIHdvdWxkIGJlIHZlcnkgZGFuZ2Vyb3VzXG5hbmQgdGhlcmVmb3JlIG1pZ2h0IG5vdCBiZSBvZiBtdWNoIHZhbHVlIHRvIGFwcGxpY2F0aW9uIGRldmVsb3BlcnMuXG5UcmFuc2FjdGlvbiByZXBsYWNlbWVudCBtaWdodCBvbmx5IGJlIHJlYWxseSBzYWZlIGluIHRoZSBjYXNlIG9mIGFwcGxpY2F0aW9uLXN1Ym1pdHRlZFxudHJhbnNhY3Rpb25zIG9yIGZvciB0cmFuc2FjdGlvbnMgdGhhdCByZXF1aXJlIG5vIGF1dGhvcml6YXRpb24uIEZvciBzdWNoIHRyYW5zYWN0aW9ucyxcbml0J3MgcXVpdGUgbm90IHF1aXRlIGNsZWFyIHdoYXQgdGhlIHV0aWxpdHkgb2YgcmVwbGFjZW1lbnQgaXM6IHRoZSBhcHBsaWNhdGlvbiBjYW4gYWxyZWFkeVxuZ2VuZXJhdGUgYW55IHRyYW5zYWN0aW9ucyB0aGF0IGl0IHdhbnRzLiBUaGUgZmFjdCB0aGF0IHN1Y2ggYSB0cmFuc2FjdGlvbiB3YXMgYSByZXBsYWNlbWVudFxuaXMgbm90IHBhcnRpY3VsYXJseSByZWxldmFudCB0byBwYXJ0aWNpcGFudHMgaW4gdGhlIGNoYWluIHNpbmNlIHRoZSBhcHBsaWNhdGlvbiBpc1xubWVyZWx5IHJlcGxhY2luZyBpdHMgb3duIHRyYW5zYWN0aW9ucy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibmV3LXZlY3Rvci1mb3ItY2Vuc29yc2hpcCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbmV3LXZlY3Rvci1mb3ItY2Vuc29yc2hpcCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOZXcgdmVjdG9yIGZvciBjZW5zb3JzaGlwIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkRlcGVuZGluZyBvbiB0aGUgaW1wbGVtZW50YXRpb24sIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50IG1heSBhbGxvdyBhIG5vZGUgc2lnbmFsXG50byB0aGUgcmVzdCBvZiB0aGUgY2hhaW4gdGhhdCBzb21lIHRyYW5zYWN0aW9uIHNob3VsZCBubyBsb25nZXIgYmUgY29uc2lkZXJlZCBmb3IgZXhlY3V0aW9uLlxuSG9uZXN0IG5vZGVzIHdpbGwgdXNlIHRoZSByZXBsYWNlbWVudCBtZWNoYW5pc20gdG8gc2lnbmFsIHRoYXQgYSB0cmFuc2FjdGlvbiBoYXMgYmVlbiBhZ2dyZWdhdGVkLlxuTWFsaWNpb3VzIG5vZGVzIHdpbGwgYmUgZ3JhbnRlZCBhIG5ldyB2ZWN0b3IgZm9yIGNlbnNvcmluZyB0cmFuc2FjdGlvbnMuXG5UaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBhIHJlcGxhY2VkIHRyYW5zYWN0aW9ucyBpcyBhY3R1YWxseSBleGVjdXRlZCBhdCBhbGwuXG5BIG1hbGljaW91cyBub2RlIGNvdWxkIGNlbnNvciBhIHRyYW5zYWN0aW9uIGJ5IHNpbXBseSBsaXN0aW5nIGl0IGFzIHJlcGxhY2VkLlxuSG9uZXN0IG5vZGVzIHNlZWluZyB0aGUgcmVwbGFjZW1lbnQgd291bGQgZmx1c2ggdGhlIHRyYW5zYWN0aW9uIGZyb20gdGhlaXIgbWVtcG9vbFxuYW5kIG5vdCBleGVjdXRlIG9yIHByb3Bvc2UgaXQgaXQgaW4gbGF0ZXIgYmxvY2tzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0cmFuc2FjdGlvbi10cmFja2luZy1pbXBsZW1lbnRhdGlvbnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3RyYW5zYWN0aW9uLXRyYWNraW5nLWltcGxlbWVudGF0aW9ucyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUcmFuc2FjdGlvbiB0cmFja2luZyBpbXBsZW1lbnRhdGlvbnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBzZWN0aW9uIGRpc2N1c3NlcyBwb3NzaWJsZSB3YXlzIHRvIGZsZXNoIG91dCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnQuXG5TcGVjaWZpY2FsbHksIHRoaXMgc2VjdGlvbiBwcm9wb3NlcyBhIGZldyBhbHRlcm5hdGl2ZSB3YXlzIHRoYXQgVGVuZGVybWludCBibG9ja2NoYWlucyBjb3VsZFxudHJhY2sgYW5kIHN0b3JlIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50cy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJpbmNsdWRlLXRyYW5zYWN0aW9uLXJlcGxhY2VtZW50cy1pbi10aGUtYmxvY2siIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luY2x1ZGUtdHJhbnNhY3Rpb24tcmVwbGFjZW1lbnRzLWluLXRoZS1ibG9jayIgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEluY2x1ZGUgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnRzIGluIHRoZSBibG9jayIpLAogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmUgb3B0aW9uIHRvIHRyYWNrIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50IGlzIHRvIGluY2x1ZGUgaW5mb3JtYXRpb24gb24gdGhlXG50cmFuc2FjdGlvbiByZXBsYWNlbWVudCB3aXRoaW4gdGhlIGJsb2NrLiBBbiBhZGRpdGlvbmFsIHN0cnVjdHVyZSBtYXkgYmUgYWRkZWRcbnRoZSBibG9jayBvZiB0aGUgZm9sbG93aW5nIGZvcm06IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogInByb3RvIiwKICAgICAgICAgIGJhc2U2NDoKICAgICAgICAgICAgImJXVnpjMkZuWlNCQ2JHOWpheUI3Q2k0dUxnb2dJSEpsY0dWaGRHVmtJRkpsY0d4aFkyVnRaVzUwSUhKbGNHeGhZMlZ0Wlc1MGN5QTlJRFU3Q24wS0NtMWxjM05oWjJVZ1VtVndiR0ZqWlcxbGJuUWdld29nSUdKNWRHVnpJQ0FnSUNBZ0lDQWdJR2x1WTJ4MVpHVmtYM1I0WDJ0bGVTQWdJRDBnTVRzS0lDQnlaWEJsWVhSbFpDQmllWFJsY3lCeVpYQnNZV05sWkY5MGVITmZhMlY1Y3lBOUlESTdDbjBLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQXBwbGljYXRpb25zIGV4ZWN1dGluZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByZXBhcmVQcm9wb3NhbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3b3VsZCByZXR1cm4gdGhlIGxpc3Qgb2YgcmVwbGFjZW1lbnRzIGFuZFxuVGVuZGVybWludCB3b3VsZCBpbmNsdWRlIGFuIGVuY29kaW5nIG9mIHRoZXNlIHJlcGxhY2VtZW50cyBpbiB0aGUgYmxvY2sgdGhhdCBpcyBnb3NzaXBlZFxuYW5kIGNvbW1pdHRlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVuZGVybWludCdzIHRyYW5zYWN0aW9uIGluZGV4aW5nIHdvdWxkIGluY2x1ZGUgYSBuZXcgbWFwcGluZyBmb3IgZWFjaCByZXBsYWNlZCB0cmFuc2FjdGlvblxua2V5IHRvIHRoZSBjb21taXR0ZWQgdHJhbnNhY3Rpb24uXG5UcmFuc2FjdGlvbiBpbmNsdXNpb24gcHJvb2ZzIHdvdWxkIGJlIHVwZGF0ZWQgdG8gaW5jbHVkZSB0aGVzZSBhZGRpdGlvbmFsIG5ldyB0cmFuc2FjdGlvblxua2V5cyBpbiB0aGUgTWVya2xlIHRyZWUgYW5kIHF1ZXJpZXMgZm9yIHRyYW5zYWN0aW9uIGhhc2hlcyB0aGF0IHdlcmUgcmVwbGFjZWQgd291bGQgcmV0dXJuXG5pbmZvcm1hdGlvbiBpbmRpY2F0aW5nIHRoYXQgdGhlIHRyYW5zYWN0aW9uIHdhcyByZXBsYWNlZCBhbG9uZyB3aXRoIHRoZSBoYXNoIG9mIHRoZVxudHJhbnNhY3Rpb24gdGhhdCByZXBsYWNlZCBpdC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQmxvY2sgdmFsaWRhdGlvbiBvZiBnb3NzaXBlZCBibG9ja3Mgd291bGQgYmUgdXBkYXRlZCB0byBjaGVjayB0aGF0IGVhY2ggb2YgdGhlXG4iCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImluY2x1ZGVkX3R4c19rZXkiKV0pLAogICAgICAgIF92bS5fdigiIG1hdGNoZXMgdGhlIGhhc2ggb2Ygc29tZSB0cmFuc2FjdGlvbiBpbiB0aGUgcHJvcG9zZWQgYmxvY2suIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkltcGxlbWVudGluZyB0aGUgY2hhbmdlcyBkZXNjcmliZWQgaW4gdGhpcyBzZWN0aW9uIHdvdWxkIGFsbG93IFRlbmRlcm1pbnQgdG8gZ29zc2lwXG5hbmQgaW5kZXggdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnRzIGFzIHBhcnQgb2YgYmxvY2sgcHJvcGFnYXRpb24uIFRoZXNlIGNoYW5nZXMgd291bGRcbnN0aWxsIHJlcXVpcmUgdGhlIGFwcGxpY2F0aW9uIHRvIGNlcnRpZnkgdGhhdCB0aGUgcmVwbGFjZW1lbnRzIHdlcmUgdmFsaWQuIFRoaXNcbnZhbGlkYXRpb24gbWF5IGJlIHBlcmZvcm1lZCBpbiBvbmUgb2YgdHdvIHdheXM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiQXBwbGljYXRpb25zIG9wdGltaXN0aWNhbGx5IHRydXN0IHRoYXQgdGhlIHByb3Bvc2VyIHBlcmZvcm1lZCBhIGxlZ2l0aW1hdGUgcmVwbGFjZW1lbnQuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoaXMgdmFsaWRhdGlvbiBzY2hlbWUsIGFwcGxpY2F0aW9ucyB3b3VsZCBub3QgdmVyaWZ5IHRoYXQgdGhlIHN1YnN0aXR1dGlvblxuaXMgdmFsaWQgZHVyaW5nIGNvbnNlbnN1cyBhbmQgaW5zdGVhZCBzaW1wbHkgdHJ1c3QgdGhhdCB0aGUgcHJvcG9zZXIgaXMgY29ycmVjdC5cblRoaXMgd291bGQgaGF2ZSB0aGUgZHJhd2JhY2sgb2YgYWxsb3dpbmcgYSBtYWxpY2lvdXMgcHJvcG9zZXIgdG8gcmVtb3ZlIHRyYW5zYWN0aW9uc1xuaXQgZGlkIG5vdCB3YW50IGV4ZWN1dGVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIyIiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIkFwcGxpY2F0aW9ucyBjb21wbGV0ZWx5IHZhbGlkYXRlIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50LiIpLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoaXMgdmFsaWRhdGlvbiBzY2hlbWUsIGFwcGxpY2F0aW9ucyB0aGF0IGFsbG93IHJlcGxhY2VtZW50IHdvdWxkIGNoZWNrIHRoYXRcbmVhY2ggbGlzdGVkIHJlcGxhY2VkIHRyYW5zYWN0aW9uIHdhcyBjb3JyZWN0bHkgcmVmbGVjdGVkIGluIHRoZSByZXBsYWNlbWVudCB0cmFuc2FjdGlvbi5cbkluIG9yZGVyIHRvIHBlcmZvcm0gc3VjaCB2YWxpZGF0aW9uLCB0aGUgbm9kZSB3b3VsZCBuZWVkIHRvIGhhdmUgdGhlIHJlcGxhY2VkIHRyYW5zYWN0aW9uc1xubG9jYWxseS4gVGhpcyBjb3VsZCBiZSBhY2NvbXBsaXNoZWQgb25lIG9mIGEgZmV3IHdheXM6IGJ5IHF1ZXJ5aW5nIHRoZSBtZW1wb29sLFxuYnkgYWRkaW5nIGFuIGFkZGl0aW9uYWwgcDJwIGdvc3NpcCBjaGFubmVsIGZvciB0cmFuc2FjdGlvbiByZXBsYWNlbWVudHMsIG9yIGJ5IGluY2x1ZGluZyB0aGUgcmVwbGFjZWQgdHJhbnNhY3Rpb25zXG5pbiB0aGUgYmxvY2suIFJlcGxhY2VtZW50IHZhbGlkYXRpb24gdmlhIG1lbXBvb2wgcXVlcnlpbmcgd291bGQgcmVxdWlyZSB0aGUgbm9kZVxudG8gaGF2ZSByZWNlaXZlZCBhbGwgb2YgdGhlIHJlcGxhY2VkIHRyYW5zYWN0aW9ucyBpbiB0aGUgbWVtcG9vbCB3aGljaCBpcyBmYXIgZnJvbVxuZ3VhcmFudGVlZC4gQWRkaW5nIGFuIGFkZGl0aW9uYWwgZ29zc2lwIGNoYW5uZWwgd291bGQgbWFrZSBnb3NzaXBpbmcgcmVwbGFjZWQgdHJhbnNhY3Rpb25zXG5hIHJlcXVpcmVtZW50IGZvciBjb25zZW5zdXMgdG8gcHJvY2VlZCwgc2luY2UgYWxsIG5vZGVzIHdvdWxkIG5lZWQgdG8gcmVjZWl2ZSBhbGwgcmVwbGFjZW1lbnRcbm1lc3NhZ2VzIGJlZm9yZSBjb25zaWRlcmluZyBhIGJsb2NrIHZhbGlkLiBGaW5hbGx5LCBpbmNsdWRpbmcgcmVwbGFjZWQgdHJhbnNhY3Rpb25zIGluXG50aGUgYmxvY2sgc2VlbXMgdG8gb2J2aWF0ZSBhbnkgYmVuZWZpdCBnYWluZWQgZnJvbSBwZXJmb3JtaW5nIGEgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnRcbnNpbmNlIHRoZSByZXBsYWNlZCB0cmFuc2FjdGlvbiBhbmQgdGhlIG9yaWdpbmFsIHRyYW5zYWN0aW9ucyB3b3VsZCBub3cgYm90aCBhcHBlYXIgaW4gdGhlIGJsb2NrLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImFwcGxpY2F0aW9uLWRlZmluZWQtdHJhbnNhY3Rpb24tcmVwbGFjZW1lbnQiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FwcGxpY2F0aW9uLWRlZmluZWQtdHJhbnNhY3Rpb24tcmVwbGFjZW1lbnQiIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBBcHBsaWNhdGlvbiBkZWZpbmVkIHRyYW5zYWN0aW9uIHJlcGxhY2VtZW50IiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFuIGFkZGl0aW9uYWwgb3B0aW9uIGZvciBhbGxvd2luZyB0cmFuc2FjdGlvbiByZXBsYWNlbWVudCBpcyB0byBsZWF2ZSBpdCBlbnRpcmVseSBhcyBhIHJlc3BvbnNpYmlsaXR5XG5vZiB0aGUgYXBwbGljYXRpb24uIFRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByZXBhcmVQcm9wb3NhbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBBQkNJKysgY2FsbCBhbGxvd3MgZm9yIGFwcGxpY2F0aW9ucyB0byBhZGRcbm5ldyB0cmFuc2FjdGlvbnMgdG8gYSBwcm9wb3NlZCBibG9jay4gQXBwbGljYXRpb25zIHRoYXQgd2lzaGVkIHRvIGltcGxlbWVudCBhIHRyYW5zYWN0aW9uXG5yZXBsYWNlbWVudCBtZWNoYW5pc20gd291bGQgYmUgZnJlZSB0byBkbyBzbyB3aXRob3V0IHRoZSBuZXdseSBkZWZpbmVkICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibmV3X2hhc2hlcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmaWVsZC5cbkFwcGxpY2F0aW9ucyB3aXNoaW5nIHRvIGltcGxlbWVudCB0cmFuc2FjdGlvbiByZXBsYWNlbWVudCB3b3VsZCBhZGQgdGhlIGFnZ3JlZ2F0ZWRcbnRyYW5zYWN0aW9ucyBpbiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQcmVwYXJlUHJvcG9zYWwiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcmVzcG9uc2UsIGFuZCBpbmNsdWRlIG9uZSBhZGRpdGlvbmFsIGJvb2trZWVwaW5nXG50cmFuc2FjdGlvbiB0aGF0IGxpc3RlZCBhbGwgb2YgdGhlIHJlcGxhY2VtZW50cywgd2l0aCBhIHNpbWlsYXIgc2NoZW1lIHRvIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5ld19oYXNoZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbmZpZWxkIGRlc2NyaWJlZCBpbiBBQkNJKysuIFRoaXMgbmV3IGJvb2trZWVwaW5nIHRyYW5zYWN0aW9uIGNvdWxkIGJlIHVzZWQgYnkgdGhlXG5hcHBsaWNhdGlvbiB0byBkZXRlcm1pbmUgd2hpY2ggdHJhbnNhY3Rpb25zIHRvIGNsZWFyIGZyb20gdGhlIG1lbXBvb2wgaW4gZnV0dXJlIGNhbGxzXG50byAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNoZWNrVHgiKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbWVhbmluZyBvZiBhbnkgdHJhbnNhY3Rpb24gaW4gdGhlIGJsb2NrIGlzIGNvbXBsZXRlbHkgb3BhcXVlIHRvIFRlbmRlcm1pbnQsXG5zbyBhcHBsaWNhdGlvbnMgcGVyZm9ybWluZyB0aGlzIHN0eWxlIG9mIHJlcGxhY2VtZW50IHdvdWxkIG5vdCBiZSBhYmxlIHRvIGhhdmUgdGhlIHJlcGxhY2VtZW50XG5yZWZsZWN0ZWQgaW4gYW55IG1vc3Qgb2YgVGVuZGVybWludCdzIHRyYW5zYWN0aW9uIHRyYWNraW5nIG1lY2hhbmlzbXMsIHN1Y2ggYXMgdHJhbnNhY3Rpb24gaW5kZXhpbmdcbmFuZCB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIvdHgiKV0pLAogICAgICAgIF92bS5fdigiIGVuZHBvaW50LiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJhcHBsaWNhdGlvbi1kZWZpbmVkLXR4LWtleXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FwcGxpY2F0aW9uLWRlZmluZWQtdHgta2V5cyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBcHBsaWNhdGlvbiBkZWZpbmVkIFR4IEtleXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVuZGVybWludCBjdXJyZW50bHkgdXNlcyBjcnlwdG9ncmFwaGljIGhhc2hlcywgU0hBMjU2LCBhcyBhIGtleSBmb3IgZWFjaCB0cmFuc2FjdGlvbi5cbkFzIG5vdGVkIGluIHRoZSBzZWN0aW9uIG9uIHN5c3RlbXMgdGhhdCB3b3VsZCByZXF1aXJlIGNoYW5naW5nLCB0aGlzIGtleSBpcyB1c2VkXG50byBpZGVudGlmeSB0aGUgdHJhbnNhY3Rpb24gaW4gdGhlIG1lbXBvb2wsIGluIHRoZSBpbmRleGVyLCBhbmQgd2l0aGluIHRoZSBSUEMgc3lzdGVtLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQW4gYWx0ZXJuYXRpdmUgYXBwcm9hY2ggdG8gYWxsb3dpbmcgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJQcm9jZXNzUHJvcG9zYWwiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdG8gc3BlY2lmeSBhIHNldCBvZiB0cmFuc2FjdGlvblxucmVwbGFjZW1lbnRzIHdvdWxkIGJlIGluc3RlYWQgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvIHNwZWNpZnkgYW4gYWRkaXRpb25hbCBrZXkgb3Igc2V0XG5vZiBrZXlzIGZvciBlYWNoIHRyYW5zYWN0aW9uIGR1cmluZyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByb2Nlc3NQcm9wb3NhbCIpXSksCiAgICAgICAgX3ZtLl92KCIuIFRoaXMgbmV3ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2Vjb25kYXJ5X2tleXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc2V0XG53b3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgYmxvY2sgYW5kIHRoZXJlZm9yZSBnb3NzaXBlZCBkdXJpbmcgYmxvY2sgcHJvcGFnYXRpb24uXG5BZGRpdGlvbmFsIFJQQyBlbmRwb2ludHMgY291bGQgYmUgZXhwb3NlZCB0byBxdWVyeSBieSB0aGUgYXBwbGljYXRpb24tZGVmaW5lZCBrZXlzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcHBsaWNhdGlvbnMgd2lzaGluZyB0byBpbXBsZW1lbnQgcmVwbGFjZW1lbnQgd291bGQgbGV2ZXJhZ2UgdGhpcyBuZXcgZmllbGQgYnkgcHJvdmlkaW5nIHRoZVxucmVwbGFjZWQgdHJhbnNhY3Rpb24gaGFzaGVzIGFzIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlY29uZGFyeV9rZXlzIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgY2hlY2tpbmcgdGhlaXIgdmFsaWRpdHkgZHVyaW5nXG4iKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlByb2Nlc3NQcm9wb3NhbCIpXSksCiAgICAgICAgX3ZtLl92KCIuIER1cmluZyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJlY2hlY2tUeCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0aGUgYXBwbGljYXRpb24gd291bGQgdGhlbiBiZSByZXNwb25zaWJsZSBmb3JcbmNsZWFyaW5nIG91dCB0cmFuc2FjdGlvbnMgdGhhdCBtYXRjaGVkIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlY29uZGFyeV9rZXlzIildKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgd29ydGggbm90aW5nIHRoYXQgc29tZXRoaW5nIGxpa2UgdGhpcyB3b3VsZCBiZSBwb3NzaWJsZSB3aXRob3V0ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2Vjb25kYXJ5X2tleXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuXG5BbiBhcHBsaWNhdGlvbiB3aXNoaW5nIHRvIGltcGxlbWVudCBhIHN5c3RlbSBsaWtlIHRoaXMgb25lIGNvdWxkIGRlZmluZSBhIHJlcGxhY2VtZW50XG50cmFuc2FjdGlvbiwgYXMgZGlzY3Vzc2VkIGluIHRoZSBzZWN0aW9uIG9uIGFwcGxpY2F0aW9uLWRlZmluZWQgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnQsXG5hbmQgdXNlIGEgY3VzdG9tICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvMGZjZmFhNDU2OGNiNzAwZTI3Yzk1NDM4OWMxZmNkMGI5ZTc4NjMzMi9hYmNpL3R5cGVzL3R5cGVzLnBiLmdvI0wzMTY4IiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkFCQ0kgZXZlbnQgdHlwZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byBjb21tdW5pY2F0ZSB0aGF0IHRoZSByZXBsYWNlbWVudCBzaG91bGRcbmJlIGluZGV4ZWQgd2l0aGluIFRlbmRlcm1pbnQncyBBQkNJIGV2ZW50IGluZGV4aW5nLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb21wbGV4aXR5LXRvLXZhbHVlLWFkZC10cmFkZW9mZiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29tcGxleGl0eS10by12YWx1ZS1hZGQtdHJhZGVvZmYiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29tcGxleGl0eSB0byB2YWx1ZS1hZGQgdHJhZGVvZmYiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgd29ydGggcmVtYXJraW5nIHRoYXQgYWRkaW5nIGEgc3lzdGVtIGxpa2UgdGhpcyBtYXkgaW50cm9kdWNlIGEgZGVjZW50IGFtb3VudFxub2YgbmV3IGNvbXBsZXhpdHkgaW50byBUZW5kZXJtaW50LiBBbiBhcHByb2FjaCB0aGF0IGxlYXZlcyBtdWNoIG9mIHRoZSByZXBsYWNlbWVudFxubG9naWMgdG8gVGVuZGVybWludCB3b3VsZCByZXF1aXJlIGFsdGVyaW5nIHRoZSBjb3JlIHRyYW5zYWN0aW9uIGluZGV4aW5nIGFuZCBxdWVyeWluZ1xuZGF0YS4gSW4gbWFueSBvZiB0aGUgY2FzZXMgbGlzdGVkLCBhIHN5c3RlbSBmb3IgdHJhbnNhY3Rpb24gcmVwbGFjZW1lbnQgaXMgcG9zc2libGVcbndpdGhvdXQgZXhwbGljaXRseSBkZWZpbmluZyBpdCBhcyBwYXJ0IG9mICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHJlcGFyZVByb3Bvc2FsIildKSwKICAgICAgICBfdm0uX3YoIi4gU2luY2UgYXBwbGljYXRpb25zXG5jYW4gbm93IGFkZCB0cmFuc2FjdGlvbnMgZHVyaW5nICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUHJlcGFyZVByb3Bvc2FsIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHRoZXkgY2FuIGFuZCBzaG91bGQgbGV2ZXJhZ2UgdGhpc1xuZnVuY3Rpb25hbGl0eSB0byBpbmNsdWRlIGFkZGl0aW9uYWwgYm9va2tlZXBpbmcgdHJhbnNhY3Rpb25zIGluIHRoZSBibG9jay4gSXQgbWF5XG5iZSB3b3J0aCBlbmNvdXJhZ2luZyBhcHBsaWNhdGlvbnMgdG8gZGlzY292ZXIgbmV3IGFuZCBpbnRlcmVzdGluZyB3YXlzIHRvIGxldmVyYWdlIHRoaXNcbnBvd2VyIGluc3RlYWQgb2YgaW1tZWRpYXRlbHkgc29sdmluZyB0aGUgcHJvYmxlbSBmb3IgdGhlbS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicmVmZXJlbmNlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVmZXJlbmNlcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVmZXJlbmNlcyIpLAogICAgICBdKSwKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}