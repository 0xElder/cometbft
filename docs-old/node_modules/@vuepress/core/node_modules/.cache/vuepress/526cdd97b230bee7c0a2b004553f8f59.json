{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/qa/v034/README.md?vue&type=template&id=699d7868&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/qa/v034/README.md","mtime":1673295761208},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAidjAtMzQteCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdjAtMzQteCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiB2MC4zNC54IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8yMDAtbm9kZS10ZXN0bmV0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMjAwLW5vZGUtdGVzdG5ldCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAyMDAgTm9kZSBUZXN0bmV0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZpbmRpbmctdGhlLXNhdHVyYXRpb24tcG9pbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZpbmRpbmctdGhlLXNhdHVyYXRpb24tcG9pbnQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRmluZGluZyB0aGUgU2F0dXJhdGlvbiBQb2ludCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZmlyc3QgZ29hbCB3aGVuIGV4YW1pbmluZyB0aGUgcmVzdWx0cyBvZiB0aGUgdGVzdHMgaXMgaWRlbnRpZnlpbmcgdGhlIHNhdHVyYXRpb24gcG9pbnQuXG5UaGUgc2F0dXJhdGlvbiBwb2ludCBpcyBhIHNldHVwIHdpdGggYSB0cmFuc2FjdGlvbiBsb2FkIGJpZyBlbm91Z2ggdG8gcHJldmVudCB0aGUgdGVzdG5ldFxuZnJvbSBiZWluZyBzdGFibGU6IHRoZSBsb2FkIHJ1bm5lciB0cmllcyB0byBwcm9kdWNlIHNsaWdodGx5IG1vcmUgdHJhbnNhY3Rpb25zIHRoYW4gY2FuXG5iZSBwcm9jZXNzZWQgYnkgdGhlIHRlc3RuZXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2xsb3dpbmcgdGFibGUgc3VtbWFyaXplcyB0aGUgcmVzdWx0cyBmb3IgdjAuMzQueCwgZm9yIHRoZSBkaWZmZXJlbnQgZXhwZXJpbWVudHNcbihleHRyYWN0ZWQgZnJvbSBmaWxlICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiLi9pbWcvdjAzNF9yZXBvcnRfdGFiYmVkLnR4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInYwMzRfcmVwb3J0X3RhYmJlZC50eHQiKV0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiKS4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBYIGF4aXMgb2YgdGhpcyB0YWJsZSBpcyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHRoZSBudW1iZXIgb2YgY29ubmVjdGlvbnMgY3JlYXRlZCBieSB0aGUgbG9hZCBydW5uZXIgcHJvY2VzcyB0byB0aGUgdGFyZ2V0IG5vZGUuXG5UaGUgWSBheGlzIG9mIHRoaXMgdGFibGUgaXMgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyIildKSwKICAgICAgICBfdm0uX3YoIiwgdGhlIHJhdGUgb3IgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpc3N1ZWQgcGVyIHNlY29uZC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImxlZnQiIH0gfSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoImM9MSIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiYz0yIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJjPTQiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAibGVmdCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJyPTI1IiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIyMjI1IiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI0NDUwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI4OTAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJsZWZ0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInI9NTAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjQ0NTAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjg5MDAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjE3ODAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJsZWZ0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoInI9MTAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI4OTAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxNzgwMCIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMzU2MDAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImxlZnQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigicj0yMDAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogInJpZ2h0IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjE3ODAwIiksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJyaWdodCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIzNTYwMCIpLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAicmlnaHQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMzg2NjAiKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHRhYmxlIHNob3dzIHRoZSBudW1iZXIgb2YgMTAyNC1ieXRlLWxvbmcgdHJhbnNhY3Rpb25zIHRoYXQgd2VyZSBwcm9kdWNlZCBieSB0aGUgbG9hZCBydW5uZXIsXG5hbmQgcHJvY2Vzc2VkIGJ5IFRlbmRlcm1pbnQsIGR1cmluZyB0aGUgOTAgc2Vjb25kcyBvZiB0aGUgZXhwZXJpbWVudCdzIGR1cmF0aW9uLlxuRWFjaCBjZWxsIGluIHRoZSB0YWJsZSByZWZlcnMgdG8gYW4gZXhwZXJpbWVudCB3aXRoIGEgcGFydGljdWxhciBudW1iZXIgb2Ygd2Vic29ja2V0IGNvbm5lY3Rpb25zICgiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpXG50byBhIGNob3NlbiB2YWxpZGF0b3IsIGFuZCB0aGUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBwZXIgc2Vjb25kIHRoYXQgdGhlIGxvYWQgcnVubmVyXG50cmllcyB0byBwcm9kdWNlICgiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpLiBOb3RlIHRoYXQgdGhlIG92ZXJhbGwgbG9hZCB0aGF0IHRoZSB0b29sIGF0dGVtcHRzIHRvIGdlbmVyYXRlIGlzICRjIFxcY2RvdCByJC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgY2FuIHNlZSB0aGF0IHRoZSBzYXR1cmF0aW9uIHBvaW50IGlzIGJleW9uZCB0aGUgZGlhZ29uYWwgdGhhdCBzcGFucyBjZWxscyIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJyPTIwMCxjPTIiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW19jKCJjb2RlIiwgW192bS5fdigicj0xMDAsYz00IildKV0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJnaXZlbiB0aGF0IHRoZSB0b3RhbCB0cmFuc2FjdGlvbnMgc2hvdWxkIGJlIGNsb3NlIHRvIHRoZSBwcm9kdWN0IG9mIHRoZSByYXRlLCB0aGUgbnVtYmVyIG9mIGNvbm5lY3Rpb25zLFxuYW5kIHRoZSBleHBlcmltZW50IHRpbWUgKDg5IHNlY29uZHMsIHNpbmNlIHRoZSBsYXN0IGJhdGNoIG5ldmVyIGdldHMgc2VudCkuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBbGwgZXhwZXJpbWVudHMgYmVsb3cgdGhlIHNhdHVyYXRpb24gZGlhZ29uYWwgKCIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicj0yMDAsYz00IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiKSBoYXZlIGluIGNvbW1vbiB0aGF0IHRoZSB0b3RhbFxubnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBwcm9jZXNzZWQgaXMgbm90aWNlYWJseSBsZXNzIHRoYW4gdGhlIHByb2R1Y3QgJGMgXFxjZG90IHIgXFxjZG90IDg5JCxcbndoaWNoIGlzIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIHdoZW4gdGhlIHN5c3RlbSBpcyBhYmxlIHRvIGRlYWwgd2VsbCB3aXRoIHRoZVxubG9hZC5cbldpdGggIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyPTIwMCxjPTQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHdlIG9idGFpbmVkIDM4NjYwIHdoZXJlYXMgdGhlIHRoZW9yZXRpY2FsIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgc2hvdWxkXG5oYXZlIGJlZW4gJDIwMCBcXGNkb3QgNCBcXGNkb3QgODkgPSA3MTIwMCQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkF0IHRoaXMgcG9pbnQsIHdlIGNob3NlIGFuIGV4cGVyaW1lbnQgYXQgdGhlIGxpbWl0IG9mIHRoZSBzYXR1cmF0aW9uIGRpYWdvbmFsLFxuaW4gb3JkZXIgdG8gZnVydGhlciBzdHVkeSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyByZWxlYXNlLlxuIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiVGhlIGNob3NlbiBleHBlcmltZW50IGlzICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJyPTIwMCxjPTIiKV0pLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGlzIGEgcGxvdCBvZiB0aGUgQ1BVIGxvYWQgKGF2ZXJhZ2Ugb3ZlciAxIG1pbnV0ZSwgYXMgb3V0cHV0IGJ5ICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidG9wIildKSwKICAgICAgICBfdm0uX3YoIikgb2YgdGhlIGxvYWQgcnVubmVyIGZvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInI9MjAwLGM9MiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIixcbndoZXJlIHdlIGNhbiBzZWUgdGhhdCB0aGUgbG9hZCBzdGF5cyBjbG9zZSB0byAwIG1vc3Qgb2YgdGhlIHRpbWUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfbG9hZC1ydW5uZXIucG5nIiksCiAgICAgICAgICAgIGFsdDogImxvYWQtbG9hZC1ydW5uZXIiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZXhhbWluaW5nLWxhdGVuY2llcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZXhhbWluaW5nLWxhdGVuY2llcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFeGFtaW5pbmcgbGF0ZW5jaWVzIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiVGhlIG1ldGhvZCBkZXNjcmliZWQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcWEvbWV0aG9kLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImhlcmUiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFsbG93cyB1cyB0byBwbG90IHRoZSBsYXRlbmNpZXMgb2YgdHJhbnNhY3Rpb25zXG5mb3IgYWxsIGV4cGVyaW1lbnRzLiIKICAgICAgICAgICksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy92MDM0XzIwMG5vZGVfbGF0ZW5jaWVzLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJhbGwtbGF0ZW5jaWVzIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzIHdlIGNhbiBzZWUsIGV2ZW4gdGhlIGV4cGVyaW1lbnRzIGJleW9uZCB0aGUgc2F0dXJhdGlvbiBkaWFnb25hbCBtYW5hZ2VkIHRvIGtlZXBcbnRyYW5zYWN0aW9uIGxhdGVuY3kgc3RhYmxlIChpLmUuIG5vdCBjb25zdGFudGx5IGluY3JlYXNpbmcpLlxuT3VyIGludGVycHJldGF0aW9uIGZvciB0aGlzIGlzIHRoYXQgY29udGVudGlvbiB3aXRoaW4gVGVuZGVybWludCB3YXMgcHJvcGFnYXRlZCxcbnZpYSB0aGUgd2Vic29ja2V0cywgdG8gdGhlIGxvYWQgcnVubmVyLFxuaGVuY2UgdGhlIGxvYWQgcnVubmVyIGNvdWxkIG5vdCBwcm9kdWNlIHRoZSB0YXJnZXQgbG9hZCwgYnV0IGEgZnJhY3Rpb24gb2YgaXQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZ1cnRoZXIgZXhhbWluYXRpb24gb2YgdGhlIFByb21ldGhldXMgZGF0YSAoc2VlIGJlbG93KSwgc2hvd2VkIHRoYXQgdGhlIG1lbXBvb2wgY29udGFpbmVkIG1hbnkgdHJhbnNhY3Rpb25zXG5hdCBzdGVhZHkgc3RhdGUsIGJ1dCBkaWQgbm90IGdyb3cgbXVjaCB3aXRob3V0IHF1aWNrbHkgcmV0dXJuaW5nIHRvIHRoaXMgc3RlYWR5IHN0YXRlLiBUaGlzIGRlbW9uc3RyYXRlc1xudGhhdCB0aGUgdHJhbnNhY3Rpb25zIHdlcmUgYWJsZSB0byBiZSBwcm9jZXNzZWQgYnkgdGhlIFRlbmRlcm1pbnQgbmV0d29yayBhdCBsZWFzdCBhcyBxdWlja2x5IGFzIHRoZXlcbndlcmUgc3VibWl0dGVkIHRvIHRoZSBtZW1wb29sLiBGaW5hbGx5LCB0aGUgdGVzdCBzY3JpcHQgbWFkZSBzdXJlIHRoYXQsIGF0IHRoZSBlbmQgb2YgYW4gZXhwZXJpbWVudCwgdGhlXG5tZW1wb29sIHdhcyBlbXB0eSBzbyB0aGF0IGFsbCB0cmFuc2FjdGlvbnMgc3VibWl0dGVkIHRvIHRoZSBjaGFpbiB3ZXJlIHByb2Nlc3NlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRmluYWxseSwgdGhlIG51bWJlciBvZiBwb2ludHMgcHJlc2VudCBpbiB0aGUgcGxvdCBhcHBlYXJzIHRvIGJlIG11Y2ggbGVzcyB0aGFuIGV4cGVjdGVkIGdpdmVuIHRoZVxubnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBlYWNoIGV4cGVyaW1lbnQsIHBhcnRpY3VsYXJseSBjbG9zZSB0byBvciBhYm92ZSB0aGUgc2F0dXJhdGlvbiBkaWFnb25hbC5cblRoaXMgaXMgYSB2aXN1YWwgZWZmZWN0IG9mIHRoZSBwbG90OyB3aGF0IGFwcGVhciB0byBiZSBwb2ludHMgaW4gdGhlIHBsb3QgYXJlIGFjdHVhbGx5IHBvdGVudGlhbGx5IGh1Z2VcbmNsdXN0ZXJzIG9mIHBvaW50cy4gVG8gY29ycm9ib3JhdGUgdGhpcywgd2UgaGF2ZSB6b29tZWQgaW4gdGhlIHBsb3QgYWJvdmUgYnkgc2V0dGluZyAoY2FyZWZ1bGx5IGNob3NlbilcbnRpbnkgYXhpcyBpbnRlcnZhbHMuIFRoZSBjbHVzdGVyIHNob3duIGJlbG93IGxvb2tzIGxpa2UgYSBzaW5nbGUgcG9pbnQgaW4gdGhlIHBsb3QgYWJvdmUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF8yMDBub2RlX2xhdGVuY2llc196b29tZWQucG5nIiksCiAgICAgICAgICAgIGFsdDogImFsbC1sYXRlbmNpZXMtem9vbWVkIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBwbG90IG9mIGxhdGVuY2llcyBjYW4gd2UgdXNlZCBhcyBhIGJhc2VsaW5lIHRvIGNvbXBhcmUgd2l0aCBvdGhlciByZWxlYXNlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZvbGxvd2luZyBwbG90IHN1bW1hcml6ZXMgYXZlcmFnZSBsYXRlbmNpZXMgdmVyc3VzIG92ZXJhbGwgdGhyb3VnaHB1dHNcbmFjcm9zcyBkaWZmZXJlbnQgbnVtYmVycyBvZiBXZWJTb2NrZXQgY29ubmVjdGlvbnMgdG8gdGhlIG5vZGUgaW50byB3aGljaFxudHJhbnNhY3Rpb25zIGFyZSBiZWluZyBsb2FkZWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9sYXRlbmN5X3Rocm91Z2hwdXQucG5nIiksCiAgICAgICAgICAgIGFsdDogImxhdGVuY3ktdnMtdGhyb3VnaHB1dCIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInByb21ldGhldXMtbWV0cmljcy1vbi10aGUtY2hvc2VuLWV4cGVyaW1lbnQiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb21ldGhldXMtbWV0cmljcy1vbi10aGUtY2hvc2VuLWV4cGVyaW1lbnQiIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBQcm9tZXRoZXVzIE1ldHJpY3Mgb24gdGhlIENob3NlbiBFeHBlcmltZW50IiksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBcyBtZW50aW9uZWQgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZmluZGluZy10aGUtc2F0dXJhdGlvbi1wb2ludCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoImFib3ZlIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIsIHRoZSBjaG9zZW4gZXhwZXJpbWVudCBpcyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInI9MjAwLGM9MiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi5cblRoaXMgc2VjdGlvbiBmdXJ0aGVyIGV4YW1pbmVzIGtleSBtZXRyaWNzIGZvciB0aGlzIGV4cGVyaW1lbnQgZXh0cmFjdGVkIGZyb20gUHJvbWV0aGV1cyBkYXRhLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJtZW1wb29sLXNpemUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21lbXBvb2wtc2l6ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWVtcG9vbCBTaXplIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBtZW1wb29sIHNpemUsIGEgY291bnQgb2YgdGhlIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgaW4gdGhlIG1lbXBvb2wsIHdhcyBzaG93biB0byBiZSBzdGFibGUgYW5kIGhvbW9nZW5lb3VzXG5hdCBhbGwgZnVsbCBub2Rlcy4gSXQgZGlkIG5vdCBleGhpYml0IGFueSB1bmNvbnN0cmFpbmVkIGdyb3d0aC5cblRoZSBwbG90IGJlbG93IHNob3dzIHRoZSBldm9sdXRpb24gb3ZlciB0aW1lIG9mIHRoZSBjdW11bGF0aXZlIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgaW5zaWRlIGFsbCBmdWxsIG5vZGVzJyBtZW1wb29sc1xuYXQgYSBnaXZlbiB0aW1lLlxuVGhlIHR3byBzcGlrZXMgdGhhdCBjYW4gYmUgb2JzZXJ2ZWQgY29ycmVzcG9uZCB0byBhIHBlcmlvZCB3aGVyZSBjb25zZW5zdXMgaW5zdGFuY2VzIHByb2NlZWRlZCBiZXlvbmQgdGhlIGluaXRpYWwgcm91bmRcbmF0IHNvbWUgbm9kZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfbWVtcG9vbF9zaXplLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJtZW1wb29sLWN1bXVsYXRpdmUiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBsb3QgYmVsb3cgc2hvd3MgZXZvbHV0aW9uIG9mIHRoZSBhdmVyYWdlIG92ZXIgYWxsIGZ1bGwgbm9kZXMsIHdoaWNoIG9zY2lsbGF0ZXMgYmV0d2VlbiAxNTAwIGFuZCAyMDAwXG5vdXRzdGFuZGluZyB0cmFuc2FjdGlvbnMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfbWVtcG9vbF9zaXplX2F2Zy5wbmciKSwKICAgICAgICAgICAgYWx0OiAibWVtcG9vbC1hdmciLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBlYWtzIG9ic2VydmVkIGNvaW5jaWRlIHdpdGggdGhlIG1vbWVudHMgd2hlbiBzb21lIG5vZGVzIHByb2NlZWRlZCBiZXlvbmQgdGhlIGluaXRpYWwgcm91bmQgb2YgY29uc2Vuc3VzIChzZWUgYmVsb3cpLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwZWVycyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGVlcnMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUGVlcnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIG51bWJlciBvZiBwZWVycyB3YXMgc3RhYmxlIGF0IGFsbCBub2Rlcy5cbkl0IHdhcyBoaWdoZXIgZm9yIHRoZSBzZWVkIG5vZGVzIChhcm91bmQgMTQwKSB0aGFuIGZvciB0aGUgcmVzdCAoYmV0d2VlbiAyMSBhbmQgNzQpLlxuVGhlIGZhY3QgdGhhdCBub24tc2VlZCBub2RlcyByZWFjaCBtb3JlIHRoYW4gNTAgcGVlcnMgaXMgZHVlIHRvICM5NTQ4LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4vaW1nL3YwMzRfcjIwMGMyX3BlZXJzLnBuZyIpLCBhbHQ6ICJwZWVycyIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2Vuc3VzLXJvdW5kcy1wZXItaGVpZ2h0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb25zZW5zdXMtcm91bmRzLXBlci1oZWlnaHQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29uc2Vuc3VzIFJvdW5kcyBwZXIgSGVpZ2h0IiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk1vc3QgaGVpZ2h0cyB0b29rIGp1c3Qgb25lIHJvdW5kLCBidXQgc29tZSBub2RlcyBuZWVkZWQgdG8gYWR2YW5jZSB0byByb3VuZCAxIGF0IHNvbWUgcG9pbnQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfcm91bmRzLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJyb3VuZHMiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiYmxvY2tzLXByb2R1Y2VkLXBlci1taW51dGUtdHJhbnNhY3Rpb25zLXByb2Nlc3NlZC1wZXItbWludXRlIiwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNibG9ja3MtcHJvZHVjZWQtcGVyLW1pbnV0ZS10cmFuc2FjdGlvbnMtcHJvY2Vzc2VkLXBlci1taW51dGUiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQmxvY2tzIFByb2R1Y2VkIHBlciBNaW51dGUsIFRyYW5zYWN0aW9ucyBQcm9jZXNzZWQgcGVyIE1pbnV0ZSIKICAgICAgICAgICksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgYmxvY2tzIHByb2R1Y2VkIHBlciBtaW51dGUgYXJlIHRoZSBzbG9wZSBvZiB0aGlzIHBsb3QuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfaGVpZ2h0cy5wbmciKSwKICAgICAgICAgICAgYWx0OiAiaGVpZ2h0cyIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdmVyIGEgcGVyaW9kIG9mIDIgbWludXRlcywgdGhlIGhlaWdodCBnb2VzIGZyb20gNTMwIHRvIDU2OS5cblRoaXMgcmVzdWx0cyBpbiBhbiBhdmVyYWdlIG9mIDE5LjUgYmxvY2tzIHByb2R1Y2VkIHBlciBtaW51dGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSB0cmFuc2FjdGlvbnMgcHJvY2Vzc2VkIHBlciBtaW51dGUgYXJlIHRoZSBzbG9wZSBvZiB0aGlzIHBsb3QuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfdG90YWwtdHhzLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJ0b3RhbC10eHMiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT3ZlciBhIHBlcmlvZCBvZiAyIG1pbnV0ZXMsIHRoZSB0b3RhbCBnb2VzIGZyb20gNjQ1MjUgdG8gMTAwMTI1IHRyYW5zYWN0aW9ucyxcbnJlc3VsdGluZyBpbiAxNzgwMCB0cmFuc2FjdGlvbnMgcGVyIG1pbnV0ZS4gSG93ZXZlciwgd2UgY2FuIHNlZSBpbiB0aGUgcGxvdCB0aGF0XG5hbGwgdHJhbnNhY3Rpb25zIGluIHRoZSBsb2FkIGFyZSBwcm9jZXNzZWQgbG9uZyBiZWZvcmUgdGhlIHR3byBtaW51dGVzLlxuSWYgd2UgYWRqdXN0IHRoZSB0aW1lIHdpbmRvdyB3aGVuIHRyYW5zYWN0aW9ucyBhcmUgcHJvY2Vzc2VkIChhcHByb3guIDEwNSBzZWNvbmRzKSxcbndlIG9idGFpbiAyMDM0MyB0cmFuc2FjdGlvbnMgcGVyIG1pbnV0ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAibWVtb3J5LXJlc2lkZW50LXNldC1zaXplIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtZW1vcnktcmVzaWRlbnQtc2V0LXNpemUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWVtb3J5IFJlc2lkZW50IFNldCBTaXplIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlc2lkZW50IFNldCBTaXplIG9mIGFsbCBtb25pdG9yZWQgcHJvY2Vzc2VzIGlzIHBsb3R0ZWQgYmVsb3cuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yMjAwYzJfcnNzLnBuZyIpLCBhbHQ6ICJyc3MiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBhdmVyYWdlIG92ZXIgYWxsIHByb2Nlc3NlcyBvc2NpbGxhdGVzIGFyb3VuZCAxLjIgR2lCIGFuZCBkb2VzIG5vdCBkZW1vbnN0cmF0ZSB1bmNvbnN0cmFpbmVkIGdyb3d0aC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy92MDM0X3IyMDBjMl9yc3NfYXZnLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJyc3MtYXZnIiwKICAgICAgICAgIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNwdS11dGlsaXphdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY3B1LXV0aWxpemF0aW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDUFUgdXRpbGl6YXRpb24iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGJlc3QgbWV0cmljIGZyb20gUHJvbWV0aGV1cyB0byBnYXVnZSBDUFUgdXRpbGl6YXRpb24gaW4gYSBVbml4IG1hY2hpbmUgaXMgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJsb2FkMSIpXSksCiAgICAgICAgX3ZtLl92KCIsXG5hcyBpdCB1c3VhbGx5IGFwcGVhcnMgaW4gdGhlXG4iKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdHV0b3JpYWxzL2xvYWQtYXZlcmFnZS1pbi1saW51eCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigib3V0cHV0IG9mICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInRvcCIpXSksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuL2ltZy92MDM0X3IyMDBjMl9sb2FkMS5wbmciKSwgYWx0OiAibG9hZDEiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGNvbnRhaW5lZCBpbiBtb3N0IGNhc2VzIGJlbG93IDUsIHdoaWNoIGlzIGdlbmVyYWxseSBjb25zaWRlcmVkIGFjY2VwdGFibGUgbG9hZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidGVzdC1yZXN1bHQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Rlc3QtcmVzdWx0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUZXN0IFJlc3VsdCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXN1bHQ6IE4vQSIpXSksCiAgICAgICAgX3ZtLl92KCIgKHYwLjM0LnggaXMgdGhlIGJhc2VsaW5lKSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiRGF0ZTogMjAyMi0xMC0xNCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlZlcnNpb246IDNlYzZlNDI0ZDZhZTRjOTY4NjdjMmRjZjgzMTA1NzIxNTYwNjhiYjYiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJvdGF0aW5nLW5vZGUtdGVzdG5ldCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcm90YXRpbmctbm9kZS10ZXN0bmV0IiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJvdGF0aW5nIE5vZGUgVGVzdG5ldCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGb3IgdGhpcyB0ZXN0bmV0LCB3ZSB3aWxsIHVzZSBhIGxvYWQgdGhhdCBjYW4gc2FmZWx5IGJlIGNvbnNpZGVyZWQgYmVsb3cgdGhlIHNhdHVyYXRpb25cbnBvaW50IGZvciB0aGUgc2l6ZSBvZiB0aGlzIHRlc3RuZXQgKGJldHdlZW4gMTMgYW5kIDM4IGZ1bGwgbm9kZXMpOiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImM9NCxyPTgwMCIpXSksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk4uQi46IFRoZSB2ZXJzaW9uIG9mIFRlbmRlcm1pbnQgdXNlZCBmb3IgdGhlc2UgdGVzdHMgaXMgYWZmZWN0ZWQgYnkgIzk1MzkuXG5Ib3dldmVyLCB0aGUgcmVkdWNlZCBsb2FkIHRoYXQgcmVhY2hlcyB0aGUgbWVtcG9vbHMgaXMgb3J0aG9nb25hbCB0byBmdW5jdGlvbmFsaXR5XG53ZSBhcmUgZm9jdXNpbmcgb24gaGVyZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibGF0ZW5jaWVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNsYXRlbmNpZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExhdGVuY2llcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHBsb3Qgb2YgYWxsIGxhdGVuY2llcyBjYW4gYmUgc2VlbiBpbiB0aGUgZm9sbG93aW5nIHBsb3QuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yb3RhdGluZ19sYXRlbmNpZXMucG5nIiksCiAgICAgICAgICAgIGFsdDogInJvdGF0aW5nLWFsbC1sYXRlbmNpZXMiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgY2FuIG9ic2VydmUgdGhlcmUgYXJlIHNvbWUgdmVyeSBoaWdoIGxhdGVuY2llcywgdG93YXJkcyB0aGUgZW5kIG9mIHRoZSB0ZXN0LlxuVXBvbiBzdXNwaWNpb24gdGhhdCB0aGV5IGFyZSBkdXBsaWNhdGUgdHJhbnNhY3Rpb25zLCB3ZSBleGFtaW5lZCB0aGUgbGF0ZW5jaWVzXG5yYXcgZmlsZSBhbmQgZGlzY292ZXJlZCB0aGVyZSBhcmUgbW9yZSB0aGFuIDEwMEsgZHVwbGljYXRlIHRyYW5zYWN0aW9ucy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGZvbGxvd2luZyBwbG90IHNob3dzIHRoZSBsYXRlbmNpZXMgZmlsZSB3aGVyZSBhbGwgZHVwbGljYXRlIHRyYW5zYWN0aW9ucyBoYXZlXG5iZWVuIHJlbW92ZWQsIGkuZS4sIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBkdXBsaWNhdGUgdHJhbnNhY3Rpb24gaXMga2VwdC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy92MDM0X3JvdGF0aW5nX2xhdGVuY2llc191bmlxLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJyb3RhdGluZy1hbGwtbGF0ZW5jaWVzLXVuaXEiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoaXMgcHJvYmxlbSwgZXhpc3RpbmcgaW4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ2MC4zNC54IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aWxsIG5lZWQgdG8gYmUgYWRkcmVzc2VkLCBwZXJoYXBzIGluIHRoZSBzYW1lIHdheVxud2UgYWRkcmVzc2VkIGl0IHdoZW4gcnVubmluZyB0aGUgMjAwIG5vZGUgdGVzdCB3aXRoIGhpZ2ggbG9hZHM6IGluY3JlYXNpbmcgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2FjaGVfc2l6ZSIpXSksCiAgICAgICAgX3ZtLl92KCJcbmNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9tZXRoZXVzLW1ldHJpY3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb21ldGhldXMtbWV0cmljcyIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcm9tZXRoZXVzIE1ldHJpY3MiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHNldCBvZiBtZXRyaWNzIHNob3duIGhlcmUgYXJlIGxlc3MgdGhhbiBmb3IgdGhlIDIwMCBub2RlIGV4cGVyaW1lbnQuXG5XZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIHRob3NlIGZvciB3aGljaCB0aGUgY2F0Y2gtdXAgcHJvY2VzcyAoYmxvY2tzeW5jKSBtYXkgaGF2ZSBhbiBpbXBhY3QuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImJsb2Nrcy1hbmQtdHJhbnNhY3Rpb25zLXBlci1taW51dGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Jsb2Nrcy1hbmQtdHJhbnNhY3Rpb25zLXBlci1taW51dGUiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmxvY2tzIGFuZCBUcmFuc2FjdGlvbnMgcGVyIG1pbnV0ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJKdXN0IGFzIHNob3duIGZvciB0aGUgMjAwIG5vZGUgdGVzdCwgdGhlIGJsb2NrcyBwcm9kdWNlZCBwZXIgbWludXRlIGFyZSB0aGUgZ3JhZGllbnQgb2YgdGhpcyBwbG90LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL3YwMzRfcm90YXRpbmdfaGVpZ2h0cy5wbmciKSwKICAgICAgICAgICAgYWx0OiAicm90YXRpbmctaGVpZ2h0cyIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdmVyIGEgcGVyaW9kIG9mIDUyMjkgc2Vjb25kcywgdGhlIGhlaWdodCBnb2VzIGZyb20gMiB0byAzNjM4LlxuVGhpcyByZXN1bHRzIGluIGFuIGF2ZXJhZ2Ugb2YgNDEgYmxvY2tzIHByb2R1Y2VkIHBlciBtaW51dGUuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2xsb3dpbmcgcGxvdCBzaG93cyBvbmx5IHRoZSBoZWlnaHRzIHJlcG9ydGVkIGJ5IGVwaGVtZXJhbCBub2Rlc1xuKHdoaWNoIGFyZSBhbHNvIGluY2x1ZGVkIGluIHRoZSBwbG90IGFib3ZlKS4gTm90ZSB0aGF0IHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJoZWlnaHQiKV0pLAogICAgICAgIF92bS5fdigiIG1ldHJpY1xuaXMgb25seSBzaG93ZWQgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigib25jZSB0aGUgbm9kZSBoYXMgc3dpdGNoZWQgdG8gY29uc2Vuc3VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBoZW5jZSB0aGUgZ2Fwc1xud2hlbiBub2RlcyBhcmUga2lsbGVkLCB3aXBlZCBvdXQsIHN0YXJ0ZWQgZnJvbSBzY3JhdGNoLCBhbmQgY2F0Y2hpbmcgdXAuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yb3RhdGluZ19oZWlnaHRzX2VwaGUucG5nIiksCiAgICAgICAgICAgIGFsdDogInJvdGF0aW5nLWhlaWdodHMtZXBoZSIsCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgdHJhbnNhY3Rpb25zIHByb2Nlc3NlZCBwZXIgbWludXRlIGFyZSB0aGUgZ3JhZGllbnQgb2YgdGhpcyBwbG90LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vaW1nL3YwMzRfcm90YXRpbmdfdG90YWwtdHhzLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICJyb3RhdGluZy10b3RhbC10eHMiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBzbWFsbCBsaW5lcyB3ZSBzZWUgcGVyaW9kaWNhbGx5IGNsb3NlIHRvICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigieT0wIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGFyZSB0aGUgdHJhbnNhY3Rpb25zIHRoYXRcbmVwaGVtZXJhbCBub2RlcyBzdGFydCBwcm9jZXNzaW5nIHdoZW4gdGhleSBhcmUgY2F1Z2h0IHVwLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPdmVyIGEgcGVyaW9kIG9mIDUyMjkgbWludXRlcywgdGhlIHRvdGFsIGdvZXMgZnJvbSAwIHRvIDM4NzY5NyB0cmFuc2FjdGlvbnMsXG5yZXN1bHRpbmcgaW4gNDQ0OSB0cmFuc2FjdGlvbnMgcGVyIG1pbnV0ZS4gV2UgY2FuIHNlZSBzb21lIGFicnVwdCBjaGFuZ2VzIGluXG50aGUgcGxvdCdzIGdyYWRpZW50LiBUaGlzIHdpbGwgbmVlZCB0byBiZSBpbnZlc3RpZ2F0ZWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInBlZXJzLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3BlZXJzLTIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIiksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUGVlcnMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBsb3QgYmVsb3cgc2hvd3MgdGhlIGV2b2x1dGlvbiBpbiBwZWVycyB0aHJvdWdob3V0IHRoZSBleHBlcmltZW50LlxuVGhlIHBlcmlvZGljIGNoYW5nZXMgb2JzZXJ2ZWQgYXJlIGR1ZSB0byB0aGUgZXBoZW1lcmFsIG5vZGVzIGJlaW5nIHN0b3BwZWQsXG53aXBlZCBvdXQsIGFuZCByZWNyZWF0ZWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yb3RhdGluZ19wZWVycy5wbmciKSwKICAgICAgICAgICAgYWx0OiAicm90YXRpbmctcGVlcnMiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHZhbGlkYXRvcnMnIHBsb3RzIGFyZSBjb25jZW50cmF0ZWQgYXQgdGhlIGhpZ2hlciBwYXJ0IG9mIHRoZSBncmFwaCwgd2hlcmVhcyB0aGUgZXBoZW1lcmFsIG5vZGVzXG5hcmUgbW9zdGx5IGF0IHRoZSBsb3dlciBwYXJ0LiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJtZW1vcnktcmVzaWRlbnQtc2V0LXNpemUtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbWVtb3J5LXJlc2lkZW50LXNldC1zaXplLTIiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTWVtb3J5IFJlc2lkZW50IFNldCBTaXplIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBhdmVyYWdlIFJlc2lkZW50IFNldCBTaXplIChSU1MpIG92ZXIgYWxsIHByb2Nlc3NlcyBzZWVtcyBzdGFibGUsIGFuZCBzbGlnaHRseSBncm93aW5nIHRvd2FyZCB0aGUgZW5kLlxuVGhpcyBtaWdodCBiZSByZWxhdGVkIHRvIHRoZSBpbmNyZWFzZWQgaW4gdHJhbnNhY3Rpb24gbG9hZCBvYnNlcnZlZCBhYm92ZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuL2ltZy92MDM0X3JvdGF0aW5nX3Jzc19hdmcucG5nIiksCiAgICAgICAgICAgIGFsdDogInJvdGF0aW5nLXJzcy1hdmciLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIG1lbW9yeSB0YWtlbiBieSB0aGUgdmFsaWRhdG9ycyBhbmQgdGhlIGVwaGVtZXJhbCBub2RlcyAod2hlbiB0aGV5IGFyZSB1cCkgaXMgY29tcGFyYWJsZS4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY3B1LXV0aWxpemF0aW9uLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NwdS11dGlsaXphdGlvbi0yIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENQVSB1dGlsaXphdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlIHBsb3Qgc2hvd3MgbWV0cmljICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibG9hZDEiKV0pLAogICAgICAgIF92bS5fdigiIGZvciBhbGwgbm9kZXMuIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi9pbWcvdjAzNF9yb3RhdGluZ19sb2FkMS5wbmciKSwKICAgICAgICAgICAgYWx0OiAicm90YXRpbmctbG9hZDEiLAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgY29udGFpbmVkIHVuZGVyIDUgbW9zdCBvZiB0aGUgdGltZSwgd2hpY2ggaXMgY29uc2lkZXJlZCBub3JtYWwgbG9hZC5cblRoZSBwdXJwbGUgbGluZSwgd2hpY2ggZm9sbG93cyBhIGRpZmZlcmVudCBwYXR0ZXJuIGlzIHRoZSB2YWxpZGF0b3IgcmVjZWl2aW5nIGFsbFxudHJhbnNhY3Rpb25zLCB2aWEgUlBDLCBmcm9tIHRoZSBsb2FkIHJ1bm5lciBwcm9jZXNzLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0ZXN0LXJlc3VsdC0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0ZXN0LXJlc3VsdC0yIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUZXN0IFJlc3VsdCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJSZXN1bHQ6IE4vQSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiRGF0ZTogMjAyMi0xMC0xMCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlZlcnNpb246IGEyOGM5ODdmNWE2MDRmZjY2YjUxNWRkNDE1MjcwMDYzZTZmYjA2OWQiKV0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}