{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-002-ipc-ecosystem.md?vue&type=template&id=06c80045&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/rfc/rfc-002-ipc-ecosystem.md","mtime":1673295761288},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgxIGlkPSJyZmMtMDAyLWludGVycHJvY2Vzcy1jb21tdW5pY2F0aW9uLWlwYy1pbi10ZW5kZXJtaW50Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3JmYy0wMDItaW50ZXJwcm9jZXNzLWNvbW11bmljYXRpb24taXBjLWluLXRlbmRlcm1pbnQiPiM8L2E+IFJGQyAwMDI6IEludGVycHJvY2VzcyBDb21tdW5pY2F0aW9uIChJUEMpIGluIFRlbmRlcm1pbnQ8L2gxPgo8aDIgaWQ9ImNoYW5nZWxvZyI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNjaGFuZ2Vsb2ciPiM8L2E+IENoYW5nZWxvZzwvaDI+Cjx1bD4KPGxpPjA4LVNlcC0yMDIxOiBJbml0aWFsIGRyYWZ0IChAY3JlYWNoYWRhaXIpLjwvbGk+CjwvdWw+CjxoMiBpZD0iYWJzdHJhY3QiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYWJzdHJhY3QiPiM8L2E+IEFic3RyYWN0PC9oMj4KPHA+Q29tbXVuaWNhdGlvbiBpbiBUZW5kZXJtaW50IGFtb25nIGNvbnNlbnN1cyBub2RlcywgYXBwbGljYXRpb25zLCBhbmQgb3BlcmF0b3IKdG9vbHMgYWxsIHVzZSBkaWZmZXJlbnQgbWVzc2FnZSBmb3JtYXRzIGFuZCB0cmFuc3BvcnQgbWVjaGFuaXNtcy4gIEluIHNvbWUKY2FzZXMgdGhlcmUgYXJlIG11bHRpcGxlIG9wdGlvbnMuIEhhdmluZyBhbGwgdGhlc2Ugb3B0aW9ucyBjb21wbGljYXRlcyBib3RoIHRoZQpjb2RlIGFuZCB0aGUgZGV2ZWxvcGVyIGV4cGVyaWVuY2UsIGFuZCBoaWRlcyBidWdzLiBUbyBzdXBwb3J0IGEgbW9yZSByb2J1c3QsCnRydXN0d29ydGh5LCBhbmQgdXNhYmxlIHN5c3RlbSwgd2Ugc2hvdWxkIGRvY3VtZW50IHdoaWNoIGNvbW11bmljYXRpb24gcGF0aHMKYXJlIGVzc2VudGlhbCwgd2hpY2ggY291bGQgYmUgcmVtb3ZlZCBvciByZWR1Y2VkIGluIHNjb3BlLCBhbmQgd2hhdCB3ZSBjYW4KaW1wcm92ZSBmb3IgdGhlIG1vc3QgaW1wb3J0YW50IHVzZSBjYXNlcy48L3A+CjxwPlRoaXMgZG9jdW1lbnQgcHJvcG9zZXMgYSB2YXJpZXR5IG9mIHBvc3NpYmxlIGltcHJvdmVtZW50cyBvZiB2YXJ5aW5nIHNpemUgYW5kCnNjb3BlLiBTcGVjaWZpYyBkZXNpZ24gcHJvcG9zYWxzIHNob3VsZCBnZXQgdGhlaXIgb3duIGRvY3VtZW50YXRpb24uPC9wPgo8aDIgaWQ9ImJhY2tncm91bmQiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYmFja2dyb3VuZCI+IzwvYT4gQmFja2dyb3VuZDwvaDI+CjxwPlRoZSBUZW5kZXJtaW50IHN0YXRlIHJlcGxpY2F0aW9uIGVuZ2luZSBoYXMgYSBjb21wbGV4IElQQyBmb290cHJpbnQuPC9wPgo8b2w+CjxsaT4KPHA+Q29uc2Vuc3VzIG5vZGVzIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciB1c2luZyBhIG5ldHdvcmtlZCBwZWVyLXRvLXBlZXIKbWVzc2FnZS1wYXNzaW5nIHByb3RvY29sLjwvcD4KPC9saT4KPGxpPgo8cD5Db25zZW5zdXMgbm9kZXMgY29tbXVuaWNhdGUgd2l0aCB0aGUgYXBwbGljYXRpb24gd2hvc2Ugc3RhdGUgaXMgYmVpbmcKcmVwbGljYXRlZCB2aWEgdGhlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvdHJlZS9tYWluL3NwZWMvYWJjaSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+QXBwbGljYXRpb24gQmxvY2tDaGFpbiBJbnRlcmZhY2UgKEFCQ0kpPE91dGJvdW5kTGluay8+PC9hPi48L3A+CjwvbGk+CjxsaT4KPHA+Q29uc2Vuc3VzIG5vZGVzIGV4cG9ydCBhIG5ldHdvcmstYWNjZXNzaWJsZSA8YSBocmVmPSJodHRwczovL2RvY3MudGVuZGVybWludC5jb20vdjAuMzQvcnBjLyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+UlBDIHNlcnZpY2U8T3V0Ym91bmRMaW5rLz48L2E+IHRvCnN1cHBvcnQgb3BlcmF0aW9ucyAoYm9vdHN0cmFwcGluZywgZGVidWdnaW5nKSBhbmQgc3luY2hyb25pemF0aW9uIG9mIDxhIGhyZWY9Imh0dHBzOi8vZG9jcy50ZW5kZXJtaW50LmNvbS92MC4zNC90ZW5kZXJtaW50LWNvcmUvbGlnaHQtY2xpZW50Lmh0bWwiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPmxpZ2h0IGNsaWVudHM8T3V0Ym91bmRMaW5rLz48L2E+LgpUaGlzIGludGVyZmFjZSBpcyBhbHNvIHVzZWQgYnkgdGhlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvdHJlZS9tYWluL2NtZC90ZW5kZXJtaW50IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIj48Y29kZT50ZW5kZXJtaW50PC9jb2RlPiBDTEk8T3V0Ym91bmRMaW5rLz48L2E+LjwvcD4KPC9saT4KPGxpPgo8cD5Db25zZW5zdXMgbm9kZXMgZXhwb3J0IGEgZ1JQQyBzZXJ2aWNlIGV4cG9zaW5nIGEgc3Vic2V0IG9mIHRoZSBtZXRob2RzIG9mCnRoZSBSUEMgc2VydmljZSBkZXNjcmliZWQgYnkgKDMpLiBUaGlzIHdhcyBpbnRlbmRlZCB0byBzaW1wbGlmeSB0aGUKaW1wbGVtZW50YXRpb24gb2YgdG9vbHMgdGhhdCBhbHJlYWR5IHVzZSBnUlBDIHRvIGNvbW11bmljYXRlIHdpdGggYW4KYXBwbGljYXRpb24gKHZpYSB0aGUgQ29zbW9zIFNESyksIGFuZCB3YW50ZWQgdG8gYWxzbyB0YWxrIHRvIHRoZSBjb25zZW5zdXMKbm9kZSB3aXRob3V0IGltcGxlbWVudGluZyB5ZXQgYW5vdGhlciBSUEMgcHJvdG9jb2wuPC9wPgo8cD5UaGUgZ1JQQyBpbnRlcmZhY2UgdG8gdGhlIGNvbnNlbnN1cyBub2RlIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIGlzIHNsYXRlZApmb3IgcmVtb3ZhbCBpbiB0aGUgZm9ydGhjb21pbmcgVGVuZGVybWludCB2MC4zNiByZWxlYXNlLjwvcD4KPC9saT4KPGxpPgo8cD5Db25zZW5zdXMgbm9kZXMgbWF5IG9wdGlvbmFsbHkgY29tbXVuaWNhdGUgd2l0aCBhICZxdW90O3JlbW90ZSBzaWduZXImcXVvdDsgdGhhdCBob2xkcwphIHZhbGlkYXRvciBrZXkgYW5kIGNhbiBwcm92aWRlIHB1YmxpYyBrZXlzIGFuZCBzaWduYXR1cmVzIHRvIHRoZSBjb25zZW5zdXMKbm9kZS4gT25lIG9mIHRoZSBzdGF0ZWQgZ29hbHMgb2YgdGhpcyBjb25maWd1cmF0aW9uIGlzIHRvIGFsbG93IHRoZSBzaWduZXIKdG8gYmUgcnVuIG9uIGEgcHJpdmF0ZSBuZXR3b3JrLCBzZXBhcmF0ZSBmcm9tIHRoZSBjb25zZW5zdXMgbm9kZSwgc28gdGhhdCBhCmNvbXByb21pc2Ugb2YgdGhlIGNvbnNlbnN1cyBub2RlIGZyb20gdGhlIHB1YmxpYyBuZXR3b3JrIHdvdWxkIGJlIGxlc3MKbGlrZWx5IHRvIGV4cG9zZSB2YWxpZGF0b3Iga2V5cy48L3A+CjwvbGk+Cjwvb2w+CjxoMiBpZD0iZGlzY3Vzc2lvbi10cmFuc3BvcnQtbWVjaGFuaXNtcyI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNkaXNjdXNzaW9uLXRyYW5zcG9ydC1tZWNoYW5pc21zIj4jPC9hPiBEaXNjdXNzaW9uOiBUcmFuc3BvcnQgTWVjaGFuaXNtczwvaDI+CjxoMyBpZD0icmVtb3RlLXNpZ25lci10cmFuc3BvcnQiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjcmVtb3RlLXNpZ25lci10cmFuc3BvcnQiPiM8L2E+IFJlbW90ZSBTaWduZXIgVHJhbnNwb3J0PC9oMz4KPHA+QSByZW1vdGUgc2lnbmVyIGNvbW11bmljYXRlcyB3aXRoIHRoZSBjb25zZW5zdXMgbm9kZSBpbiBvbmUgb2YgdHdvIHdheXM6PC9wPgo8b2w+CjxsaT4KPHA+JnF1b3Q7UmF3JnF1b3Q7OiBVc2luZyBhIFRDUCBvciBVbml4LWRvbWFpbiBzb2NrZXQgd2hpY2ggY2FycmllcyB2YXJpbnQtcHJlZml4ZWQKcHJvdG9jb2wgYnVmZmVyIG1lc3NhZ2VzLiBJbiB0aGlzIG1vZGUsIHRoZSBjb25zZW5zdXMgbm9kZSBpcyB0aGUgc2VydmVyLAphbmQgdGhlIHJlbW90ZSBzaWduZXIgaXMgdGhlIGNsaWVudC48L3A+CjxwPlRoaXMgbW9kZSBoYXMgYmVlbiBkZXByZWNhdGVkLCBhbmQgaXMgaW50ZW5kZWQgdG8gYmUgcmVtb3ZlZC48L3A+CjwvbGk+CjxsaT4KPHA+Z1JQQzogVGhpcyBtb2RlIHVzZXMgdGhlIHNhbWUgcHJvdG9idWYgbWVzc2FnZXMgYXMgJnF1b3Q7UmF3JnF1b3Q7IG5vZGUsIGJ1dCB1c2VzIGEKc3RhbmRhcmQgZW5jcnlwdGVkIGdSUEMgSFRUUC8yIHN0dWIgYXMgdGhlIHRyYW5zcG9ydC4gSW4gdGhpcyBtb2RlLCB0aGUKcmVtb3RlIHNpZ25lciBpcyB0aGUgc2VydmVyIGFuZCB0aGUgY29uc2Vuc3VzIG5vZGUgaXMgdGhlIGNsaWVudC48L3A+CjwvbGk+Cjwvb2w+CjxoMyBpZD0iYWJjaS10cmFuc3BvcnQiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjYWJjaS10cmFuc3BvcnQiPiM8L2E+IEFCQ0kgVHJhbnNwb3J0PC9oMz4KPHA+SW4gQUJDSSwgdGhlIDxlbT5hcHBsaWNhdGlvbjwvZW0+IGlzIHRoZSBzZXJ2ZXIsIGFuZCB0aGUgVGVuZGVybWludCBjb25zZW5zdXMgZW5naW5lCmlzIHRoZSBjbGllbnQuICBNb3N0IGFwcGxpY2F0aW9ucyBpbXBsZW1lbnQgdGhlIHNlcnZlciB1c2luZyB0aGUgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrLyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+Q29zbW9zIFNESzxPdXRib3VuZExpbmsvPjwvYT4sCndoaWNoIGhhbmRsZXMgbG93LWxldmVsIGRldGFpbHMgb2YgdGhlIEFCQ0kgaW50ZXJhY3Rpb24gYW5kIHByb3ZpZGVzIGEKaGlnaGVyLWxldmVsIGludGVyZmFjZSB0byB0aGUgcmVzdCBvZiB0aGUgYXBwbGljYXRpb24uIFRoZSBTREsgaXMgd3JpdHRlbiBpbiBHby48L3A+CjxwPkJlbmVhdGggdGhlIFNESywgdGhlIGFwcGxpY2F0aW9uIGNvbW11bmljYXRlcyB3aXRoIFRlbmRlcm1pbnQgY29yZSBpbiBvbmUgb2YKdHdvIHdheXM6PC9wPgo8dWw+CjxsaT4KPHA+SW4tcHJvY2VzcyBkaXJlY3QgY2FsbHMgKGZvciBhcHBsaWNhdGlvbnMgd3JpdHRlbiBpbiBHbyBhbmQgY29tcGlsZWQgYWdhaW5zdAp0aGUgVGVuZGVybWludCBjb2RlKS4gIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIGZvciB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgYW4KYXBwbGljYXRpb24gaXMgd3JpdHRlbiBpbiBHbywgdG8gc2F2ZSBvbiB0aGUgb3ZlcmhlYWQgb2YgbWFyc2hhbGluZyBhbmQKdW5tYXJzaGFsaW5nIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgd2l0aGluIHRoZSBzYW1lIHByb2Nlc3M6CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL2FiY2kvY2xpZW50L2xvY2FsX2NsaWVudC5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+PGNvZGU+YWJjaS9jbGllbnQvbG9jYWxfY2xpZW50LmdvPC9jb2RlPjxPdXRib3VuZExpbmsvPjwvYT48L3A+CjwvbGk+CjxsaT4KPHA+QSBjdXN0b20gcmVtb3RlIHByb2NlZHVyZSBwcm90b2NvbCBidWlsdCBvbiB3aXJlLWZvcm1hdCBwcm90b2J1ZiBtZXNzYWdlcwp1c2luZyBhIHNvY2tldCAodGhlICZxdW90O3NvY2tldCBwcm90b2NvbCZxdW90Oyk6IDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvYmxvYi9tYWluL2FiY2kvc2VydmVyL3NvY2tldF9zZXJ2ZXIuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPjxjb2RlPmFiY2kvc2VydmVyL3NvY2tldF9zZXJ2ZXIuZ288L2NvZGU+PE91dGJvdW5kTGluay8+PC9hPjwvcD4KPC9saT4KPC91bD4KPHA+VGhlIFNESyBhbHNvIHByb3ZpZGVzIGEgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L2dpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMvdHgjU2VydmljZVNlcnZlciIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciI+Z1JQQyBzZXJ2aWNlPE91dGJvdW5kTGluay8+PC9hPiBhY2Nlc3NpYmxlIGZyb20gb3V0c2lkZSB0aGUKYXBwbGljYXRpb24sIGFsbG93aW5nIHRyYW5zYWN0aW9ucyB0byBiZSBicm9hZGNhc3QgdG8gdGhlIG5ldHdvcmssIGxvb2sgdXAKdHJhbnNhY3Rpb25zLCBhbmQgc2ltdWxhdGUgdHJhbnNhY3Rpb24gY29zdHMuPC9wPgo8aDMgaWQ9InJwYy10cmFuc3BvcnQiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjcnBjLXRyYW5zcG9ydCI+IzwvYT4gUlBDIFRyYW5zcG9ydDwvaDM+CjxwPlRoZSBjb25zZW5zdXMgbm9kZSBSUEMgc2VydmljZSBhbGxvd3MgY2FsbGVycyB0byBxdWVyeSBjb25zZW5zdXMgcGFyYW1ldGVycwooZ2VuZXNpcyBkYXRhLCB0cmFuc2FjdGlvbnMsIGNvbW1pdHMpLCBub2RlIHN0YXR1cyAobmV0d29yayBpbmZvLCBoZWFsdGgKY2hlY2tzKSwgYXBwbGljYXRpb24gc3RhdGUgKGFiY2lfcXVlcnksIGFiY2lfaW5mbyksIG1lbXBvb2wgc3RhdGUsIGFuZCBvdGhlcgphdHRyaWJ1dGVzIG9mIHRoZSBub2RlIGFuZCBpdHMgYXBwbGljYXRpb24uIFRoZSBzZXJ2aWNlIGFsc28gcHJvdmlkZXMgbWV0aG9kcwphbGxvd2luZyB0cmFuc2FjdGlvbnMgYW5kIGV2aWRlbmNlIHRvIGJlIGluamVjdGVkICgmcXVvdDticm9hZGNhc3QmcXVvdDspIGludG8gdGhlCmJsb2NrY2hhaW4uPC9wPgo8cD5UaGUgUlBDIHNlcnZpY2UgaXMgZXhwb3NlZCBpbiBzZXZlcmFsIHdheXM6PC9wPgo8dWw+CjxsaT4KPHA+SFRUUCBHRVQ6IFF1ZXJpZXMgbWF5IGJlIHNlbnQgYXMgVVJJIHBhcmFtZXRlcnMsIHdpdGggbWV0aG9kIG5hbWVzIGluIHRoZSBwYXRoLjwvcD4KPC9saT4KPGxpPgo8cD5IVFRQIFBPU1Q6IFF1ZXJpZXMgbWF5IGJlIHNlbnQgYXMgSlNPTi1SUEMgcmVxdWVzdCBtZXNzYWdlcyBpbiB0aGUgYm9keSBvZiBhbgpIVFRQIFBPU1QgcmVxdWVzdC4gIFRoZSBzZXJ2ZXIgdXNlcyBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiBvZiBKU09OLVJQQyB0aGF0CmlzIG5vdCBmdWxseSBjb21wYXRpYmxlIHdpdGggdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb24iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPkpTT04tUlBDIDIuMCBzcGVjPE91dGJvdW5kTGluay8+PC9hPiwgYnV0IGhhbmRsZXMKdGhlIGNvbW1vbiBjYXNlcy48L3A+CjwvbGk+CjxsaT4KPHA+V2Vic29ja2V0OiBRdWVyaWVzIG1heSBiZSBzZW50IGFzIEpTT04tUlBDIHJlcXVlc3QgbWVzc2FnZXMgdmlhIGEgd2Vic29ja2V0LgpUaGlzIHRyYW5zcG9ydCB1c2VzIG1vcmUgb3IgbGVzcyB0aGUgc2FtZSBKU09OLVJQQyBwbHVtYmluZyBhcyB0aGUgSFRUUCBQT1NUCmhhbmRsZXIuPC9wPgo8cD5UaGUgd2Vic29ja2V0IGVuZHBvaW50IGFsc28gaW5jbHVkZXMgdGhyZWUgbWV0aG9kcyB0aGF0IGFyZSA8ZW0+b25seTwvZW0+IGV4cG9ydGVkCnZpYSB3ZWJzb2NrZXQsIHdoaWNoIGFwcGVhciB0byBzdXBwb3J0IGV2ZW50IHN1YnNjcmlwdGlvbi48L3A+CjwvbGk+CjxsaT4KPHA+Z1JQQzogQSBzdWJzZXQgb2YgcXVlcmllcyBtYXkgYmUgaXNzdWVkIGluIHByb3RvY29sIGJ1ZmZlciBmb3JtYXQgdG8gdGhlIGdSUEMKaW50ZXJmYWNlIGRlc2NyaWJlZCBhYm92ZSB1bmRlciAoNCkuIEFzIG5vdGVkLCB0aGlzIGVuZHBvaW50IGlzIGRlcHJlY2F0ZWQKYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MC4zNi48L3A+CjwvbGk+CjwvdWw+CjxoMyBpZD0ib3Bwb3J0dW5pdGllcy1mb3Itc2ltcGxpZmljYXRpb24iPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjb3Bwb3J0dW5pdGllcy1mb3Itc2ltcGxpZmljYXRpb24iPiM8L2E+IE9wcG9ydHVuaXRpZXMgZm9yIFNpbXBsaWZpY2F0aW9uPC9oMz4KPHA+PHN0cm9uZz5DbGFpbTo8L3N0cm9uZz4gVGhlcmUgYXJlIHRvbyBtYW55IElQQyBtZWNoYW5pc21zLjwvcD4KPHA+VGhlIHByZXBvbmRlcmFuY2Ugb2YgQUJDSSB1c2FnZSBpcyB2aWEgdGhlIENvc21vcyBTREssIHdoaWNoIG1lYW5zIHRoZQphcHBsaWNhdGlvbiBhbmQgdGhlIGNvbnNlbnN1cyBub2RlIGFyZSBjb21waWxlZCB0b2dldGhlciBpbnRvIGEgc2luZ2xlIGJpbmFyeSwKYW5kIHRoZSBjb25zZW5zdXMgbm9kZSBjYWxscyB0aGUgQUJDSSBtZXRob2RzIG9mIHRoZSBhcHBsaWNhdGlvbiBkaXJlY3RseSBhcyBHbwpmdW5jdGlvbnMuPC9wPgo8cD5XZSBhbHNvIG5lZWQgYSB0cnVlIElQQyB0cmFuc3BvcnQgdG8gc3VwcG9ydCBBQkNJIGFwcGxpY2F0aW9ucyA8ZW0+bm90PC9lbT4gd3JpdHRlbiBpbgpHby4gIFRoZXJlIGFyZSBhbHNvIHNldmVyYWwga25vd24gYXBwbGljYXRpb25zIHdyaXR0ZW4gaW4gUnVzdCwgZm9yIGV4YW1wbGUKKGluY2x1ZGluZyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYW5vbWEvYW5vbWEiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPkFub21hPE91dGJvdW5kTGluay8+PC9hPiwgUGVudW1icmEsCjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vYXNpc3Byb3RvY29sL29hc2lzLWNvcmUiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPk9hc2lzPE91dGJvdW5kTGluay8+PC9hPiwgVHdpbGlnaHQsIGFuZAo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbm9taWMtaW8vbm9taWMiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPk5vbWljPE91dGJvdW5kTGluay8+PC9hPikuIElkZWFsbHkgd2Ugd2lsbCBoYXZlIGF0IG1vc3Qgb25lCnN1Y2ggdHJhbnNwb3J0ICZxdW90O2J1aWx0LWluJnF1b3Q7OiBNb3JlIGVzb3RlcmljIGNhc2VzIGNhbiBiZSBoYW5kbGVkIGJ5IGEgY3VzdG9tIHByb3h5LgpQcmFnbWF0aWNhbGx5LCBnUlBDIGlzIHByb2JhYmx5IHRoZSByaWdodCBjaG9pY2UgaGVyZS48L3A+CjxwPlRoZSBwcmltYXJ5IGNvbnN1bWVycyBvZiB0aGUgbXVsdGktaGVhZGVkICZxdW90O1JQQyBzZXJ2aWNlJnF1b3Q7IHRvZGF5IGFyZSB0aGUgbGlnaHQKY2xpZW50IGFuZCB0aGUgPGNvZGU+dGVuZGVybWludDwvY29kZT4gY29tbWFuZC1saW5lIGNsaWVudC4gVGhlcmUgaXMgcHJvYmFibHkgc29tZSBsb2NhbAp1c2UgdmlhIGN1cmwsIGJ1dCBJIGV4cGVjdCB0aGF0IGlzIG1vc3RseSBhZCBob2MuIEV0aGFuIHJlcG9ydHMgdGhhdCBub2RlcyBhcmUKb2Z0ZW4gY29uZmlndXJlZCB3aXRoIHRoZSBwb3J0cyB0byB0aGUgUlBDIHNlcnZpY2UgYmxvY2tlZCwgd2hpY2ggaXMgZ29vZCBmb3IKc2VjdXJpdHkgYnV0IGNvbXBsaWNhdGVzIHVzZSBieSB0aGUgbGlnaHQgY2xpZW50LjwvcD4KPGgzIGlkPSJjb250ZXh0LXJlbW90ZS1zaWduZXItaXNzdWVzIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI2NvbnRleHQtcmVtb3RlLXNpZ25lci1pc3N1ZXMiPiM8L2E+IENvbnRleHQ6IFJlbW90ZSBTaWduZXIgSXNzdWVzPC9oMz4KPHA+U2luY2UgdGhlIHJlbW90ZSBzaWduZXIgbmVlZHMgYSBzZWN1cmUgY29tbXVuaWNhdGlvbiBjaGFubmVsIHRvIGV4Y2hhbmdlIGtleXMKYW5kIHNpZ25hdHVyZXMsIGFuZCBpcyBleHBlY3RlZCB0byBydW4gdHJ1bHkgcmVtb3RlbHkgZnJvbSB0aGUgbm9kZSAoaS5lLiwgb24gYQpzZXBhcmF0ZSBwaHlzaWNhbCBzZXJ2ZXIpLCB0aGVyZSBpcyBub3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvIGhlcmUuIFdlIHNob3VsZApmaW5pc2ggdGhlIGRlcHJlY2F0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSAmcXVvdDtyYXcmcXVvdDsgc29ja2V0IHByb3RvY29sIGJldHdlZW4gdGhlCmNvbnNlbnN1cyBub2RlIGFuZCByZW1vdGUgc2lnbmVycywgYnV0IHRoZSB1c2Ugb2YgZ1JQQyBpcyBhcHByb3ByaWF0ZS48L3A+CjxwPlRoZSBtYWluIGltcHJvdmVtZW50IHdlIGNhbiBtYWtlIGlzIHRvIHNpbXBsaWZ5IHRoZSBpbXBsZW1lbnRhdGlvbiBxdWl0ZSBhIGJpdCwKb25jZSB3ZSBubyBsb25nZXIgbmVlZCB0byBzdXBwb3J0IGJvdGggJnF1b3Q7cmF3JnF1b3Q7IGFuZCBnUlBDIHRyYW5zcG9ydHMuPC9wPgo8aDMgaWQ9ImNvbnRleHQtYWJjaS1pc3N1ZXMiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjY29udGV4dC1hYmNpLWlzc3VlcyI+IzwvYT4gQ29udGV4dDogQUJDSSBJc3N1ZXM8L2gzPgo8cD5JbiB0aGUgb3JpZ2luYWwgZGVzaWduIG9mIEFCQ0ksIHRoZSBwcmVzdW1wdGlvbiB3YXMgdGhhdCBhbGwgYWNjZXNzIHRvIHRoZQphcHBsaWNhdGlvbiBzaG91bGQgYmUgbWVkaWF0ZWQgYnkgdGhlIGNvbnNlbnN1cyBub2RlLiBUaGUgaWRlYSBpcyB0aGF0IG91dHNpZGUKYWNjZXNzIGNvdWxkIGNoYW5nZSBhcHBsaWNhdGlvbiBzdGF0ZSBhbmQgY29ycnVwdCB0aGUgY29uc2Vuc3VzIHByb2Nlc3MsIHdoaWNoCnJlbGllcyBvbiB0aGUgYXBwbGljYXRpb24gdG8gYmUgZGV0ZXJtaW5pc3RpYy4gT2YgY291cnNlLCBldmVuIHdpdGhvdXQgb3V0c2lkZQphY2Nlc3MgYW4gYXBwbGljYXRpb24gY291bGQgYmVoYXZlIG5vbmRldGVybWluaXN0aWNhbGx5LCBidXQgYWxsb3dpbmcgb3RoZXIKcHJvZ3JhbXMgdG8gc2VuZCBpdCByZXF1ZXN0cyB3YXMgc2VlbiBhcyBjb3VydGluZyB0cm91YmxlLjwvcD4KPHA+Q29udmVyc2VseSwgdXNlcnMgbm90ZWQgdGhhdCBtb3N0IG9mIHRoZSB0aW1lLCB0b29scyB3cml0dGVuIGZvciBhIHBhcnRpY3VsYXIKYXBwbGljYXRpb24gZG9uJ3Qgd2FudCB0byB0YWxrIHRvIHRoZSBjb25zZW5zdXMgbW9kdWxlIGRpcmVjdGx5LiBUaGUKYXBwbGljYXRpb24gJnF1b3Q7b3ducyZxdW90OyB0aGUgc3RhdGUgbWFjaGluZSB0aGUgY29uc2Vuc3VzIGVuZ2luZSBpcyByZXBsaWNhdGluZywgc28KdG9vbHMgdGhhdCBjYXJlIGFib3V0IGFwcGxpY2F0aW9uIHN0YXRlIHNob3VsZCB0YWxrIHRvIHRoZSBhcHBsaWNhdGlvbi4KT3RoZXJ3aXNlLCB0aGV5IHdvdWxkIGhhdmUgdG8gYmFrZSBpbiBrbm93bGVkZ2UgYWJvdXQgVGVuZGVybWludCAoZS5nLiwgaXRzCmludGVyZmFjZXMgYW5kIGRhdGEgc3RydWN0dXJlcykganVzdCBiZWNhdXNlIG9mIHRoZSBtZWRpYXRpb24uPC9wPgo8cD5Gb3IgY2xpZW50cyB0byB0YWxrIGRpcmVjdGx5IHRvIHRoZSBhcHBsaWNhdGlvbiwgaG93ZXZlciwgdGhlcmUgaXMgYW5vdGhlcgpjb25jZXJuOiBUaGUgY29uc2Vuc3VzIG5vZGUgaXMgdGhlIEFCQ0kgPGVtPmNsaWVudDwvZW0+LCBzbyBpdCBpcyBpbmNvbnZlbmllbnQgZm9yIHRoZQphcHBsaWNhdGlvbiB0byAmcXVvdDtwdXNoJnF1b3Q7IHdvcmsgaW50byB0aGUgY29uc2Vuc3VzIG1vZHVsZSB2aWEgQUJDSSBpdHNlbGYuICBUaGUKY3VycmVudCBpbXBsZW1lbnRhdGlvbiB3b3JrcyBhcm91bmQgdGhpcyBieSBjYWxsaW5nIHRoZSBjb25zZW5zdXMgbm9kZSdzIFJQQwpzZXJ2aWNlLCB3aGljaCBleHBvc2VzIGFuIDxjb2RlPkFCQ0lRdWVyeTwvY29kZT4ga2l0Y2hlbi1zaW5rIG1ldGhvZCB0aGF0IGFsbG93cyB0aGUKYXBwbGljYXRpb24gYSB3YXkgdG8gcG9rZSBBQkNJIG1lc3NhZ2VzIGluIHRoZSBvdGhlciBkaXJlY3Rpb24uPC9wPgo8cD5XaXRob3V0IHRoaXMgUlBDIG1ldGhvZCwgeW91IGNvdWxkIHdvcmsgYXJvdW5kIHRoaXMgKGF0IGxlYXN0IGluIHByaW5jaXBsZSkgYnkKaGF2aW5nIHRoZSBjb25zZW5zdXMgbW9kdWxlICZxdW90O3BvbGwmcXVvdDsgdGhlIGFwcGxpY2F0aW9uIGZvciB3b3JrIHRoYXQgbmVlZHMgZG9uZSwKYnV0IHRoYXQgaGFzIHVuc2F0aXNmYWN0b3J5IGltcGxpY2F0aW9ucyBmb3IgcGVyZm9ybWFuY2UgYW5kIHJvYnVzdG5lc3MsIGFzCndlbGwgYXMgYmVpbmcgaGFyZGVyIHRvIHVuZGVyc3RhbmQuPC9wPgo8cD5UaGVyZSBoYXMgYXBwYXJlbnRseSBiZWVuIGRpc2N1c3Npb24gYWJvdXQgdHJ5aW5nIHRvIG1ha2UgYSBtb3JlIGJpZGlyZWN0aW9uYWwKY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoZSBjb25zZW5zdXMgbm9kZSBhbmQgdGhlIGFwcGxpY2F0aW9uLCBidXQgdGhpcyBpc3N1ZQpzZWVtcyB0byBzdGlsbCBiZSB1bnJlc29sdmVkLjwvcD4KPHA+QW5vdGhlciBjb21wbGljYXRpb24gb2YgQUJDSSBpcyB0aGF0IGl0IHJlcXVpcmVzIHRoZSBhcHBsaWNhdGlvbiAoc2VydmVyKSB0bwptYWludGFpbiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdGVuZGVybWludC90ZW5kZXJtaW50L2Jsb2IvbWFpbi9zcGVjL2FiY2kvYWJjaSsrX2Jhc2ljX2NvbmNlcHRzLm1kIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIj5mb3VyIHNlcGFyYXRlIGNvbm5lY3Rpb25zPE91dGJvdW5kTGluay8+PC9hPjogT25lIGZvciAmcXVvdDtjb25zZW5zdXMmcXVvdDsgb3BlcmF0aW9ucwooQmVnaW5CbG9jaywgRW5kQmxvY2ssIERlbGl2ZXJUeCwgQ29tbWl0KSwgb25lIGZvciAmcXVvdDttZW1wb29sJnF1b3Q7IG9wZXJhdGlvbnMsIG9uZQpmb3IgJnF1b3Q7cXVlcnkmcXVvdDsgb3BlcmF0aW9ucywgYW5kIG9uZSBmb3IgJnF1b3Q7c25hcHNob3QmcXVvdDsgKHN0YXRlIHN5bmNocm9uaXphdGlvbikgb3BlcmF0aW9ucy4KVGhlIHJhdGlvbmFsZSBzZWVtcyB0byBoYXZlIGJlZW4gdGhhdCB0aGVzZSBncm91cHMgb2Ygb3BlcmF0aW9ucyBzaG91bGQgYmUgYWJsZQp0byBwcm9jZWVkIGNvbmN1cnJlbnRseSB3aXRoIGVhY2ggb3RoZXIuIEluIHByYWN0aWNlLCBpdCByZXN1bHRzIGluIGEgdmVyeSBjb21wbGV4CnN0YXRlIG1hbmFnZW1lbnQgcHJvYmxlbSB0byBjb29yZGluYXRlIHN0YXRlIHVwZGF0ZXMgYmV0d2VlbiB0aGUgc2VwYXJhdGUgc3RyZWFtcy4KV2hpbGUgYXBwbGljYXRpb24gYXV0aG9ycyBpbiBHbyBhcmUgbW9zdGx5IGluc3VsYXRlZCBmcm9tIHRoYXQgY29tcGxleGl0eSBieSB0aGUKQ29zbW9zIFNESywgdGhlIHBsdW1iaW5nIHRvIG1haW50YWluIHRob3NlIHNlcGFyYXRlIHN0cmVhbXMgaXMgY29tcGxpY2F0ZWQsIGhhcmQKdG8gdW5kZXJzdGFuZCwgYW5kIHdlIHN1c3BlY3QgaXQgY29udGFpbnMgY29uY3VycmVuY3kgYnVncyBhbmQvb3IgbG9jayBjb250ZW50aW9uCmlzc3VlcyBhZmZlY3RpbmcgcGVyZm9ybWFuY2UgdGhhdCBhcmUgc3VidGxlIGFuZCBkaWZmaWN1bHQgdG8gcGluIGRvd24uPC9wPgo8cD5FdmVuIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHNlbWFudGljcyBvZiBhbnkgQUJDSSBvcGVyYXRpb25zLCB0aGlzIGNvZGUgY291bGQgYmUKbWFkZSBzbWFsbGVyIGFuZCBlYXNpZXIgdG8gZGVidWcgYnkgc2VwYXJhdGluZyB0aGUgbWFuYWdlbWVudCBvZiBjb25jdXJyZW5jeQphbmQgbG9ja2luZyBmcm9tIHRoZSBJUEMgdHJhbnNwb3J0OiBJZiBhbGwgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBhcmUgcm91dGVkCnRocm91Z2ggb25lIGNvbm5lY3Rpb24sIHRoZSBzZXJ2ZXIgY2FuIGV4cGxpY2l0bHkgbWFpbnRhaW4gcHJpb3JpdHkgcXVldWVzIGZvcgpyZXF1ZXN0cyBhbmQgcmVzcG9uc2VzLCBhbmQgbWFrZSBsZXNzLWNvbnNlcnZhdGl2ZSBkZWNpc2lvbnMgYWJvdXQgd2hlbiBsb2NrcwphcmUgKG9yIGFyZW4ndCkgcmVxdWlyZWQgdG8gc3luY2hyb25pemUgc3RhdGUgYWNjZXNzLiBXaXRoIGluZGVwZW5kZW50IHF1ZXVlcywKdGhlIHNlcnZlciBtdXN0IGxvY2sgY29uc2VydmF0aXZlbHksIGFuZCBubyBvcHRpbWlzdGljIHNjaGVkdWxpbmcgaXMgcHJhY3RpY2FsLjwvcD4KPHA+VGhpcyB3b3VsZCBiZSBhIHRlZGlvdXMgaW1wbGVtZW50YXRpb24gY2hhbmdlLCBidXQgc2hvdWxkIGJlIGFjaGlldmFibGUgd2l0aG91dApicmVha2luZyBhbnkgb2YgdGhlIGV4aXN0aW5nIGludGVyZmFjZXMuIE1vcmUgaW1wb3J0YW50bHksIGl0IGNvdWxkIHBvdGVudGlhbGx5CmFkZHJlc3MgYSBsb3Qgb2YgZGlmZmljdWx0IGNvbmN1cnJlbmN5IGFuZCBwZXJmb3JtYW5jZSBwcm9ibGVtcyB3ZSBjdXJyZW50bHkKc2VlIGFuZWNkb3RhbGx5IGJ1dCBoYXZlIGRpZmZpY3VsdGx5IGlzb2xhdGluZyBiZWNhdXNlIG9mIGhvdyBpbnRlcnR3aW5lZCB0aGVzZQpzZXBhcmF0ZSBtZXNzYWdlIHN0cmVhbXMgYXJlIGF0IHJ1bnRpbWUuPC9wPgo8cD5UT0RPOiBJbXBhY3Qgb2YgQUJDSSsrIGZvciB0aGlzIHRvcGljPzwvcD4KPGgzIGlkPSJjb250ZXh0LXJwYy1pc3N1ZXMiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjY29udGV4dC1ycGMtaXNzdWVzIj4jPC9hPiBDb250ZXh0OiBSUEMgSXNzdWVzPC9oMz4KPHA+VGhlIFJQQyBzeXN0ZW0gc2VydmVzIHNldmVyYWwgbWFzdGVycywgYW5kIGhhcyBhIGNvbXBsZXggc3VyZmFjZSBhcmVhLiBJCmJlbGlldmUgdGhlcmUgYXJlIHNvbWUgaW1wcm92ZW1lbnRzIHRoYXQgY2FuIGJlIGV4cG9zZWQgYnkgc2VwYXJhdGluZyBzb21lIG9mCnRoZXNlIGNvbmNlcm5zLjwvcD4KPHA+VGhlIFRlbmRlcm1pbnQgbGlnaHQgY2xpZW50IGN1cnJlbnRseSB1c2VzIHRoZSBSUEMgc2VydmljZSB0byBsb29rIHVwIGJsb2NrcwphbmQgdHJhbnNhY3Rpb25zLCBhbmQgdG8gZm9yd2FyZCBBQkNJIHF1ZXJpZXMgdG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIGxpZ2h0CmNsaWVudCBwcm94eSB1c2VzIHRoZSBSUEMgc2VydmljZSB2aWEgYSB3ZWJzb2NrZXQuIFRoZSBDb3Ntb3MgSUJDIHJlbGF5ZXIgYWxzbwp1c2VzIHRoZSBSUEMgc2VydmljZSB2aWEgd2Vic29ja2V0IHRvIHdhdGNoIGZvciB0cmFuc2FjdGlvbiBldmVudHMsIGFuZCB1c2VzCnRoZSA8Y29kZT5BQkNJUXVlcnk8L2NvZGU+IG1ldGhvZCB0byBmZXRjaCBpbmZvcm1hdGlvbiBhbmQgcHJvb2ZzIGZvciBwb3N0ZWQgdHJhbnNhY3Rpb25zLjwvcD4KPHA+U29tZSB3b3JrIGlzIGFscmVhZHkgdW5kZXJ3YXkgdG93YXJkIHVzaW5nIFAyUCBtZXNzYWdlIHBhc3NpbmcgcmF0aGVyIHRoYW4gUlBDCnRvIHN5bmNocm9uaXplIGxpZ2h0IGNsaWVudCBzdGF0ZSB3aXRoIHRoZSByZXN0IG9mIHRoZSBuZXR3b3JrLiAgSUJDIHJlbGF5aW5nLApob3dldmVyLCByZXF1aXJlcyBhY2Nlc3MgdG8gdGhlIGV2ZW50IHN5c3RlbSwgd2hpY2ggaXMgY3VycmVudGx5IG5vdCBhY2Nlc3NpYmxlCmV4Y2VwdCB2aWEgdGhlIFJQQyBpbnRlcmZhY2UuIEV2ZW50IHN1YnNjcmlwdGlvbiA8ZW0+Y291bGQ8L2VtPiBiZSBleHBvc2VkIHZpYSBQMlAsCmJ1dCB0aGF0IGlzIGEgbGFyZ2VyIHByb2plY3Qgc2luY2UgaXQgYWRkcyBQMlAgY29tbXVuaWNhdGlvbiBsb2FkLCBhbmQgbWlnaHQKdGh1cyBoYXZlIGFuIGltcGFjdCBvbiB0aGUgcGVyZm9ybWFuY2Ugb2YgY29uc2Vuc3VzLjwvcD4KPHA+SWYgZXZlbnQgc3Vic2NyaXB0aW9uIGNhbiBiZSBtb3ZlZCBpbnRvIHRoZSBQMlAgbmV0d29yaywgd2UgY291bGQgZW50aXJlbHkKcmVtb3ZlIHRoZSB3ZWJzb2NrZXQgdHJhbnNwb3J0LCBldmVuIGZvciBjbGllbnRzIHRoYXQgc3RpbGwgbmVlZCBhY2Nlc3MgdG8gdGhlClJQQyBzZXJ2aWNlLiBVbnRpbCB0aGVuLCB3ZSBtYXkgc3RpbGwgYmUgYWJsZSB0byByZWR1Y2UgdGhlIHNjb3BlIG9mIHRoZQp3ZWJzb2NrZXQgZW5kcG9pbnQgdG8gPGVtPm9ubHk8L2VtPiBldmVudCBzdWJzY3JpcHRpb24sIGJ5IG1vdmluZyB1c2VzIG9mIHRoZSBSUEMKc2VydmVyIGFzIGEgcHJveHkgdG8gQUJDSSBvdmVyIHRvIHRoZSBnUlBDIGludGVyZmFjZS48L3A+CjxwPkhhdmluZyB0aGUgUlBDIHNlcnZlciBzdGlsbCBtYWtlcyBzZW5zZSBmb3IgbG9jYWwgYm9vdHN0cmFwcGluZyBhbmQgb3BlcmF0aW9ucywKYnV0IGNhbiBiZSBmdXJ0aGVyIHNpbXBsaWZpZWQuIEhlcmUgYXJlIHNvbWUgc3BlY2lmaWMgcHJvcG9zYWxzOjwvcD4KPHVsPgo8bGk+CjxwPlJlbW92ZSB0aGUgSFRUUCBHRVQgaW50ZXJmYWNlIGVudGlyZWx5LjwvcD4KPC9saT4KPGxpPgo8cD5TaW1wbGlmeSBKU09OLVJQQyBwbHVtYmluZyB0byByZW1vdmUgdW5uZWNlc3NhcnkgcmVmbGVjdGlvbiBhbmQgd3JhcHBpbmcuPC9wPgo8L2xpPgo8bGk+CjxwPlJlbW92ZSB0aGUgZ1JQQyBpbnRlcmZhY2UgKHRoaXMgaXMgYWxyZWFkeSBwbGFubmVkIGZvciB2MC4zNikuPC9wPgo8L2xpPgo8bGk+CjxwPlNlcGFyYXRlIHRoZSB3ZWJzb2NrZXQgaW50ZXJmYWNlIGZyb20gdGhlIHJlc3Qgb2YgdGhlIFJQQyBzZXJ2aWNlLCBhbmQKcmVzdHJpY3QgaXQgdG8gb25seSBldmVudCBzdWJzY3JpcHRpb24uPC9wPgo8cD5FdmVudHVhbGx5IHdlIHNob3VsZCB0cnkgdG8gZW1vdmUgdGhlIHdlYnNvY2tldCBpbnRlcmZhY2UgZW50aXJlbHksIGJ1dCB3ZQp3aWxsIG5lZWQgdG8gcmV2aXNpdCB0aGF0IChwcm9iYWJseSBpbiBhIG5ldyBSRkMpIG9uY2Ugd2UndmUgZG9uZSBzb21lIG9mIHRoZQplYXNpZXIgdGhpbmdzLjwvcD4KPC9saT4KPC91bD4KPHA+VGhlc2UgY2hhbmdlcyB3b3VsZCBwcmVzZXJ2ZSB0aGUgYWJpbGl0eSBvZiBvcGVyYXRvcnMgdG8gaXNzdWUgcXVlcmllcyB3aXRoCmN1cmwgKGJ1dCB3b3VsZCByZXF1aXJlIHVzaW5nIEpTT04tUlBDIGluc3RlYWQgb2YgVVJJIHBhcmFtZXRlcnMpLiBUaGF0IHdvdWxkCmJlIGEgbGl0dGxlIGxlc3MgdXNlci1mcmllbmRseSwgYnV0IGZvciBhIHVzZSBjYXNlIHRoYXQgc2hvdWxkIG5vdCBiZSB0aGF0CnByZXZhbGVudC48L3A+CjxwPlRoZXNlIGNoYW5nZXMgd291bGQgYWxzbyBwcmVzZXJ2ZSBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgSlNPTi1SUEMgYmFzZWQKY29kZSBwYXRocyBsaWtlIHRoZSA8Y29kZT50ZW5kZXJtaW50PC9jb2RlPiBDTEkgYW5kIHRoZSBsaWdodCBjbGllbnQgKGV2ZW4gYWhlYWQgb2YKZnVydGhlciB3b3JrIHRvIHJlbW92ZSB0aGF0IGRlcGVuZGVuY3kpLjwvcD4KPHA+PHN0cm9uZz5EZXNpZ24gZ29hbDo8L3N0cm9uZz4gQW4gb3BlcmF0b3Igc2hvdWxkIGJlIGFibGUgdG8gZGlzYWJsZSBub24tbG9jYWwgYWNjZXNzIHRvIHRoZQpSUEMgc2VydmVyIG9uIGFueSBub2RlIGluIHRoZSBuZXR3b3JrIHdpdGhvdXQgaW1wYWlyaW5nIHRoZSBhYmlsaXR5IG9mIHRoZQpuZXR3b3JrIHRvIGZ1bmN0aW9uIGZvciBzZXJ2aWNlIG9mIHN0YXRlIHJlcGxpY2F0aW9uLCBpbmNsdWRpbmcgbGlnaHQgY2xpZW50cy48L3A+CjxwPjxzdHJvbmc+RGVzaWduIHByaW5jaXBsZTo8L3N0cm9uZz4gQWxsIGNvbW11bmljYXRpb24gcmVxdWlyZWQgdG8gaW1wbGVtZW50IGFuZCBtb25pdG9yIHRoZQpjb25zZW5zdXMgbmV0d29yayBzaG91bGQgdXNlIFAyUCwgaW5jbHVkaW5nIHRoZSB2YXJpb3VzIHN5bmNocm9uaXphdGlvbnMuPC9wPgo8aDMgaWQ9Im9wdGlvbnMtZm9yLWFiY2ktdHJhbnNwb3J0Ij48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI29wdGlvbnMtZm9yLWFiY2ktdHJhbnNwb3J0Ij4jPC9hPiBPcHRpb25zIGZvciBBQkNJIFRyYW5zcG9ydDwvaDM+CjxwPlRoZSBtYWpvcml0eSBvZiBjdXJyZW50IHVzYWdlIGlzIGluIEdvLCBhbmQgdGhlIG1ham9yaXR5IG9mIHRoYXQgaXMgbWVkaWF0ZWQgYnkKdGhlIENvc21vcyBTREssIHdoaWNoIHVzZXMgdGhlICZxdW90O2RpcmVjdCBjYWxsJnF1b3Q7IGludGVyZmFjZS4gVGhlcmUgaXMgcHJvYmFibHkgc29tZQpvcHBvcnR1bml0eSB0byBjbGVhbiB1cCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhhdCBjb2RlLCBub3RhYmx5IGJ5IGludmVydGluZwp3aGljaCBpbnRlcmZhY2UgaXMgYXQgdGhlICZxdW90O3RvcCZxdW90OyBvZiB0aGUgYWJzdHJhY3Rpb24gc3RhY2sgKGN1cnJlbnRseSBpdCBhY3RzCmxpa2UgYW4gUlBDIGludGVyZmFjZSwgYW5kIGVzY2FwZS1oYXRjaGVzIGludG8gdGhlIGRpcmVjdCBjYWxsKS4gSG93ZXZlciwgdGhpcwpnZW5lcmFsIGFwcHJvYWNoIHdvcmtzIGZpbmUgYW5kIGRvZXNuJ3QgbmVlZCB0byBiZSBmdW5kYW1lbnRhbGx5IGNoYW5nZWQuPC9wPgo8cD5Gb3IgYXBwbGljYXRpb25zIDxlbT5ub3Q8L2VtPiB3cml0dGVuIGluIEdvLCB0aGUgdHdvIHJlbWFpbmluZyBvcHRpb25zIGFyZSB0aGUKJnF1b3Q7c29ja2V0JnF1b3Q7IHByb3RvY29sIChhbm90aGVyIHZhcmlhdGlvbiBvbiB2YXJpbnQtcHJlZml4ZWQgcHJvdG9idWYgbWVzc2FnZXMgb3ZlcgphbiB1bnN0cnVjdHVyZWQgc3RyZWFtKSBhbmQgZ1JQQy4gSXQgd291bGQgYmUgbmljZSBpZiB3ZSBjb3VsZCBnZXQgcmlkIG9mIG9uZQpvZiB0aGVzZSB0byByZWR1Y2UgKHVubmVlZGVkPykgb3B0aW9uYWxpdHkuPC9wPgo8cD5TaW5jZSBib3RoIHRoZSBzb2NrZXQgcHJvdG9jb2wgYW5kIGdSUEMgZGVwZW5kIG9uIHByb3RvY29sIGJ1ZmZlcnMsIHRoZQomcXVvdDtzb2NrZXQmcXVvdDsgcHJvdG9jb2wgaXMgdGhlIG1vc3Qgb2J2aW91cyBjaG9pY2UgdG8gcmVtb3ZlLiBXaGlsZSBnUlBDIGlzIG1vcmUKY29tcGxleCwgdGhlIHNldCBvZiBsYW5ndWFnZXMgdGhhdCA8ZW0+aGF2ZTwvZW0+IHByb3RvYnVmIHN1cHBvcnQgYnV0IDxlbT5sYWNrPC9lbT4gZ1JQQwpzdXBwb3J0IGlzIHNtYWxsLiBNb3Jlb3ZlciwgZ1JQQyBpcyBhbHJlYWR5IHdpZGVseSB1c2VkIGluIHRoZSByZXN0IG9mIHRoZQplY29zeXN0ZW0gKGluY2x1ZGluZyB0aGUgQ29zbW9zIFNESykuPC9wPgo8cD5JZiBzb21lIHVzZSBjYXNlIGRpZCBhcmlzZSBsYXRlciB0aGF0IGNhbid0IHdvcmsgd2l0aCBnUlBDLCBpdCB3b3VsZCBub3QgYmUgdG9vCmRpZmZpY3VsdCBmb3IgdGhhdCBhcHBsaWNhdGlvbiBhdXRob3IgdG8gd3JpdGUgYSBsaXR0bGUgcHJveHkgKGluIEdvKSB0aGF0CmJyaWRnZXMgdGhlIGNvbnZlbmllbnQgU0RLIEFQSXMgaW50byBhIHNpbXBsZXIgcHJvdG9jb2wgdGhhbiBnUlBDLjwvcD4KPHA+PHN0cm9uZz5EZXNpZ24gcHJpbmNpcGxlOjwvc3Ryb25nPiBJdCBpcyBiZXR0ZXIgZm9yIGFuIHVuY29tbW9uIHNwZWNpYWwgY2FzZSB0byBjYXJyeSB0aGUKYnVyZGVucyBvZiBpdHMgc3BlY2lhbG5lc3MsIHRoYW4gdG8gYmFrZSBhbiBlc2NhcGUgaGF0Y2ggaW50byB0aGUgaW5mcmFzdHJ1Y3R1cmUuPC9wPgo8cD48c3Ryb25nPlJlY29tbWVuZGF0aW9uOjwvc3Ryb25nPiBXZSBzaG91bGQgZGVwcmVjYXRlIGFuZCByZW1vdmUgdGhlIHNvY2tldCBwcm90b2NvbC48L3A+CjxoMyBpZD0ib3B0aW9ucy1mb3ItcnBjLXRyYW5zcG9ydCI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiNvcHRpb25zLWZvci1ycGMtdHJhbnNwb3J0Ij4jPC9hPiBPcHRpb25zIGZvciBSUEMgVHJhbnNwb3J0PC9oMz4KPHA+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9ibG9iL21haW4vZG9jcy9hcmNoaXRlY3R1cmUvYWRyLTA1Ny1SUEMubWQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiPkFEUiAwNTc8T3V0Ym91bmRMaW5rLz48L2E+IHByb3Bvc2VzIHVzaW5nIGdSUEMgZm9yIHRoZSBUZW5kZXJtaW50IFJQQyBpbXBsZW1lbnRhdGlvbi4KVGhpcyBpcyBzdGlsbCBwb3NzaWJsZSwgYnV0IGlmIHdlIGFyZSBhYmxlIHRvIHNpbXBsaWZ5IGFuZCBkZWNvdXBsZSB0aGUKY29uY2VybnMgYXMgZGVzY3JpYmVkIGFib3ZlLCBJIGRvIG5vdCB0aGluayBpdCBzaG91bGQgYmUgbmVjZXNzYXJ5LjwvcD4KPHA+V2hpbGUgSlNPTi1SUEMgaXMgbm90IHRoZSBiZXN0IHBvc3NpYmxlIFJQQyBwcm90b2NvbCBmb3IgYWxsIHNpdHVhdGlvbnMsIGl0IGhhcwpzb21lIGFkdmFudGFnZXMgb3ZlciBnUlBDIGZvciBvdXIgZG9tYWluLiBTcGVjaWZpY2FsbHk6PC9wPgo8dWw+CjxsaT4KPHA+SXQgaXMgZWFzeSB0byBjYWxsIEpTT04tUlBDIG1hbnVhbGx5IGZyb20gdGhlIGNvbW1hbmQtbGluZSwgd2hpY2ggaGVscHMgd2l0aAphIGNvbW1vbiBjb25jZXJuIGZvciB0aGUgUlBDIHNlcnZpY2UsIGxvY2FsIGRlYnVnZ2luZyBhbmQgb3BlcmF0aW9ucy48L3A+CjxwPlJlbGF0ZWRseTogSlNPTiBpcyByZWxhdGl2ZWx5IGVhc3kgZm9yIGh1bWFucyB0byByZWFkIGFuZCB3cml0ZSwgYW5kIGl0IGNhbgpiZSBlYXNpbHkgY29waWVkIGFuZCBwYXN0ZWQgdG8gc2hhcmUgc2FtcGxlIHF1ZXJpZXMgYW5kIGRlYnVnZ2luZyByZXN1bHRzIGluCmNoYXQsIGlzc3VlIGNvbW1lbnRzLCBhbmQgc28gb24uIElkZWFsbHksIHRoZSBSUEMgc2VydmljZSB3aWxsIG5vdCBiZSB1c2VkCmZvciBhY3Rpdml0aWVzIHdoZXJlIHRoZSBjb3N0cyBvZiBhIHRleHQgcHJvdG9jb2wgYXJlIGltcG9ydGFudCBjb21wYXJlZCB0bwppdHMgbGVnaWJpbGl0eSBhbmQgbWFudWFsIHVzYWJpbGl0eSBiZW5lZml0cy48L3A+CjwvbGk+CjxsaT4KPHA+Z1JQQyBoYXMgYW4gZW5vcm1vdXMgZGVwZW5kZW5jeSBmb290cHJpbnQgZm9yIGJvdGggY2xpZW50cyBhbmQgc2VydmVycywgYW5kCm1hbnkgb2YgdGhlIGZlYXR1cmVzIGl0IHByb3ZpZGVzIHRvIHN1cHBvcnQgc2VjdXJpdHkgYW5kIHBlcmZvcm1hbmNlCihlbmNyeXB0aW9uLCBjb21wcmVzc2lvbiwgc3RyZWFtaW5nLCBldGMuKSBhcmUgbW9zdGx5IGlycmVsZXZhbnQgdG8gbG9jYWwKdXNlLiBUZW5kZXJtaW50IGFscmVhZHkgbmVlZHMgdG8gaW5jbHVkZSBhIGdSUEMgY2xpZW50IGZvciB0aGUgcmVtb3RlIHNpZ25lciwKYnV0IGlmIHdlIGNhbiBhdm9pZCB0aGUgbmVlZCBmb3IgYSA8ZW0+Y2xpZW50PC9lbT4gdG8gZGVwZW5kIG9uIGdSUEMsIHRoYXQgaXMgYSB3aW4KZm9yIHVzYWJpbGl0eS48L3A+CjwvbGk+CjxsaT4KPHA+SWYgd2UgaW50ZW5kIHRvIG1pZ3JhdGUgbGlnaHQgY2xpZW50cyBvZmYgUlBDIHRvIHVzZSBQMlAgZW50aXJlbHksIHRoZXJlIGlzCm5vIGFkdmFudGFnZSB0byBmb3JjaW5nIGEgdGVtcG9yYXJ5IG1pZ3JhdGlvbiB0byBnUlBDIGFsb25nIHRoZSB3YXk7IGFuZCBvbmNlCnRoZSBsaWdodCBjbGllbnQgaXMgbm90IGRlcGVuZGVudCBvbiB0aGUgUlBDIHNlcnZpY2UsIHRoZSBlZmZpY2llbmN5IG9mIHRoZQpwcm90b2NvbCBpcyBtdWNoIGxlc3MgaW1wb3J0YW50LjwvcD4KPC9saT4KPGxpPgo8cD5XZSBjYW4gc3RpbGwgZ2V0IHRoZSBiZW5lZml0cyBvZiBnZW5lcmF0ZWQgZGF0YSB0eXBlcyB1c2luZyBwcm90b2NvbCBidWZmZXJzLCBldmVuCndpdGhvdXQgdXNpbmcgZ1JQQzo8L3A+Cjx1bD4KPGxpPgo8cD5Qcm90b2J1ZiBkZWZpbmVzIGEgc3RhbmRhcmQgSlNPTiBlbmNvZGluZyBmb3IgYWxsIG1lc3NhZ2UgdHlwZXMgc28KbGFuZ3VhZ2VzIHdpdGggcHJvdG9idWYgc3VwcG9ydCBkbyBub3QgbmVlZCB0byB3b3JyeSBhYm91dCB0eXBlIG1hcHBpbmcKb2RkaXRpZXMuPC9wPgo8L2xpPgo8bGk+CjxwPlVzaW5nIEpTT04gbWVhbnMgdGhhdCBldmVuIGxhbmd1YWdlcyA8ZW0+d2l0aG91dDwvZW0+IGdvb2QgcHJvdG9idWYgc3VwcG9ydCBjYW4KaW1wbGVtZW50IHRoZSBwcm90b2NvbCB3aXRoIGEgYml0IG1vcmUgd29yaywgYW5kIEkgZXhwZWN0IHRoaXMgc2l0dWF0aW9uIHRvCmJlIHJhcmUuPC9wPgo8L2xpPgo8L3VsPgo8L2xpPgo8L3VsPgo8cD5FdmVuIGlmIGEgbGFuZ3VhZ2UgbGFja3MgYSBnb29kIHN0YW5kYXJkIEpTT04tUlBDIG1lY2hhbmlzbSwgdGhlIHByb3RvY29sIGlzCmxpZ2h0d2VpZ2h0IGFuZCBjYW4gYmUgaW1wbGVtZW50ZWQgYnkgc2ltcGxlIHNlbmQvcmVjZWl2ZSBvdmVyIFRDUCBvcgpVbml4LWRvbWFpbiBzb2NrZXRzIHdpdGggbm8gbmVlZCBmb3IgY29kZSBnZW5lcmF0aW9uLCBlbmNyeXB0aW9uLCBldGMuIGdSUEMKdXNlcyBhIGNvbXBsZXggSFRUUC8yIGJhc2VkIHRyYW5zcG9ydCB0aGF0IGlzIG5vdCBlYXNpbHkgcmVwbGljYXRlZC48L3A+CjxoMyBpZD0iZnV0dXJlLXdvcmsiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjZnV0dXJlLXdvcmsiPiM8L2E+IEZ1dHVyZSBXb3JrPC9oMz4KPHA+VGhlIGJhY2tncm91bmQgYW5kIHByb3Bvc2FscyBza2V0Y2hlZCBhYm92ZSBmb2N1cyBvbiB0aGUgZXhpc3Rpbmcgc3RydWN0dXJlIG9mClRlbmRlcm1pbnQgYW5kIGltcHJvdmVtZW50cyB3ZSBjYW4gbWFrZSBpbiB0aGUgc2hvcnQgdGVybS4gSXQgaXMgd29ydGh3aGlsZSB0bwphbHNvIGNvbnNpZGVyIG9wdGlvbnMgZm9yIGxvbmdlci10ZXJtIGJyb2FkZXIgY2hhbmdlcyB0byB0aGUgSVBDIGVjb3N5c3RlbS4KVGhlIGZvbGxvd2luZyBvdXRsaW5lcyBzb21lIGlkZWFzIGF0IGEgaGlnaCBsZXZlbDo8L3A+Cjx1bD4KPGxpPgo8cD48c3Ryb25nPkNvbnNlbnN1cyBzZXJ2aWNlOjwvc3Ryb25nPiBUb2RheSwgdGhlIGFwcGxpY2F0aW9uIGFuZCB0aGUgY29uc2Vuc3VzIG5vZGUgYXJlCm5vbWluYWxseSBjb25uZWN0ZWQgb25seSB2aWEgQUJDSS4gVGVuZGVybWludCB3YXMgb3JpZ2luYWxseSBkZXNpZ25lZCB3aXRoCnRoZSBhc3N1bXB0aW9uIHRoYXQgYWxsIGNvbW11bmljYXRpb24gd2l0aCB0aGUgYXBwbGljYXRpb24gc2hvdWxkIGJlIG1lZGlhdGVkCmJ5IHRoZSBjb25zZW5zdXMgbm9kZS4gIEJhc2VkIG9uIGZ1cnRoZXIgZXhwZXJpZW5jZSwgaG93ZXZlciwgdGhlIGRlc2lnbiBnb2FsCmlzIG5vdyB0aGF0IHRoZSA8ZW0+YXBwbGljYXRpb248L2VtPiBzaG91bGQgYmUgdGhlIG1lZGlhdG9yIG9mIGFwcGxpY2F0aW9uIHN0YXRlLjwvcD4KPHA+QXMgbm90ZWQgYWJvdmUsIGhvd2V2ZXIsIEFCQ0kgaXMgYSBjbGllbnQvc2VydmVyIHByb3RvY29sLCB3aXRoIHRoZQphcHBsaWNhdGlvbiBhcyB0aGUgc2VydmVyLiBGb3Igb3V0c2lkZSBjbGllbnRzIHRoYXQgdHVybnMgb3V0IHRvIGhhdmUgYmVlbiBhCmdvb2QgY2hvaWNlLCBidXQgaXQgY29tcGxpY2F0ZXMgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBhcHBsaWNhdGlvbiBhbmQKdGhlIGNvbnNlbnN1cyBub2RlOiBQcmV2aW91c2x5IHRyYW5zYWN0aW9ucyB3ZXJlIGVudGVyZWQgdmlhIHRoZSBub2RlLCBub3cKdGhleSBhcmUgZW50ZXJlZCB2aWEgdGhlIGFwcC48L3A+CjxwPldlIGhhdmUgd29ya2VkIGFyb3VuZCB0aGlzIGJ5IHVzaW5nIHRoZSBUZW5kZXJtaW50IFJQQyBzZXJ2aWNlIHRvIGdpdmUgdGhlCmFwcGxpY2F0aW9uIGEgJnF1b3Q7YmFjayBjaGFubmVsJnF1b3Q7IHRvIHRoZSBjb25zZW5zdXMgbm9kZSwgc28gdGhhdCBpdCBjYW4gcHVzaAp0cmFuc2FjdGlvbnMgYmFjayBpbnRvIHRoZSBjb25zZW5zdXMgbmV0d29yay4gQnV0IHRoZSBSUEMgc2VydmljZSBleHBvc2VzIGEKbG90IG9mIG90aGVyIGZ1bmN0aW9uYWxpdHksIHRvbywgaW5jbHVkaW5nIGV2ZW50IHN1YnNjcmlwdGlvbiwgYmxvY2sgYW5kCnRyYW5zYWN0aW9uIHF1ZXJpZXMsIGFuZCBhIGxvdCBvZiBub2RlIHN0YXR1cyBpbmZvcm1hdGlvbi48L3A+CjxwPkV2ZW4gaWYgd2UgY2FuJ3QgZWFzaWx5ICZxdW90O2ZpeCZxdW90OyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIEFCQ0kgcmVsYXRpb25zaGlwLCB3ZQpjb3VsZCBpbXByb3ZlIGlzb2xhdGlvbiBieSBzcGxpdHRpbmcgb3V0IHRoZSBwYXJ0cyBvZiB0aGUgUlBDIHNlcnZpY2UgdGhhdAp0aGUgYXBwbGljYXRpb24gbmVlZHMgYXMgYSBiYWNrLWNoYW5uZWwsIGFuZCBzaGFyaW5nIHRob3NlIDxlbT5vbmx5PC9lbT4gd2l0aCB0aGUKYXBwbGljYXRpb24uIEJ5IGRlZmluaW5nIGEgJnF1b3Q7Y29uc2Vuc3VzIHNlcnZpY2UmcXVvdDssIHdlIGNvdWxkIGdpdmUgdGhlIGFwcGxpY2F0aW9uCmEgd2F5IHRvIHRhbGsgYmFjayBsaW1pdGVkIHRvIG9ubHkgdGhlIGNhcGFiaWxpdGllcyBpdCBuZWVkcy4gVGhpcyBhcHByb2FjaApoYXMgdGhlIGJlbmVmaXQgdGhhdCB3ZSBjb3VsZCBkbyBpdCB3aXRob3V0IGJyZWFraW5nIGV4aXN0aW5nIHVzZSwgYW5kIGlmIHdlCmxhdGVyIGRpZCAmcXVvdDtmaXgmcXVvdDsgdGhlIEFCQ0kgZGlyZWN0aW9uYWxpdHksIHdlIGNvdWxkIGRyb3AgdGhlIHNwZWNpYWwgY2FzZQp3aXRob3V0IGRpc3J1cHRpbmcgdGhlIHJlc3Qgb2YgdGhlIFJQQyBpbnRlcmZhY2UuPC9wPgo8L2xpPgo8bGk+CjxwPjxzdHJvbmc+RXZlbnQgc2VydmljZTo8L3N0cm9uZz4gUmlnaHQgbm93LCB0aGUgSUJDIHJlbGF5ZXIgcmVsaWVzIG9uIHRoZSBUZW5kZXJtaW50IFJQQwpzZXJ2aWNlIHRvIHByb3ZpZGUgYSBzdHJlYW0gb2YgYmxvY2sgYW5kIHRyYW5zYWN0aW9uIGV2ZW50cywgd2hpY2ggaXQgdXNlcyB0bwpkaXNjb3ZlciB3aGljaCB0cmFuc2FjdGlvbnMgbmVlZCByZWxheWluZyB0byBvdGhlciBjaGFpbnMuICBXaGlsZSBJIHRoaW5rCnRoYXQgZXZlbnQgc3Vic2NyaXB0aW9uIHNob3VsZCBldmVudHVhbGx5IGJlIGhhbmRsZWQgdmlhIFAyUCwgd2UgY291bGQgZ2Fpbgpzb21lIGltbWVkaWF0ZSBiZW5lZml0IGJ5IHNwbGl0dGluZyBvdXQgZXZlbnQgc3Vic2NyaXB0aW9uIGZyb20gdGhlIHJlc3Qgb2YKdGhlIFJQQyBzZXJ2aWNlLjwvcD4KPHA+SW4gdGhpcyBtb2RlbCwgYW4gZXZlbnQgc3Vic2NyaXB0aW9uIHNlcnZpY2Ugd291bGQgYmUgZXhwb3NlZCBvbiB0aGUgcHVibGljCm5ldHdvcmssIGJ1dCBvbiBhIGRpZmZlcmVudCBlbmRwb2ludC4gVGhpcyB3b3VsZCByZW1vdmUgdGhlIG5lZWQgZm9yIHRoZSBSUEMKc2VydmljZSB0byBzdXBwb3J0IHRoZSB3ZWJzb2NrZXQgcHJvdG9jb2wsIGFuZCB3b3VsZCBhbGxvdyBvcGVyYXRvcnMgdG8KaXNvbGF0ZSBwb3RlbnRpYWxseSBzZW5zaXRpdmUgc3RhdHVzIHF1ZXJ5IHJlc3VsdHMgZnJvbSB0aGUgcHVibGljIG5ldHdvcmsuPC9wPgo8cD5BdCB0aGUgbW9tZW50IHRoZSByZWxheWVycyBhbHNvIHVzZSB0aGUgUlBDIHNlcnZpY2UgdG8gZ2V0IGJsb2NrIGRhdGEgZm9yCnN5bmNocm9uaXphdGlvbiwgYnV0IHdvcmsgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcyB0byBoYW5kbGUgdGhhdCBjb25jZXJuIHZpYQp0aGUgUDJQIGxheWVyLiBPbmNlIHRoYXQncyBkb25lLCBldmVudCBzdWJzY3JpcHRpb24gY291bGQgYmUgc2VwYXJhdGVkLjwvcD4KPC9saT4KPC91bD4KPHA+U2VwYXJhdGluZyBwYXJ0cyBvZiB0aGUgZXhpc3RpbmcgUlBDIHNlcnZpY2UgaXMgbm90IHdpdGhvdXQgY29zdDogSXQgbWlnaHQKcmVxdWlyZSBhZGRpdGlvbmFsIGNvbm5lY3Rpb24gZW5kcG9pbnRzLCBmb3IgZXhhbXBsZSwgdGhvdWdoIGl0IGlzIGFsc28gbm90IHRvbwpkaWZmaWN1bHQgZm9yIG11bHRpcGxlIG90aGVyd2lzZS1pbmRlcGVuZGVudCBzZXJ2aWNlcyB0byBzaGFyZSBhIGNvbm5lY3Rpb24uPC9wPgo8cD5JbiByZXR1cm4sIHRob3VnaCwgaXQgd291bGQgYmVjb21lIGVhc2llciB0byByZWR1Y2UgdHJhbnNwb3J0IG9wdGlvbnMgYW5kIGZvcgpvcGVyYXRvcnMgdG8gaW5kZXBlbmRlbnRseSBjb250cm9sIGFjY2VzcyB0byBzZW5zaXRpdmUgZGF0YS4gQ29uc2lkZXJpbmcgdGhlCnZpYWJpbGl0eSBhbmQgaW1wbGljYXRpb25zIG9mIHRoZXNlIGlkZWFzIGlzIGJleW9uZCB0aGUgc2NvcGUgb2YgdGhpcyBSRkMsIGJ1dAp0aGV5IGFyZSBkb2N1bWVudGVkIGhlcmUgc2luY2UgdGhleSBmb2xsb3cgZnJvbSB0aGUgYmFja2dyb3VuZCB3ZSBoYXZlIGFscmVhZHkKZGlzY3Vzc2VkLjwvcD4KPGgyIGlkPSJyZWZlcmVuY2VzIj48YSBjbGFzcz0iaGVhZGVyLWFuY2hvciIgaHJlZj0iI3JlZmVyZW5jZXMiPiM8L2E+IFJlZmVyZW5jZXM8L2gyPgo8L0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yPgo="},null]}