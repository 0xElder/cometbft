{"remainingRequest":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-064-batch-verification.md?vue&type=template&id=5989e934&","dependencies":[{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/architecture/adr-064-batch-verification.md","mtime":1673295761175},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673296286086},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/cache-loader/dist/cjs.js","mtime":1673296285960},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/vue-loader/lib/index.js","mtime":1673296285952},{"path":"/Users/aaronwright/Dev/comet-bft-tendermint/docs-old/node_modules/@vuepress/markdown-loader/index.js","mtime":1673296286103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJDb250ZW50U2xvdHNEaXN0cmlidXRvciIsCiAgICB7IGF0dHJzOiB7ICJzbG90LWtleSI6IF92bS4kcGFyZW50LnNsb3RLZXkgfSB9LAogICAgWwogICAgICBfYygiaDEiLCB7IGF0dHJzOiB7IGlkOiAiYWRyLTA2NC1iYXRjaC12ZXJpZmljYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fkci0wNjQtYmF0Y2gtdmVyaWZpY2F0aW9uIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFEUiAwNjQ6IEJhdGNoIFZlcmlmaWNhdGlvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjaGFuZ2Vsb2ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYW5nZWxvZyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlbG9nIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgW19jKCJsaSIsIFtfdm0uX3YoIkphbnVhcnkgMjgsIDIwMjE6IENyZWF0ZWQgKEBtYXJiYXIzNzc4KSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250ZXh0IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb250ZXh0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnRleHQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVuZGVybWludCB1c2VzIHB1YmxpYyBwcml2YXRlIGtleSBjcnlwdG9ncmFwaHkgZm9yIHZhbGlkYXRvciBzaWduaW5nLiBXaGVuIGEgYmxvY2sgaXMgcHJvcG9zZWQgYW5kIHZvdGVkIG9uIHZhbGlkYXRvcnMgc2lnbiBhIG1lc3NhZ2UgcmVwcmVzZW50aW5nIGFjY2VwdGFuY2Ugb2YgYSBibG9jaywgcmVqZWN0aW9uIGlzIHNpZ25hbGVkIHZpYSBhIG5pbCB2b3RlLiBUaGVzZSBzaWduYXR1cmVzIGFyZSBhbHNvIHVzZWQgdG8gdmVyaWZ5IHByZXZpb3VzIGJsb2NrcyBhcmUgY29ycmVjdCBpZiBhIG5vZGUgaXMgc3luY2luZy4gQ3VycmVudGx5LCBUZW5kZXJtaW50IHJlcXVpcmVzIGVhY2ggc2lnbmF0dXJlIHRvIGJlIHZlcmlmaWVkIGluZGl2aWR1YWxseSwgdGhpcyBsZWFkcyB0byBhIHNsb3cgZG93biBvZiBibG9jayB0aW1lcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQmF0Y2ggVmVyaWZpY2F0aW9uIGlzIHRoZSBwcm9jZXNzIG9mIHRha2luZyBtYW55IG1lc3NhZ2VzLCBrZXlzLCBhbmQgc2lnbmF0dXJlcyBhZGRpbmcgdGhlbSB0b2dldGhlciBhbmQgdmVyaWZ5aW5nIHRoZW0gYWxsIGF0IG9uY2UuIFRoZSBwdWJsaWMga2V5IGNhbiBiZSB0aGUgc2FtZSBpbiB3aGljaCBjYXNlIGl0IHdvdWxkIG1lYW4gYSBzaW5nbGUgdXNlciBpcyBzaWduaW5nIG1hbnkgbWVzc2FnZXMuIEluIG91ciBjYXNlIGVhY2ggcHVibGljIGtleSBpcyB1bmlxdWUsIGVhY2ggdmFsaWRhdG9yIGhhcyB0aGVpciBvd24gYW5kIGNvbnRyaWJ1dGUgYSB1bmlxdWUgbWVzc2FnZS4gVGhlIGFsZ29yaXRobSBjYW4gdmFyeSBmcm9tIGN1cnZlIHRvIGN1cnZlIGJ1dCB0aGUgcGVyZm9ybWFuY2UgYmVuZWZpdCwgb3ZlciBzaW5nbGUgdmVyaWZ5aW5nIG1lc3NhZ2VzLCBwdWJsaWMga2V5cyBhbmQgc2lnbmF0dXJlcyBpcyBzaGFyZWQuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImFsdGVybmF0aXZlLWFwcHJvYWNoZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FsdGVybmF0aXZlLWFwcHJvYWNoZXMiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQWx0ZXJuYXRpdmUgQXBwcm9hY2hlcyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlNpZ25hdHVyZSBhZ2dyZWdhdGlvblxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiU2lnbmF0dXJlIGFnZ3JlZ2F0aW9uIGlzIGFuIGFsdGVybmF0aXZlIHRvIGJhdGNoIHZlcmlmaWNhdGlvbi4gU2lnbmF0dXJlIGFnZ3JlZ2F0aW9uIGxlYWRzIHRvIGZhc3QgdmVyaWZpY2F0aW9uIGFuZCBzbWFsbGVyIGJsb2NrIHNpemVzLiBBdCB0aGUgdGltZSBvZiB3cml0aW5nIHRoaXMgQURSIHRoZXJlIGlzIG9uIGdvaW5nIHdvcmsgdG8gZW5hYmxlIHNpZ25hdHVyZSBhZ2dyZWdhdGlvbiBpbiBUZW5kZXJtaW50LiBUaGUgcmVhc29uIHdoeSB3ZSBoYXZlIG9wdGVkIHRvIG5vdCBpbnRyb2R1Y2UgaXQgYXQgdGhpcyB0aW1lIGlzIGJlY2F1c2UgZXZlcnkgdmFsaWRhdG9yIHNpZ25zIGEgdW5pcXVlIG1lc3NhZ2UuXG5TaWduaW5nIGEgdW5pcXVlIG1lc3NhZ2UgcHJldmVudHMgYWdncmVnYXRpb24gYmVmb3JlIHZlcmlmaWNhdGlvbi4gRm9yIGV4YW1wbGUgaWYgd2Ugd2VyZSB0byBpbXBsZW1lbnQgc2lnbmF0dXJlIGFnZ3JlZ2F0aW9uIHdpdGggQkxTLCB0aGVyZSBjb3VsZCBiZSBhIHBvdGVudGlhbCBzbG93IGRvd24gb2YgMTB4LTEwMHggaW4gdmVyaWZpY2F0aW9uIHNwZWVkcy4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGVjaXNpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RlY2lzaW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEZWNpc2lvbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQWRvcHQgQmF0Y2ggVmVyaWZpY2F0aW9uLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGV0YWlsZWQtZGVzaWduIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNkZXRhaWxlZC1kZXNpZ24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERldGFpbGVkIERlc2lnbiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBIG5ldyBpbnRlcmZhY2Ugd2lsbCBiZSBpbnRyb2R1Y2VkLiBUaGlzIGludGVyZmFjZSB3aWxsIGhhdmUgdGhyZWUgbWV0aG9kcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5ld0JhdGNoVmVyaWZpZXIiKV0pLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFkZCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVmVyaWZ5QmF0Y2giKV0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0bS1jb2RlLWJsb2NrIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY29kZWJsb2NrIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgbGFuZ3VhZ2U6ICJnbyIsCiAgICAgICAgICBiYXNlNjQ6CiAgICAgICAgICAgICJkSGx3WlNCQ1lYUmphRlpsY21sbWFXVnlJR2x1ZEdWeVptRmpaU0I3Q2lBZ1FXUmtLR3RsZVNCamNubHdkRzh1VUhWaWEyVjVMQ0J6YVdkdVlYUjFjbVVzSUcxbGMzTmhaMlVnVzExaWVYUmxLU0JsY25KdmNpQXZMeUJCWkdRZ1lYQndaVzVrY3lCaGJpQmxiblJ5ZVNCcGJuUnZJSFJvWlNCQ1lYUmphRlpsY21sbWFXVnlMZ29nSUZabGNtbG1lU2dwSUdKdmIyd2dMeThnVm1WeWFXWjVJSFpsY21sbWFXVnpJR0ZzYkNCMGFHVWdaVzUwY21sbGN5QnBiaUIwYUdVZ1FtRjBZMmhXWlhKcFptbGxjaTRnU1dZZ2RHaGxJSFpsY21sbWFXTmhkR2x2YmlCbVlXbHNjeUJwZENCcGN5QjFibXR1YjNkdUlIZG9hV05vSUdWdWRISjVJR1poYVd4bFpDQmhibVFnWldGamFDQmxiblJ5ZVNCM2FXeHNJRzVsWldRZ2RHOGdZbVVnZG1WeWFXWnBaV1FnYVc1a2FYWnBaSFZoYkd4NUxncDlDZz09IiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk5ld0JhdGNoVmVyaWZpZXIiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNyZWF0ZXMgYSBuZXcgdmVyaWZpZXIuIFRoaXMgdmVyaWZpZXIgd2lsbCBiZSBwb3B1bGF0ZWQgd2l0aCBlbnRyaWVzIHRvIGJlIHZlcmlmaWVkLiIKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJBZGQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGFkZHMgYW4gZW50cnkgdG8gdGhlIFZlcmlmaWVyLiBBZGQgYWNjZXB0cyBhIHB1YmxpYyBrZXkgYW5kIHR3byBzbGljZSBvZiBieXRlcyAoc2lnbmF0dXJlIGFuZCBtZXNzYWdlKS4iCiAgICAgICAgICApLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVmVyaWZ5IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB2ZXJpZmllcyBhbGwgdGhlIGVudGlyZXMuIEF0IHRoZSBlbmQgb2YgVmVyaWZ5IGlmIHRoZSB1bmRlcmx5aW5nIEFQSSBkb2VzIG5vdCByZXNldCB0aGUgVmVyaWZpZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUgKGVtcHR5KSwgaXQgc2hvdWxkIGJlIGRvbmUgaGVyZS4gVGhpcyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgcmV1c2luZyB0aGUgdmVyaWZpZXIgd2l0aCBlbnRyaWVzIGZyb20gYSBwcmV2aW91cyB2ZXJpZmljYXRpb24uIgogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWJvdmUgdGhlcmUgaXMgbWVudGlvbiBvZiBhbiBlbnRyeS4gQW4gZW50cnkgY2FuIGJlIGNvbnN0cnVjdGVkIGluIG1hbnkgd2F5cyBkZXBlbmRpbmcgb24gdGhlIG5lZWRzIG9mIHRoZSB1bmRlcmx5aW5nIGN1cnZlLiBBIHNpbXBsZSBhcHByb2FjaCB3b3VsZCBiZToiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidG0tY29kZS1ibG9jayIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvZGVibG9jayIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGxhbmd1YWdlOiAiZ28iLAogICAgICAgICAgYmFzZTY0OgogICAgICAgICAgICAiZEhsd1pTQmxiblJ5ZVNCemRISjFZM1FnZXdvZ0lIQjFZa3RsZVNCamNubHdkRzh1VUhWaWEyVjVDaUFnYzJsbmJtRjBkWEpsSUZ0ZFlubDBaUW9nSUcxbGMzTmhaMlVnVzExaWVYUmxDbjBLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbWFpbiByZWFzb24gdGhpcyBhcHByb2FjaCBpcyBiZWluZyB0YWtlbiBpcyB0byBwcmV2ZW50IHNpbXBsZSBtaXN0YWtlcy4gU29tZSBBUElzIGFsbG93IHRoZSB1c2VyIHRvIGNyZWF0ZSB0aHJlZSBzbGljZXMgYW5kIHBhc3MgdGhlbSB0byB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWZXJpZnlCYXRjaCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmdW5jdGlvbiBidXQgdGhpcyByZWxpZXMgb24gdGhlIHVzZXIgdG8gc2FmZWx5IGdlbmVyYXRlIGFsbCB0aGUgc2xpY2VzIChzZWUgZXhhbXBsZSBiZWxvdykuIFdlIHdvdWxkIGxpa2UgdG8gbWluaW1pemUgdGhlIHBvc3NpYmlsaXR5IG9mIG1ha2luZyBhIG1pc3Rha2UuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRtLWNvZGUtYmxvY2siLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2RlYmxvY2siLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBsYW5ndWFnZTogImdvIiwKICAgICAgICAgIGJhc2U2NDoKICAgICAgICAgICAgIlpuVnVZeUJXWlhKcFpua29hMlY1Y3lCYlhXTnllWEIwYnk1UWRXSnJaWGtzSUhOcFoyNWhkSFZ5WlhNc0lHMWxjM05oWjJWelcxMWJYV0o1ZEdVcElHSnZiMndLIiwKICAgICAgICB9LAogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGNoYW5nZSB3aWxsIG5vdCBhZmZlY3QgYW55IHVzZXJzIGluIGFueXdheSBvdGhlciB0aGFuIGZhc3RlciB2ZXJpZmljYXRpb24gdGltZXMuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoaXMgbmV3IGFwaSB3aWxsIGJlIHVzZWQgZm9yIHZlcmlmaWNhdGlvbiBpbiBib3RoIGNvbnNlbnN1cyBhbmQgYmxvY2sgc3luY2luZy4gV2l0aGluIHRoZSBjdXJyZW50IFZlcmlmeSBmdW5jdGlvbnMgdGhlcmUgd2lsbCBiZSBhIGNoZWNrIHRvIHNlZSBpZiB0aGUga2V5IHR5cGVzIHN1cHBvcnRzIHRoZSBCYXRjaFZlcmlmaWNhdGlvbiBBUEkuIElmIGl0IGRvZXMgaXQgd2lsbCBleGVjdXRlIGJhdGNoIHZlcmlmaWNhdGlvbiwgaWYgbm90IHNpbmdsZSBzaWduYXR1cmUgdmVyaWZpY2F0aW9uIHdpbGwgYmUgdXNlZC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY29uc2Vuc3VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zZW5zdXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnNlbnN1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcHJvY2VzcyB3aXRoaW4gY29uc2Vuc3VzIHdpbGwgYmUgdG8gd2FpdCBmb3IgMi8zKyBvZiB0aGUgdm90ZXMgdG8gYmUgcmVjZWl2ZWQsIG9uY2UgdGhleSBhcmUgcmVjZWl2ZWQgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWZXJpZnkoKSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3aWxsIGJlIGNhbGxlZCB0byBiYXRjaCB2ZXJpZnkgYWxsIHRoZSBtZXNzYWdlcy4gVGhlIG1lc3NhZ2VzIHRoYXQgY29tZSBpbiBhZnRlciAyLzMrIGhhcyBiZWVuIHZlcmlmaWVkIHdpbGwgYmUgaW5kaXZpZHVhbGx5IHZlcmlmaWVkLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJibG9jay1zeW5jLWxpZ2h0LWNsaWVudCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYmxvY2stc3luYy1saWdodC1jbGllbnQiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmxvY2sgU3luYyAmIExpZ2h0IENsaWVudCIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcHJvY2VzcyBmb3IgYmxvY2sgc3luYyAmIGxpZ2h0IGNsaWVudCB2ZXJpZmljYXRpb24gd2lsbCBiZSB0byB2ZXJpZnkgb25seSAyLzMrIGluIGEgYmF0Y2ggc3R5bGUuIFNpbmNlIHRoZXNlIHByb2Nlc3NlcyBhcmUgbm90IHBhcnRpY2lwYXRpbmcgaW4gY29uc2Vuc3VzIHRoZXJlIGlzIG5vIG5lZWQgdG8gd2FpdCBmb3IgbW9yZSBtZXNzYWdlcy4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgYmF0Y2ggdmVyaWZpY2F0aW9ucyBmYWlscyBmb3IgYW55IHJlYXNvbiwgaXQgd2lsbCBub3QgYmUga25vd24gd2hpY2ggZW50cnkgY2F1c2VkIHRoZSBmYWlsdXJlLiBWZXJpZmljYXRpb24gd2lsbCBuZWVkIHRvIHJldmVydCB0byBzaW5nbGUgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbi4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlN0YXJ0aW5nIG91dCwgb25seSBlZDI1NTE5IHdpbGwgc3VwcG9ydCBiYXRjaCB2ZXJpZmljYXRpb24uIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN0YXR1cyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3RhdHVzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpLAogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFN0YXR1cyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiSW1wbGVtZW50ZWQiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvc2l0aXZlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwb3NpdGl2ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUG9zaXRpdmUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJGYXN0ZXIgdmVyaWZpY2F0aW9uIHRpbWVzLCBpZiB0aGUgY3VydmUgc3VwcG9ydHMgaXQiKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmVnYXRpdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI25lZ2F0aXZlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBOZWdhdGl2ZSIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk5vIHdheSB0byBzZWUgd2hpY2gga2V5IGZhaWxlZCB2ZXJpZmljYXRpb25cbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkEgZmFpbHVyZSBtZWFucyByZXZlcnRpbmcgYmFjayB0byBzaW5nbGUgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbi4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibmV1dHJhbCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbmV1dHJhbCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKSwKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBOZXV0cmFsIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW5jZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlZmVyZW5jZXMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFJlZmVyZW5jZXMiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2hkZXZhbGVuY2UvZWQyNTUxOWNvbnNlbnN1cyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIiwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJFZDI1NTE5IExpYnJhcnkiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2VkMjU1MTkuY3IueXAudG8vIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkVkMjU1MTkgc3BlYyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzEzMTkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU2lnbmF0dXJlIEFnZ3JlZ2F0aW9uIGZvciB2b3RlcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS90ZW5kZXJtaW50L3RlbmRlcm1pbnQvaXNzdWVzLzI4NDAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUHJvcG9zZXItYmFzZWQgdGltZXN0YW1wcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}